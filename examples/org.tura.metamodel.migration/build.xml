<project default="main">
	
	<!-- ANT Taskdefs for ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>  
	
	<target name="loadModels">
		<epsilon.emf.register file="model/domain.ecore"/>		
		<epsilon.emf.loadModel name="M" modelfile="model/hr.domain" 
				metamodeluri="http://tura.org/2013/v1/domain" store="true"/>
	</target>
	
	<target name="Transformation">
		<epsilon.eol>
			<model ref="M"/>
			<![CDATA[
			var uuid := Native('java.util.UUID');

			for (element in ActioinTriggers.all){
			    if (element.triggers.size() <> 0) {
			element.uid.println();	
			element.eClass().name.println();
			       for (trigger in element.triggers){
	                 var field : domain::FlexField = new domain::FlexField;
			         if ( trigger.methodRef <> null){
                       var expression : domain::ExpressionPart = new domain::ExpressionPart;
			           expression.expressionType='TypesImpl';
	                   expression.order=0;
			           expression.objRef=trigger.packageRef.parent;
			           field.expression.add(expression);

                       expression = new domain::ExpressionPart;
	                   expression.expressionType='PackageImpl';
                       expression.order=1;
	                   expression.objRef=trigger.packageRef;
	                   field.expression.add(expression);
			
                       expression = new domain::ExpressionPart;
                       expression.expressionType='TypeImpl';
                       expression.order=2;
                       expression.objRef=trigger.typeRef;
                       field.expression.add(expression);
			
                       expression = new domain::ExpressionPart;
                       expression.expressionType='OperationImpl';
                       expression.order=3;
                       expression.objRef=trigger.methodRef;
                       field.expression.add(expression);
			
			           field.value = "Packages."+ trigger.packageRef.name+"."+trigger.packageRef.name+":"+trigger.typeRef.name+"."+trigger.methodRef.name+"()";
			           field.uid=uuid.randomUUID().toString();
			
			         }
			
			         if (trigger.parameters.size() <> 0){
			             var sz : Integer =  trigger.parameters.size();
			             var i : Integer = 0;
			             while ( i < sz ){
			                var parameter = trigger.parameters.get(0);
	                        trigger.parameters.remove(0);
			                field.parameters.add(parameter);
			                i = i + 1; 
			             }
			          }
	                  if (trigger.classifiers.size() <> 0){
                         var sz : Integer =  trigger.classifiers.size();
                         var i : Integer = 0;
                         while ( i < sz ){
                           var classifier = trigger.classifiers.get(0);
                           trigger.classifiers.remove(0);
                           field.classifiers.add(classifier);
                           i = i + 1; 
                        }
			          }
			
			         element.fields.add(field);
			       }
			    }
			}
			]]>
		</epsilon.eol>
	</target>

	<target name="Validation">
		<epsilon.evl>
			<model ref="M"/>
			<![CDATA[
			
			context Uielement {
				constraint c1 {
					check : self.onEventRefreshArea.size() ==  self.refreshAreas.size()
                    message : 'Wrong conversion for element '+self.uid
				}
			}		
			]]>
			
		</epsilon.evl>
	</target>	
	
	
	<target name="main" depends="loadModels">
		<trycatch>
			<try>
				<epsilon.startTransaction name="Transaction1" models="M"/>
				<runtarget target="Transformation"/>
				<!-- runtarget target="Validation"/-->
				<epsilon.commitTransaction name="Transaction1"/>
			</try>
			<catch>
				<epsilon.rollbackTransaction name="Transaction1"/>
			</catch>
		</trycatch>
	</target>
	
</project>
