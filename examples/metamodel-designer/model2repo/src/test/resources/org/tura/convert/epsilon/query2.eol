/*
 * Tura - Application generation solution
 *
 * Copyright 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com )
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var turaType = trg!type::Type.allinstances()-> select( g | g.uid = "2c1992a1-3dde-4f1a-b312-7b438056654f").first();



//var q =  trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
//                        and a.eContainer().name = turaType.eContainer().name).excluding(
//				            trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
//				                        and a.eContainer().name = turaType.eContainer().name
//				                        and getTypeName(a.target) = "Categorized" 
//				                        and getPackageName(a.target) =  "artifact"));


var q1 =  trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
                        and a.eContainer().name = turaType.eContainer().name);


q1.println();

var q2 =  
				            trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
				                        and a.eContainer().name = turaType.eContainer().name
				                        and getTypeName(a.target) = "Categorized" 
				                        and getPackageName(a.target) =  "artifact");

q2.println();

var q = q1.excludingAll(q2);
q.println();


    var qq =             trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
                        and a.eContainer().name = turaType.eContainer().name).size() - 
              
             trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
                        and a.eContainer().name = turaType.eContainer().name).excludingAll(
				            trg!type::Generalization.allinstances()->select(a|a.source.uid = turaType.uid 
				                        and a.eContainer().name = turaType.eContainer().name
				                        and getTypeName(a.target) =  "Categorized"  
				                        and getPackageName(a.target) =  "artifact" )).size();

qq.println();

 return q;
 
 operation getTypeName( type){
   if ( type.isKindOf(trg!type::TypeReference)){
      if ( "Any".equals(type.typeRef.name)){
         return "EObject";
      }
      return type.typeRef.name;
   }
      return type.name;
}
 
 
 operation getPackageName( type){
   if ( type.isKindOf(trg!type::TypeReference)){
      if ( "Any".equals(type.typeRef.name)){
         return "ecore";
      }
      return type.typeRef.eContainer().name;
   }
      return type.eContainer().name;
}
