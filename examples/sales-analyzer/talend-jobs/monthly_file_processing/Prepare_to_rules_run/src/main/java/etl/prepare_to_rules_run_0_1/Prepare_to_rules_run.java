// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package etl.prepare_to_rules_run_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Prepare_to_rules_run Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Prepare_to_rules_run implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(date != null){
				
					String pattern_date = "yyyy-MM-dd HH:mm:ss";
					String value_date = "2017-11-01 20:48:27";
					String[] parts_date = value_date.split(";");
					if(parts_date.length > 1){
						pattern_date = parts_date[0];
						this.setProperty("date", pattern_date + ";" + FormatterUtils.format_Date(date, pattern_date));
					}else{
						this.setProperty("date", FormatterUtils.format_Date(date, pattern_date));
					}
				
			}
			
			if(inputDirectory != null){
				
					this.setProperty("inputDirectory", inputDirectory.toString());
				
			}
			
			if(outputDirectory != null){
				
					this.setProperty("outputDirectory", outputDirectory.toString());
				
			}
			
			if(session != null){
				
					this.setProperty("session", session.toString());
				
			}
			
		}

public java.util.Date date;
public java.util.Date getDate(){
	return this.date;
}
public String inputDirectory;
public String getInputDirectory(){
	return this.inputDirectory;
}
public String outputDirectory;
public String getOutputDirectory(){
	return this.outputDirectory;
}
public String session;
public String getSession(){
	return this.session;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Prepare_to_rules_run";
	private final String projectName = "ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Prepare_to_rules_run.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Prepare_to_rules_run.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJDBCConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMemorizeRows_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tJDBCConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_1", false);
		start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_1";

	
		int tos_count_tJDBCConnection_1 = 0;
		
    	class BytesLimit65535_tJDBCConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJDBCConnection_1().limitLog4jByte();
	

	
		String url_tJDBCConnection_1 = "jdbc:postgresql://localhost:5432/postgres";

	String dbUser_tJDBCConnection_1 = "postgres";
	
	
		 
	final String decryptedPassword_tJDBCConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
		String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;
	

	java.sql.Connection conn_tJDBCConnection_1 = null;
	
		
		String driverClass_tJDBCConnection_1 = "org.postgresql.Driver";
		java.lang.Class.forName(driverClass_tJDBCConnection_1);
		
		conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(url_tJDBCConnection_1,dbUser_tJDBCConnection_1,dbPwd_tJDBCConnection_1);

		globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
	if (null != conn_tJDBCConnection_1) {
		
			conn_tJDBCConnection_1.setAutoCommit(true);
	}
	
	globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
	globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
	globalMap.put("username_tJDBCConnection_1", dbUser_tJDBCConnection_1);

 



/**
 * [tJDBCConnection_1 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	

 


	tos_count_tJDBCConnection_1++;

/**
 * [tJDBCConnection_1 main ] stop
 */
	
	/**
	 * [tJDBCConnection_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	

 

ok_Hash.put("tJDBCConnection_1", true);
end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJDBCInput_1Process(globalMap);



/**
 * [tJDBCConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	

 



/**
 * [tJDBCConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
						this.country_id = readInteger(dis);
					
						this.id_state = readInteger(dis);
					
						this.id_city = readInteger(dis);
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// Integer
				
						writeInteger(this.id_state,dos);
					
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Object obj_id;

				public Object getObj_id () {
					return this.obj_id;
				}
				
			    public java.util.Date active_date;

				public java.util.Date getActive_date () {
					return this.active_date;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public java.util.Date exp_date;

				public java.util.Date getExp_date () {
					return this.exp_date;
				}
				
			    public String obj_status;

				public String getObj_status () {
					return this.obj_status;
				}
				
			    public String obj_type;

				public String getObj_type () {
					return this.obj_type;
				}
				
			    public java.util.Date update_date;

				public java.util.Date getUpdate_date () {
					return this.update_date;
				}
				
			    public Integer optlock;

				public Integer getOptlock () {
					return this.optlock;
				}
				
			    public long country_id;

				public long getCountry_id () {
					return this.country_id;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				
			    public long state_id;

				public long getState_id () {
					return this.state_id;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public long city_id;

				public long getCity_id () {
					return this.city_id;
				}
				
			    public String city_name;

				public String getCity_name () {
					return this.city_name;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public BigDecimal amount;

				public BigDecimal getAmount () {
					return this.amount;
				}
				
			    public java.util.Date history_date;

				public java.util.Date getHistory_date () {
					return this.history_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
						this.obj_id = (Object) dis.readObject();
					
					this.active_date = readDate(dis);
					
					this.create_date = readDate(dis);
					
					this.exp_date = readDate(dis);
					
					this.obj_status = readString(dis);
					
					this.obj_type = readString(dis);
					
					this.update_date = readDate(dis);
					
						this.optlock = readInteger(dis);
					
			        this.country_id = dis.readLong();
					
					this.country_name = readString(dis);
					
			        this.state_id = dis.readLong();
					
					this.state_name = readString(dis);
					
			        this.city_id = dis.readLong();
					
					this.city_name = readString(dis);
					
					this.product = readString(dis);
					
						this.amount = (BigDecimal) dis.readObject();
					
					this.history_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.obj_id);
					
					// java.util.Date
				
						writeDate(this.active_date,dos);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// java.util.Date
				
						writeDate(this.exp_date,dos);
					
					// String
				
						writeString(this.obj_status,dos);
					
					// String
				
						writeString(this.obj_type,dos);
					
					// java.util.Date
				
						writeDate(this.update_date,dos);
					
					// Integer
				
						writeInteger(this.optlock,dos);
					
					// long
				
		            	dos.writeLong(this.country_id);
					
					// String
				
						writeString(this.country_name,dos);
					
					// long
				
		            	dos.writeLong(this.state_id);
					
					// String
				
						writeString(this.state_name,dos);
					
					// long
				
		            	dos.writeLong(this.city_id);
					
					// String
				
						writeString(this.city_name,dos);
					
					// String
				
						writeString(this.product,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.amount);
					
					// java.util.Date
				
						writeDate(this.history_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("obj_id="+String.valueOf(obj_id));
		sb.append(",active_date="+String.valueOf(active_date));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",exp_date="+String.valueOf(exp_date));
		sb.append(",obj_status="+obj_status);
		sb.append(",obj_type="+obj_type);
		sb.append(",update_date="+String.valueOf(update_date));
		sb.append(",optlock="+String.valueOf(optlock));
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",country_name="+country_name);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",state_name="+state_name);
		sb.append(",city_id="+String.valueOf(city_id));
		sb.append(",city_name="+city_name);
		sb.append(",product="+product);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",history_date="+String.valueOf(history_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJDBCInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_extract.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJDBCInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCInput_1", false);
		start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCInput_1";

	
		int tos_count_tJDBCInput_1 = 0;
		
    	class BytesLimit65535_tJDBCInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJDBCInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tJDBCInput_1 = 0;
		    java.sql.Connection conn_tJDBCInput_1 = null;
		        conn_tJDBCInput_1 = (java.sql.Connection)globalMap.get("conn_tJDBCConnection_1");
				
		    
			java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1.createStatement();

		    String dbquery_tJDBCInput_1 = "SELECT  * FROM sales_analyzer.product_group_history where history_date between  PARSEDATETIME('"
+
TalendDate.formatDate("yyyyMMdd",TalendDate.addDate( TalendDate.getFirstDayOfMonth(context.date),-2,"MM"))

+"','YYYYMMDD') and PARSEDATETIME('"+TalendDate.formatDate("yyyyMMdd", TalendDate.addDate(TalendDate.getFirstDayOfMonth(context.date),-1,"dd")) +"','yyyyMMdd')";
			

                       globalMap.put("tJDBCInput_1_QUERY",dbquery_tJDBCInput_1);

		    java.sql.ResultSet rs_tJDBCInput_1 = null;
		try{
		    rs_tJDBCInput_1 = stmt_tJDBCInput_1.executeQuery(dbquery_tJDBCInput_1);
		    java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1.getMetaData();
		    int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1.getColumnCount();

		    String tmpContent_tJDBCInput_1 = null;
		    
		    
		    while (rs_tJDBCInput_1.next()) {
		        nb_line_tJDBCInput_1++;
		        
							if(colQtyInRs_tJDBCInput_1 < 1) {
								row3.obj_id = null;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(1) != null) {
                row3.obj_id = rs_tJDBCInput_1.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 2) {
								row3.active_date = null;
							} else {
										
            java.util.Date date_tJDBCInput_1 = null;
            try{
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(2);
            }catch(java.lang.Exception e){
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(2);
            }
            row3.active_date = date_tJDBCInput_1;
		                    }
							if(colQtyInRs_tJDBCInput_1 < 3) {
								row3.create_date = null;
							} else {
										
            java.util.Date date_tJDBCInput_1 = null;
            try{
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(3);
            }catch(java.lang.Exception e){
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(3);
            }
            row3.create_date = date_tJDBCInput_1;
		                    }
							if(colQtyInRs_tJDBCInput_1 < 4) {
								row3.exp_date = null;
							} else {
										
            java.util.Date date_tJDBCInput_1 = null;
            try{
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(4);
            }catch(java.lang.Exception e){
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(4);
            }
            row3.exp_date = date_tJDBCInput_1;
		                    }
							if(colQtyInRs_tJDBCInput_1 < 5) {
								row3.obj_status = null;
							} else {
	                         		
        	row3.obj_status = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 5, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 6) {
								row3.obj_type = null;
							} else {
	                         		
        	row3.obj_type = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 6, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 7) {
								row3.update_date = null;
							} else {
										
            java.util.Date date_tJDBCInput_1 = null;
            try{
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(7);
            }catch(java.lang.Exception e){
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(7);
            }
            row3.update_date = date_tJDBCInput_1;
		                    }
							if(colQtyInRs_tJDBCInput_1 < 8) {
								row3.optlock = null;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(8) != null) {
                row3.optlock = rs_tJDBCInput_1.getInt(8);
            } else {
                    row3.optlock = null;
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 9) {
								row3.country_id = 0;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(9) != null) {
                row3.country_id = rs_tJDBCInput_1.getLong(9);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 10) {
								row3.country_name = null;
							} else {
	                         		
        	row3.country_name = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 10, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 11) {
								row3.state_id = 0;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(11) != null) {
                row3.state_id = rs_tJDBCInput_1.getLong(11);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 12) {
								row3.state_name = null;
							} else {
	                         		
        	row3.state_name = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 12, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 13) {
								row3.city_id = 0;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(13) != null) {
                row3.city_id = rs_tJDBCInput_1.getLong(13);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 14) {
								row3.city_name = null;
							} else {
	                         		
        	row3.city_name = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 14, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 15) {
								row3.product = null;
							} else {
	                         		
        	row3.product = routines.system.JDBCUtil.getString(rs_tJDBCInput_1, 15, false);
		                    }
							if(colQtyInRs_tJDBCInput_1 < 16) {
								row3.amount = null;
							} else {
		                          
            if(rs_tJDBCInput_1.getObject(16) != null) {
                row3.amount = rs_tJDBCInput_1.getBigDecimal(16);
            } else {
                    row3.amount = null;
            }
		                    }
							if(colQtyInRs_tJDBCInput_1 < 17) {
								row3.history_date = null;
							} else {
										
            java.util.Date date_tJDBCInput_1 = null;
            try{
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(17);
            }catch(java.lang.Exception e){
            	date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(17);
            }
            row3.history_date = date_tJDBCInput_1;
		                    }
					



 



/**
 * [tJDBCInput_1 begin ] stop
 */
	
	/**
	 * [tJDBCInput_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	

 


	tos_count_tJDBCInput_1++;

/**
 * [tJDBCInput_1 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.country_id = (int)row3.country_id ;
out1_tmp.id_state = (int)row3.state_id ;
out1_tmp.id_city = (int)row3.city_id ;
out1_tmp.product = row3.product ;
out1_tmp.name_country = row3.country_name ;
out1_tmp.name_state = row3.state_name ;
out1_tmp.name_city = row3.city_name ;
out1_tmp.amount = row3.amount.floatValue() ;
out1_tmp.date = row3.history_date ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out1.country_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.country_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.id_state != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.id_state
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.id_city != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.id_city
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.product != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.product
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.name_country != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.name_country
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.name_state != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.name_state
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.name_city != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.name_city
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.amount != null) {
                        sb_tFileOutputDelimited_2.append(
                            out1.amount
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out1.date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out1.date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */

} // End of branch "out1"







	
	/**
	 * [tJDBCInput_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	

	}
}finally{
	if(rs_tJDBCInput_1 !=null){
		rs_tJDBCInput_1.close();
	}
	stmt_tJDBCInput_1.close();

}
globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);



 

ok_Hash.put("tJDBCInput_1", true);
end_Hash.put("tJDBCInput_1", System.currentTimeMillis());




/**
 * [tJDBCInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCInput_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	

 



/**
 * [tJDBCInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Long state_id;

				public Long getState_id () {
					return this.state_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public String sortname_country;

				public String getSortname_country () {
					return this.sortname_country;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String customer;

				public String getCustomer () {
					return this.customer;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.state_id = null;
           				} else {
           			    	this.state_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
					this.name_state = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
					this.sortname_country = readString(dis);
					
					this.name_country = readString(dis);
					
					this.product = readString(dis);
					
					this.customer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.name_city,dos);
					
					// Long
				
						if(this.state_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.state_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// String
				
						writeString(this.name_state,dos);
					
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// String
				
						writeString(this.sortname_country,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.customer,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",sortname_country="+sortname_country);
		sb.append(",name_country="+name_country);
		sb.append(",product="+product);
		sb.append(",customer="+customer);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Long id_city;
    				Long id_state;
    				Long country_id;
    				String product;
         			String name_country_first;
         			String name_state_first;
         			String name_city_first;BigDecimal amount_sum;
           			
         			java.util.Date date_first;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.id_city == null) ? 0 : this.id_city.hashCode());
							
							result = prime * result + ((this.id_state == null) ? 0 : this.id_state.hashCode());
							
							result = prime * result + ((this.country_id == null) ? 0 : this.country_id.hashCode());
							
							result = prime * result + ((this.product == null) ? 0 : this.product.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.id_city == null) {
								if (other.id_city != null) 
									return false;
							} else if (!this.id_city.equals(other.id_city)) 
								return false;
						
							if (this.id_state == null) {
								if (other.id_state != null) 
									return false;
							} else if (!this.id_state.equals(other.id_state)) 
								return false;
						
							if (this.country_id == null) {
								if (other.country_id != null) 
									return false;
							} else if (!this.country_id.equals(other.country_id)) 
								return false;
						
							if (this.product == null) {
								if (other.product != null) 
									return false;
							} else if (!this.product.equals(other.product)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_validated.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_validated.csv", "UTF-8",";","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.id_city = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.id_city = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.name_city = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.state_id = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.state_id = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.id_state = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.id_state = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.name_state = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.country_id = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.country_id = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.sortname_country = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.name_country = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.product = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.customer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.amount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.amount = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.date = null;
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_1.id_city = row1.id_city;
			operation_finder_tAggregateRow_1.id_state = row1.id_state;
			operation_finder_tAggregateRow_1.country_id = row1.country_id;
			operation_finder_tAggregateRow_1.product = row1.product;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	
		boolean isFirstAdd_tAggregateRow_1 = false;
	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.id_city = operation_finder_tAggregateRow_1.id_city;
				operation_result_tAggregateRow_1.id_state = operation_finder_tAggregateRow_1.id_state;
				operation_result_tAggregateRow_1.country_id = operation_finder_tAggregateRow_1.country_id;
				operation_result_tAggregateRow_1.product = operation_finder_tAggregateRow_1.product;
				
		
		
			isFirstAdd_tAggregateRow_1 = true;
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(isFirstAdd_tAggregateRow_1 ) {
					operation_result_tAggregateRow_1.name_country_first = row1.name_country;
				}
				
				if(isFirstAdd_tAggregateRow_1 ) {
					operation_result_tAggregateRow_1.name_state_first = row1.name_state;
				}
				
				if(isFirstAdd_tAggregateRow_1 ) {
					operation_result_tAggregateRow_1.name_city_first = row1.name_city;
				}
				
					if(operation_result_tAggregateRow_1.amount_sum == null) {
						operation_result_tAggregateRow_1.amount_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_1.amount_sum = operation_result_tAggregateRow_1.amount_sum.add(
						new BigDecimal(
							String.valueOf(
								row1.amount
							)
						)
					);
					
				if(isFirstAdd_tAggregateRow_1 ) {
					operation_result_tAggregateRow_1.date_first = row1.date;
				}
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_validated.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_extract.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row2.country_id = aggregated_row_tAggregateRow_1.country_id;
            				    
            				    row2.id_state = aggregated_row_tAggregateRow_1.id_state;
            				    
            				    row2.id_city = aggregated_row_tAggregateRow_1.id_city;
            				    
            				    row2.product = aggregated_row_tAggregateRow_1.product;
            				    
                                row2.name_country = aggregated_row_tAggregateRow_1.name_country_first;
                                row2.name_state = aggregated_row_tAggregateRow_1.name_state_first;
                                row2.name_city = aggregated_row_tAggregateRow_1.name_city_first;
    								if(aggregated_row_tAggregateRow_1.amount_sum != null) {
    								row2.amount = aggregated_row_tAggregateRow_1.amount_sum.floatValue();
										
    								}else{
    								
    									row2.amount = null;
    									
    								}
    								
                                row2.date = aggregated_row_tAggregateRow_1.date_first;

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row2.country_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.country_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.id_state != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.id_state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.id_city != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.id_city
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.product != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.product
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.name_country != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.name_country
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.name_state != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.name_state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.name_city != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.name_city
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row2.date, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputDelimited_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Float month_1_amount;

				public Float getMonth_1_amount () {
					return this.month_1_amount;
				}
				
			    public Float month_2_amount;

				public Float getMonth_2_amount () {
					return this.month_2_amount;
				}
				
			    public Float month_3_amount;

				public Float getMonth_3_amount () {
					return this.month_3_amount;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.month_1_amount = null;
           				} else {
           			    	this.month_1_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.month_2_amount = null;
           				} else {
           			    	this.month_2_amount = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.month_3_amount = null;
           				} else {
           			    	this.month_3_amount = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Float
				
						if(this.month_1_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.month_1_amount);
		            	}
					
					// Float
				
						if(this.month_2_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.month_2_amount);
		            	}
					
					// Float
				
						if(this.month_3_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.month_3_amount);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
		sb.append(",month_1_amount="+String.valueOf(month_1_amount));
		sb.append(",month_2_amount="+String.valueOf(month_2_amount));
		sb.append(",month_3_amount="+String.valueOf(month_3_amount));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ETL_Prepare_to_rules_run = new byte[0];
    static byte[] commonByteArray_ETL_Prepare_to_rules_run = new byte[0];

	
			    public Long country_id;

				public Long getCountry_id () {
					return this.country_id;
				}
				
			    public Long id_state;

				public Long getId_state () {
					return this.id_state;
				}
				
			    public Long id_city;

				public Long getId_city () {
					return this.id_city;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Prepare_to_rules_run.length) {
				if(length < 1024 && commonByteArray_ETL_Prepare_to_rules_run.length == 0) {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[1024];
				} else {
   					commonByteArray_ETL_Prepare_to_rules_run = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Prepare_to_rules_run, 0, length);
			strReturn = new String(commonByteArray_ETL_Prepare_to_rules_run, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Prepare_to_rules_run) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.country_id = null;
           				} else {
           			    	this.country_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_state = null;
           				} else {
           			    	this.id_state = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id_city = null;
           				} else {
           			    	this.id_city = dis.readLong();
           				}
					
					this.product = readString(dis);
					
					this.name_country = readString(dis);
					
					this.name_state = readString(dis);
					
					this.name_city = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.country_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.country_id);
		            	}
					
					// Long
				
						if(this.id_state == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_state);
		            	}
					
					// Long
				
						if(this.id_city == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id_city);
		            	}
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country_id="+String.valueOf(country_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",id_city="+String.valueOf(id_city));
		sb.append(",product="+product);
		sb.append(",name_country="+name_country);
		sb.append(",name_state="+name_state);
		sb.append(",name_city="+name_city);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
row5Struct row9 = row5;
row10Struct row10 = new row10Struct();




	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_1_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortOut().limitLog4jByte();


class Comparablerow4Struct extends row4Struct implements Comparable<Comparablerow4Struct> {
	
	public int compareTo(Comparablerow4Struct other) {

		if(this.country_id == null && other.country_id != null){
			return -1;
						
		}else if(this.country_id != null && other.country_id == null){
			return 1;
						
		}else if(this.country_id != null && other.country_id != null){
			if(!this.country_id.equals(other.country_id)){
				return this.country_id.compareTo(other.country_id);
			}
		}
		if(this.id_state == null && other.id_state != null){
			return -1;
						
		}else if(this.id_state != null && other.id_state == null){
			return 1;
						
		}else if(this.id_state != null && other.id_state != null){
			if(!this.id_state.equals(other.id_state)){
				return this.id_state.compareTo(other.id_state);
			}
		}
		if(this.id_city == null && other.id_city != null){
			return -1;
						
		}else if(this.id_city != null && other.id_city == null){
			return 1;
						
		}else if(this.id_city != null && other.id_city != null){
			if(!this.id_city.equals(other.id_city)){
				return this.id_city.compareTo(other.id_city);
			}
		}
		if(this.product == null && other.product != null){
			return -1;
						
		}else if(this.product != null && other.product == null){
			return 1;
						
		}else if(this.product != null && other.product != null){
			if(!this.product.equals(other.product)){
				return this.product.compareTo(other.product);
			}
		}
		if(this.date == null && other.date != null){
			return -1;
						
		}else if(this.date != null && other.date == null){
			return 1;
						
		}else if(this.date != null && other.date != null){
			if(!this.date.equals(other.date)){
				return this.date.compareTo(other.date);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow4Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow4Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try{
					
						Object filename_tFileInputDelimited_3 = context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_extract.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_extract.csv", "UTF-8",";","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row4.country_id = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(ex_tFileInputDelimited_3);
								}
    							
						} else {						
							
								row4.country_id = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row4.id_state = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(ex_tFileInputDelimited_3);
								}
    							
						} else {						
							
								row4.id_state = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row4.id_city = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(ex_tFileInputDelimited_3);
								}
    							
						} else {						
							
								row4.id_city = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row4.product = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row4.name_country = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							row4.name_state = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
							row4.name_city = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								row4.amount = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(ex_tFileInputDelimited_3);
								}
    							
						} else {						
							
								row4.amount = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									row4.date = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(ex_tFileInputDelimited_3);
								}
    							
						} else {						
							
								row4.date = null;
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



	Comparablerow4Struct arrayRowtSortRow_1_SortOut = new Comparablerow4Struct();

	arrayRowtSortRow_1_SortOut.country_id = row4.country_id;
	arrayRowtSortRow_1_SortOut.id_state = row4.id_state;
	arrayRowtSortRow_1_SortOut.id_city = row4.id_city;
	arrayRowtSortRow_1_SortOut.product = row4.product;
	arrayRowtSortRow_1_SortOut.name_country = row4.name_country;
	arrayRowtSortRow_1_SortOut.name_state = row4.name_state;
	arrayRowtSortRow_1_SortOut.name_city = row4.name_city;
	arrayRowtSortRow_1_SortOut.amount = row4.amount;
	arrayRowtSortRow_1_SortOut.date = row4.date;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_extract.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row4Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow4Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_4 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_4().limitLog4jByte();

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.outputDirectory+"MonthlyData_"+TalendDate.formatDate("yyyy-MM-dd", TalendDate.getFirstDayOfMonth(context.date))+"_"+ context.session +"_before_rules.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
        if(filetFileOutputDelimited_4.exists()){
            isFileGenerated_tFileOutputDelimited_4 = false;
        }
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tJavaFlex_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_3", false);
		start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_3 = 0;
		
    	class BytesLimit65535_tJavaFlex_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_3().limitLog4jByte();


// start part of your Java code
      


 



/**
 * [tJavaFlex_3 begin ] stop
 */



	
	/**
	 * [tMemorizeRows_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMemorizeRows_2", false);
		start_Hash.put("tMemorizeRows_2", System.currentTimeMillis());
		
	
	currentComponent="tMemorizeRows_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMemorizeRows_2 = 0;
		
    	class BytesLimit65535_tMemorizeRows_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMemorizeRows_2().limitLog4jByte();
  int iRows_tMemorizeRows_2 = 4;
      Long[] country_id_tMemorizeRows_2 = new Long[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_country_id", country_id_tMemorizeRows_2);
      Long[] id_state_tMemorizeRows_2 = new Long[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_id_state", id_state_tMemorizeRows_2);
      Long[] id_city_tMemorizeRows_2 = new Long[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_id_city", id_city_tMemorizeRows_2);
      String[] product_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_product", product_tMemorizeRows_2);
      String[] name_country_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_name_country", name_country_tMemorizeRows_2);
      String[] name_state_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_name_state", name_state_tMemorizeRows_2);
      String[] name_city_tMemorizeRows_2 = new String[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_name_city", name_city_tMemorizeRows_2);
      Float[] amount_tMemorizeRows_2 = new Float[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_amount", amount_tMemorizeRows_2);
      java.util.Date[] date_tMemorizeRows_2 = new java.util.Date[iRows_tMemorizeRows_2];
    globalMap.put("tMemorizeRows_2_date", date_tMemorizeRows_2);
	globalMap.put("tMemorizeRows_2_NB_LINE_ROWS", iRows_tMemorizeRows_2);
 



/**
 * [tMemorizeRows_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_1_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortIn().limitLog4jByte();


row4Struct[] array_tSortRow_1_SortIn = (row4Struct[]) globalMap.get("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row4Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row5.country_id = current_tSortRow_1_SortIn.country_id;
	row5.id_state = current_tSortRow_1_SortIn.id_state;
	row5.id_city = current_tSortRow_1_SortIn.id_city;
	row5.product = current_tSortRow_1_SortIn.product;
	row5.name_country = current_tSortRow_1_SortIn.name_country;
	row5.name_state = current_tSortRow_1_SortIn.name_state;
	row5.name_city = current_tSortRow_1_SortIn.name_city;
	row5.amount = current_tSortRow_1_SortIn.amount;
	row5.date = current_tSortRow_1_SortIn.date;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */

	
	/**
	 * [tMemorizeRows_2 main ] start
	 */

	

	
	
	currentComponent="tMemorizeRows_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		
    for (int i_tMemorizeRows_2 = iRows_tMemorizeRows_2 - 1 ; i_tMemorizeRows_2 > 0; i_tMemorizeRows_2--) {
        country_id_tMemorizeRows_2[i_tMemorizeRows_2] = country_id_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        id_state_tMemorizeRows_2[i_tMemorizeRows_2] = id_state_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        id_city_tMemorizeRows_2[i_tMemorizeRows_2] = id_city_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        product_tMemorizeRows_2[i_tMemorizeRows_2] = product_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        name_country_tMemorizeRows_2[i_tMemorizeRows_2] = name_country_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        name_state_tMemorizeRows_2[i_tMemorizeRows_2] = name_state_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        name_city_tMemorizeRows_2[i_tMemorizeRows_2] = name_city_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        amount_tMemorizeRows_2[i_tMemorizeRows_2] = amount_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
        date_tMemorizeRows_2[i_tMemorizeRows_2] = date_tMemorizeRows_2[i_tMemorizeRows_2 - 1];  
    }
      country_id_tMemorizeRows_2[0] = row5.country_id;    
      id_state_tMemorizeRows_2[0] = row5.id_state;    
      id_city_tMemorizeRows_2[0] = row5.id_city;    
      product_tMemorizeRows_2[0] = row5.product;    
      name_country_tMemorizeRows_2[0] = row5.name_country;    
      name_state_tMemorizeRows_2[0] = row5.name_state;    
      name_city_tMemorizeRows_2[0] = row5.name_city;    
      amount_tMemorizeRows_2[0] = row5.amount;    
      date_tMemorizeRows_2[0] = row5.date;    
 
     row9 = row5;


	tos_count_tMemorizeRows_2++;

/**
 * [tMemorizeRows_2 main ] stop
 */

	
	/**
	 * [tJavaFlex_3 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		


	        				row10.country_id = row9.country_id;
	        				row10.id_state = row9.id_state;
	        				row10.id_city = row9.id_city;
	        				row10.product = row9.product;
	        				row10.name_country = row9.name_country;
	        				row10.name_state = row9.name_state;
	        				row10.name_city = row9.name_city;
	        				row10.amount = row9.amount;
	        				row10.date = row9.date;

row10.month_1_amount=amount_tMemorizeRows_2[1]==null?0:amount_tMemorizeRows_2[1];
row10.month_2_amount=amount_tMemorizeRows_2[2]==null?0:amount_tMemorizeRows_2[2];
row10.month_3_amount=amount_tMemorizeRows_2[3]==null?0:amount_tMemorizeRows_2[3];



 


	tos_count_tJavaFlex_3++;

/**
 * [tJavaFlex_3 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.country_id != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.country_id
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.id_state != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.id_state
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.id_city != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.id_city
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.product != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.product
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.name_country != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.name_country
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.name_state != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.name_state
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.name_city != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.name_city
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.amount != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.amount
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.date != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(row10.date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.month_1_amount != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.month_1_amount
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.month_2_amount != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.month_2_amount
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.month_3_amount != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.month_3_amount
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */









	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tMemorizeRows_2 end ] start
	 */

	

	
	
	currentComponent="tMemorizeRows_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMemorizeRows_2", true);
end_Hash.put("tMemorizeRows_2", System.currentTimeMillis());




/**
 * [tMemorizeRows_2 end ] stop
 */

	
	/**
	 * [tJavaFlex_3 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	


// end of the component, outside/closing the loop
      

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_3", true);
end_Hash.put("tJavaFlex_3", System.currentTimeMillis());




/**
 * [tJavaFlex_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tMemorizeRows_2 finally ] start
	 */

	

	
	
	currentComponent="tMemorizeRows_2";

	

 



/**
 * [tMemorizeRows_2 finally ] stop
 */

	
	/**
	 * [tJavaFlex_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Prepare_to_rules_run Prepare_to_rules_runClass = new Prepare_to_rules_run();

        int exitCode = Prepare_to_rules_runClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Prepare_to_rules_run.class.getClassLoader().getResourceAsStream("etl/prepare_to_rules_run_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("date", "id_Date");
				
            try{
                String context_date_value = context.getProperty("date");
                if (context_date_value == null){
                    context_date_value = "";
                }
                int context_date_pos = context_date_value.indexOf(";");
                String context_date_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_date_pos > -1){
                    context_date_pattern = context_date_value.substring(0, context_date_pos);
                    context_date_value = context_date_value.substring(context_date_pos + 1);
                }

                context.date=(java.util.Date)(new java.text.SimpleDateFormat(context_date_pattern).parse(context_date_value));

            }catch(ParseException e)
            {
                context.date=null;
            }
				    context.setContextType("inputDirectory", "id_String");
				
                context.inputDirectory=(String) context.getProperty("inputDirectory");
				    context.setContextType("outputDirectory", "id_String");
				
                context.outputDirectory=(String) context.getProperty("outputDirectory");
				    context.setContextType("session", "id_String");
				
                context.session=(String) context.getProperty("session");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("date")) {
                context.date = (java.util.Date) parentContextMap.get("date");
            }if (parentContextMap.containsKey("inputDirectory")) {
                context.inputDirectory = (String) parentContextMap.get("inputDirectory");
            }if (parentContextMap.containsKey("outputDirectory")) {
                context.outputDirectory = (String) parentContextMap.get("outputDirectory");
            }if (parentContextMap.containsKey("session")) {
                context.session = (String) parentContextMap.get("session");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJDBCConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJDBCConnection_1) {
globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", -1);

e_tJDBCConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Prepare_to_rules_run");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tJDBCConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tJDBCConnection_1", globalMap.get("conn_tJDBCConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     194528 characters generated by Talend Open Studio for Data Integration 
 *     on the August 19, 2018 8:05:30 EDT PM
 ************************************************************************************************/