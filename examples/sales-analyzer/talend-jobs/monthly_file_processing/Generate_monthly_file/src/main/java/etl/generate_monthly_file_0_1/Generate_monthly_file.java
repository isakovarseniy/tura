// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package etl.generate_monthly_file_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Generate_monthly_file Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Generate_monthly_file implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(reporting_date != null){
				
					String pattern_reporting_date = "yyyy-MM-dd HH:mm:ss";
					String value_reporting_date = "2018-01-08 19:39:18";
					String[] parts_reporting_date = value_reporting_date.split(";");
					if(parts_reporting_date.length > 1){
						pattern_reporting_date = parts_reporting_date[0];
						this.setProperty("reporting_date", pattern_reporting_date + ";" + FormatterUtils.format_Date(reporting_date, pattern_reporting_date));
					}else{
						this.setProperty("reporting_date", FormatterUtils.format_Date(reporting_date, pattern_reporting_date));
					}
				
			}
			
		}

public java.util.Date reporting_date;
public java.util.Date getReporting_date(){
	return this.reporting_date;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Generate_monthly_file";
	private final String projectName = "ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Generate_monthly_file.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Generate_monthly_file.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputJSON_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputJSON_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputJSON_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public String sortname_country;

				public String getSortname_country () {
					return this.sortname_country;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				
			    public String product;

				public String getProduct () {
					return this.product;
				}
				
			    public String customer;

				public String getCustomer () {
					return this.customer;
				}
				
			    public Float amount;

				public Float getAmount () {
					return this.amount;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer rep_id;

				public Integer getRep_id () {
					return this.rep_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
						this.id_state = readInteger(dis);
					
					this.name_state = readString(dis);
					
						this.country_id = readInteger(dis);
					
					this.sortname_country = readString(dis);
					
					this.name_country = readString(dis);
					
					this.product = readString(dis);
					
					this.customer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readFloat();
           				}
					
					this.date = readDate(dis);
					
						this.rep_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// Integer
				
						writeInteger(this.id_state,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// String
				
						writeString(this.sortname_country,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
					// String
				
						writeString(this.product,dos);
					
					// String
				
						writeString(this.customer,dos);
					
					// Float
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.amount);
		            	}
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.rep_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",sortname_country="+sortname_country);
		sb.append(",name_country="+name_country);
		sb.append(",product="+product);
		sb.append(",customer="+customer);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",date="+String.valueOf(date));
		sb.append(",rep_id="+String.valueOf(rep_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public String sortname_country;

				public String getSortname_country () {
					return this.sortname_country;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
						this.id_state = readInteger(dis);
					
					this.name_state = readString(dis);
					
						this.country_id = readInteger(dis);
					
					this.sortname_country = readString(dis);
					
					this.name_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// Integer
				
						writeInteger(this.id_state,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// String
				
						writeString(this.sortname_country,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",sortname_country="+sortname_country);
		sb.append(",name_country="+name_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				
			    public String sortname_country;

				public String getSortname_country () {
					return this.sortname_country;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
						this.id_state = readInteger(dis);
					
					this.name_state = readString(dis);
					
						this.country_id = readInteger(dis);
					
					this.sortname_country = readString(dis);
					
					this.name_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// Integer
				
						writeInteger(this.id_state,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
					// String
				
						writeString(this.sortname_country,dos);
					
					// String
				
						writeString(this.name_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
		sb.append(",sortname_country="+sortname_country);
		sb.append(",name_country="+name_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
						this.id_state = readInteger(dis);
					
					this.name_state = readString(dis);
					
						this.country_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// Integer
				
						writeInteger(this.id_state,dos);
					
					// String
				
						writeString(this.name_state,dos);
					
					// Integer
				
						writeInteger(this.country_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputJSON_4Struct implements routines.system.IPersistableRow<after_tFileInputJSON_4Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id_city;

				public Integer getId_city () {
					return this.id_city;
				}
				
			    public String name_city;

				public String getName_city () {
					return this.name_city;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_Generate_monthly_file.length) {
				if(length < 1024 && commonByteArray_ETL_Generate_monthly_file.length == 0) {
   					commonByteArray_ETL_Generate_monthly_file = new byte[1024];
				} else {
   					commonByteArray_ETL_Generate_monthly_file = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_Generate_monthly_file, 0, length);
			strReturn = new String(commonByteArray_ETL_Generate_monthly_file, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_city = readInteger(dis);
					
					this.name_city = readString(dis);
					
						this.state_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_city,dos);
					
					// String
				
						writeString(this.name_city,dos);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_city="+String.valueOf(id_city));
		sb.append(",name_city="+name_city);
		sb.append(",state_id="+String.valueOf(state_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputJSON_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputJSON_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputJSON_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputJSON_3Process(globalMap);
		tFileInputJSON_2Process(globalMap);

		row2Struct row2 = new row2Struct();
row4Struct row4 = new row4Struct();
row6Struct row6 = new row6Struct();
row7Struct row7 = new row7Struct();
out2Struct out2 = new out2Struct();








	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(System.getProperty("user.home")+"/MonthlyData_"+ TalendDate.formatDate("yyyy-MM-dd", context.reporting_date) +".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = null;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tJoin_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_2", false);
		start_Hash.put("tJoin_2", System.currentTimeMillis());
		
	
	currentComponent="tJoin_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_2 = 0;
		
    	class BytesLimit65535_tJoin_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJoin_2().limitLog4jByte();
    final java.util.Map<row5Struct, row5Struct> tHash_tJoin_2 = (java.util.Map<row5Struct, row5Struct>) globalMap.get("tHash_row5");
    
    class Util_tJoin_2
    {
        row5Struct lookupValue = null;
        row5Struct row5HashKey = new row5Struct(); 
        
        public boolean isJoined(row4Struct mainRow) {                        
           row5HashKey.id_country = mainRow.country_id;

			row5HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_2.get(row5HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();
        
    int nb_line_tJoin_2 = 0; 
 



/**
 * [tJoin_2 begin ] stop
 */



	
	/**
	 * [tJoin_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_1", false);
		start_Hash.put("tJoin_1", System.currentTimeMillis());
		
	
	currentComponent="tJoin_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_1 = 0;
		
    	class BytesLimit65535_tJoin_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJoin_1().limitLog4jByte();
    final java.util.Map<row3Struct, row3Struct> tHash_tJoin_1 = (java.util.Map<row3Struct, row3Struct>) globalMap.get("tHash_row3");
    
    class Util_tJoin_1
    {
        row3Struct lookupValue = null;
        row3Struct row3HashKey = new row3Struct(); 
        
        public boolean isJoined(row2Struct mainRow) {                        
           row3HashKey.id_state = mainRow.state_id;

			row3HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_1.get(row3HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();
        
    int nb_line_tJoin_1 = 0; 
 



/**
 * [tJoin_1 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_4", false);
		start_Hash.put("tFileInputJSON_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_4";

	
		int tos_count_tFileInputJSON_4 = 0;
		
    	class BytesLimit65535_tFileInputJSON_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputJSON_4().limitLog4jByte();

	
  class JSONUtil_tFileInputJSON_4{
      public int getData(String query,javax.script.Invocable invocableEngine,java.util.List<org.json.simple.JSONArray> jsonResultList,int recordMaxSize){
          try{
              //only 2 types: String/Boolean
              String resultObj = invocableEngine.invokeFunction("jsonPath",query).toString();
              if(!"false".equals(resultObj)){
	              org.json.simple.JSONArray resultArray= (org.json.simple.JSONArray)org.json.simple.JSONValue.parse(resultObj);
	              jsonResultList.add(resultArray);
	              if(recordMaxSize != -1 && recordMaxSize != resultArray.size()){
		             //just give an error, don't stop
					
		              System.err.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
	               }
	               recordMaxSize = Math.max(recordMaxSize, resultArray.size());
               }else{
					
	               System.err.println("Can't find any data with JSONPath " + query);
	               //add null to take a place in List(buffer)
	               jsonResultList.add(null); 
               }
          }catch(java.lang.Exception e){
				
              e.printStackTrace();
          }
          return recordMaxSize;
      }

	                   void setRowValue_0(row2Struct row2, java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_4, int nbResultArray_tFileInputJSON_4) throws java.io.UnsupportedEncodingException{
							        if(JSONResultList_tFileInputJSON_4.get(0) != null && nbResultArray_tFileInputJSON_4<JSONResultList_tFileInputJSON_4.get(0).size() && JSONResultList_tFileInputJSON_4.get(0).get(nbResultArray_tFileInputJSON_4)!=null){
			                                row2.id_city = ParserUtils.parseTo_Integer(JSONResultList_tFileInputJSON_4.get(0).get(nbResultArray_tFileInputJSON_4).toString());
							        }else{

		                                    row2.id_city = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_4.get(1) != null && nbResultArray_tFileInputJSON_4<JSONResultList_tFileInputJSON_4.get(1).size() && JSONResultList_tFileInputJSON_4.get(1).get(nbResultArray_tFileInputJSON_4)!=null){		
			                                row2.name_city = JSONResultList_tFileInputJSON_4.get(1).get(nbResultArray_tFileInputJSON_4).toString();
							        }else{

		                                    row2.name_city = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_4.get(2) != null && nbResultArray_tFileInputJSON_4<JSONResultList_tFileInputJSON_4.get(2).size() && JSONResultList_tFileInputJSON_4.get(2).get(nbResultArray_tFileInputJSON_4)!=null){
			                                row2.state_id = ParserUtils.parseTo_Integer(JSONResultList_tFileInputJSON_4.get(2).get(nbResultArray_tFileInputJSON_4).toString());
							        }else{

		                                    row2.state_id = null;
		
		                             }
                    }
  }
int nb_line_tFileInputJSON_4 = 0;
java.lang.Object jsonText_tFileInputJSON_4 = null;
JSONUtil_tFileInputJSON_4 jsonUtil_tFileInputJSON_4=new JSONUtil_tFileInputJSON_4();
java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_4 = new java.util.ArrayList<org.json.simple.JSONArray>();
int recordMaxSize_tFileInputJSON_4 = -1;

//init js json engine
javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_4 = new javax.script.ScriptEngineManager();
javax.script.ScriptEngine jsEngine_tFileInputJSON_4 = scriptEngineMgr_tFileInputJSON_4.getEngineByName("JavaScript");
if (jsEngine_tFileInputJSON_4 == null) {
	
    System.err.println("No script engine found for JavaScript");
} else {
    java.net.URL jsonjsUrl_tFileInputJSON_4 = com.jsonpath.test.ReadJar.class.getResource("json.js");
    if(jsonjsUrl_tFileInputJSON_4!=null) {
    	jsEngine_tFileInputJSON_4.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonjsUrl_tFileInputJSON_4.openStream())));
    }
    
    java.net.URL jsonpathjsUrl_tFileInputJSON_4 = com.jsonpath.test.ReadJar.class.getResource("jsonpath.js");
    if(jsonpathjsUrl_tFileInputJSON_4!=null) {
		jsEngine_tFileInputJSON_4.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonpathjsUrl_tFileInputJSON_4.openStream())));
	}

	java.io.BufferedReader fr_tFileInputJSON_4 = null;
	try{
	
		fr_tFileInputJSON_4 = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("/Users/arseniy/Downloads/Countries-States-Cities-database-master/cities.json"),"UTF-8"));
	
		jsonText_tFileInputJSON_4 = org.json.simple.JSONValue.parse(fr_tFileInputJSON_4);
		if(jsonText_tFileInputJSON_4 == null) {
			throw new RuntimeException("fail to parse the json file : " +  "/Users/arseniy/Downloads/Countries-States-Cities-database-master/cities.json" );
		}
	} catch(java.lang.Exception e_tFileInputJSON_4) {
	
		
 		System.err.println(e_tFileInputJSON_4.getMessage());
	
	} finally {
		if(fr_tFileInputJSON_4 != null ) {
			fr_tFileInputJSON_4.close();
		}
    }

	if(jsonText_tFileInputJSON_4!=null) {
		jsEngine_tFileInputJSON_4.eval("var obj="+jsonText_tFileInputJSON_4.toString());

		javax.script.Invocable invocableEngine_tFileInputJSON_4 = (javax.script.Invocable)jsEngine_tFileInputJSON_4;


recordMaxSize_tFileInputJSON_4=jsonUtil_tFileInputJSON_4.getData("$.cities[*].id",invocableEngine_tFileInputJSON_4,JSONResultList_tFileInputJSON_4,recordMaxSize_tFileInputJSON_4);


recordMaxSize_tFileInputJSON_4=jsonUtil_tFileInputJSON_4.getData("$.cities[*].name",invocableEngine_tFileInputJSON_4,JSONResultList_tFileInputJSON_4,recordMaxSize_tFileInputJSON_4);


recordMaxSize_tFileInputJSON_4=jsonUtil_tFileInputJSON_4.getData("$.cities[*].state_id",invocableEngine_tFileInputJSON_4,JSONResultList_tFileInputJSON_4,recordMaxSize_tFileInputJSON_4);

	}
}
	for(int nbResultArray_tFileInputJSON_4 = 0; nbResultArray_tFileInputJSON_4 < recordMaxSize_tFileInputJSON_4; nbResultArray_tFileInputJSON_4++){
	
		nb_line_tFileInputJSON_4++;
					row2 = null;			
                	boolean whetherReject_tFileInputJSON_4 = false;
                	row2 = new row2Struct();
                	try{
                            jsonUtil_tFileInputJSON_4.setRowValue_0(row2,JSONResultList_tFileInputJSON_4,nbResultArray_tFileInputJSON_4);
                    } catch (java.lang.Exception e) {
                        whetherReject_tFileInputJSON_4 = true;
                                System.err.println(e.getMessage());
                                row2 = null;
                    }

 



/**
 * [tFileInputJSON_4 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_4";

	

 


	tos_count_tFileInputJSON_4++;

/**
 * [tFileInputJSON_4 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tJoin_1 main ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

			row4 = null;	
	
				row4 = new row4Struct();						
						row4.id_city = row2.id_city;					
						row4.name_city = row2.name_city;

			if(util_tJoin_1.isJoined(row2)){ 			
								row4.state_id = util_tJoin_1.lookupValue.id_state;			
								row4.id_state = util_tJoin_1.lookupValue.id_state;			
								row4.name_state = util_tJoin_1.lookupValue.name_state;			
								row4.country_id = util_tJoin_1.lookupValue.country_id;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_1++;

/**
 * [tJoin_1 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tJoin_2 main ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

			row6 = null;	
	
				row6 = new row6Struct();						
						row6.id_city = row4.id_city;					
						row6.name_city = row4.name_city;					
						row6.state_id = row4.state_id;					
						row6.id_state = row4.id_state;					
						row6.name_state = row4.name_state;					
						row6.country_id = row4.country_id;

			if(util_tJoin_2.isJoined(row4)){ 			
								row6.sortname_country = util_tJoin_2.lookupValue.sortname_country;			
								row6.name_country = util_tJoin_2.lookupValue.name_country;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_2++;

/**
 * [tJoin_2 main ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

          row7 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");    
        ope_tFilterRow_1.matches((row6.sortname_country == null? false : row6.sortname_country.toUpperCase().compareTo("CA") == 0)
                       , " sortname_country.toUpperCase().compareTo(\"CA\") == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.id_city = row6.id_city;
               row7.name_city = row6.name_city;
               row7.state_id = row6.state_id;
               row7.id_state = row6.id_state;
               row7.name_state = row6.name_state;
               row7.country_id = row6.country_id;
               row7.sortname_country = row6.sortname_country;
               row7.name_country = row6.name_country;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
								
									tJavaFlex_1Process(globalMap);
									
									
										tHash_Lookup_row1 = 
										(org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
										((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
											globalMap.get( "tHash_Lookup_row1" ));
									
								
									tHash_Lookup_row1.initGet();
								
									tHash_Lookup_row1.lookup( row1HashKey );
										
									
									
										
								

	  							

 								
								  
								  if(!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow1 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow1 = true;
			           		  	} // G 21
                    		  	
                    		

							row1Struct row1 = null;
                    		  	 
							

								while ((tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) || forceLooprow1) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row1'
									
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								
								if(!forceLooprow1) { // G 46
								
							
								 
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow1 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'out2'
out2_tmp.id_city = row7.id_city ;
out2_tmp.name_city = row7.name_city ;
out2_tmp.state_id = row7.state_id ;
out2_tmp.id_state = row7.id_state ;
out2_tmp.name_state = row7.name_state ;
out2_tmp.country_id = row7.country_id ;
out2_tmp.sortname_country = row7.sortname_country ;
out2_tmp.name_country = row7.name_country ;
out2_tmp.product = "Product"+Numeric.random(0,50) ;
out2_tmp.customer = "Customer_"+Numeric.random(0,20) ;
out2_tmp.amount = (float)(Mathematical.RND(3.14)*1000000 ) ;
out2_tmp.date = TalendDate.getFirstDayOfMonth(context.reporting_date) ;
out2_tmp.rep_id = row1.id;
out2 = out2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out2.id_city != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.id_city
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.name_city != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.name_city
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.state_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.state_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.id_state != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.id_state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.name_state != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.name_state
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.country_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.country_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.sortname_country != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.sortname_country
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.name_country != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.name_country
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.product != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.product
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.customer != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.customer
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.amount != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.amount
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.date != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out2.date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out2.rep_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            out2.rep_id
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "out2"



	
		} // close loop of lookup 'row1' // G_TM_M_043
	

} // End of branch "row7"





} // End of branch "row6"





} // End of branch "row4"





} // End of branch "row2"




	
	/**
	 * [tFileInputJSON_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_4";

	

	}
	globalMap.put("tFileInputJSON_4_NB_LINE",nb_line_tFileInputJSON_4);
 

ok_Hash.put("tFileInputJSON_4", true);
end_Hash.put("tFileInputJSON_4", System.currentTimeMillis());




/**
 * [tFileInputJSON_4 end ] stop
 */

	
	/**
	 * [tJoin_1 end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_1", true);
end_Hash.put("tJoin_1", System.currentTimeMillis());




/**
 * [tJoin_1 end ] stop
 */

	
	/**
	 * [tJoin_2 end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_2", true);
end_Hash.put("tJoin_2", System.currentTimeMillis());




/**
 * [tJoin_2 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			      	
					      			//free memory for "tJoin_2"
									globalMap.remove("tHash_row5");
				      			      	
					      			//free memory for "tJoin_1"
									globalMap.remove("tHash_row3");
				      			
				try{
					
	
	/**
	 * [tFileInputJSON_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_4";

	

 



/**
 * [tFileInputJSON_4 finally ] stop
 */

	
	/**
	 * [tJoin_1 finally ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 finally ] stop
 */

	
	/**
	 * [tJoin_2 finally ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputJSON_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id_state;

				public Integer getId_state () {
					return this.id_state;
				}
				
			    public String name_state;

				public String getName_state () {
					return this.name_state;
				}
				
			    public Integer country_id;

				public Integer getCountry_id () {
					return this.country_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_state == null) ? 0 : this.id_state.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.id_state == null) {
							if (other.id_state != null)
								return false;
						
						} else if (!this.id_state.equals(other.id_state))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id_state = this.id_state;
	            other.name_state = this.name_state;
	            other.country_id = this.country_id;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.id_state = this.id_state;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_state = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_state,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.name_state = readString(dis,ois);
					
						this.country_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.name_state, dos, oos);
					
					writeInteger(this.country_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_state="+String.valueOf(id_state));
		sb.append(",name_state="+name_state);
		sb.append(",country_id="+String.valueOf(country_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_state, other.id_state);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputJSON_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row3", false);
		start_Hash.put("tHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row3 = 0;
		
    	class BytesLimit65535_tHash_row3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHash_row3().limitLog4jByte();

				java.util.Map<row3Struct, row3Struct> tHash_row3 = new java.util.LinkedHashMap<row3Struct, row3Struct>();
	            globalMap.put("tHash_row3", tHash_row3);
			
            

 



/**
 * [tHash_row3 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_3", false);
		start_Hash.put("tFileInputJSON_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_3";

	
		int tos_count_tFileInputJSON_3 = 0;
		
    	class BytesLimit65535_tFileInputJSON_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputJSON_3().limitLog4jByte();

	
  class JSONUtil_tFileInputJSON_3{
      public int getData(String query,javax.script.Invocable invocableEngine,java.util.List<org.json.simple.JSONArray> jsonResultList,int recordMaxSize){
          try{
              //only 2 types: String/Boolean
              String resultObj = invocableEngine.invokeFunction("jsonPath",query).toString();
              if(!"false".equals(resultObj)){
	              org.json.simple.JSONArray resultArray= (org.json.simple.JSONArray)org.json.simple.JSONValue.parse(resultObj);
	              jsonResultList.add(resultArray);
	              if(recordMaxSize != -1 && recordMaxSize != resultArray.size()){
		             //just give an error, don't stop
					
		              System.err.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
	               }
	               recordMaxSize = Math.max(recordMaxSize, resultArray.size());
               }else{
					
	               System.err.println("Can't find any data with JSONPath " + query);
	               //add null to take a place in List(buffer)
	               jsonResultList.add(null); 
               }
          }catch(java.lang.Exception e){
				
              e.printStackTrace();
          }
          return recordMaxSize;
      }

	                   void setRowValue_0(row3Struct row3, java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_3, int nbResultArray_tFileInputJSON_3) throws java.io.UnsupportedEncodingException{
							        if(JSONResultList_tFileInputJSON_3.get(0) != null && nbResultArray_tFileInputJSON_3<JSONResultList_tFileInputJSON_3.get(0).size() && JSONResultList_tFileInputJSON_3.get(0).get(nbResultArray_tFileInputJSON_3)!=null){
			                                row3.id_state = ParserUtils.parseTo_Integer(JSONResultList_tFileInputJSON_3.get(0).get(nbResultArray_tFileInputJSON_3).toString());
							        }else{

		                                    row3.id_state = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_3.get(1) != null && nbResultArray_tFileInputJSON_3<JSONResultList_tFileInputJSON_3.get(1).size() && JSONResultList_tFileInputJSON_3.get(1).get(nbResultArray_tFileInputJSON_3)!=null){		
			                                row3.name_state = JSONResultList_tFileInputJSON_3.get(1).get(nbResultArray_tFileInputJSON_3).toString();
							        }else{

		                                    row3.name_state = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_3.get(2) != null && nbResultArray_tFileInputJSON_3<JSONResultList_tFileInputJSON_3.get(2).size() && JSONResultList_tFileInputJSON_3.get(2).get(nbResultArray_tFileInputJSON_3)!=null){
			                                row3.country_id = ParserUtils.parseTo_Integer(JSONResultList_tFileInputJSON_3.get(2).get(nbResultArray_tFileInputJSON_3).toString());
							        }else{

		                                    row3.country_id = null;
		
		                             }
                    }
  }
int nb_line_tFileInputJSON_3 = 0;
java.lang.Object jsonText_tFileInputJSON_3 = null;
JSONUtil_tFileInputJSON_3 jsonUtil_tFileInputJSON_3=new JSONUtil_tFileInputJSON_3();
java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_3 = new java.util.ArrayList<org.json.simple.JSONArray>();
int recordMaxSize_tFileInputJSON_3 = -1;

//init js json engine
javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_3 = new javax.script.ScriptEngineManager();
javax.script.ScriptEngine jsEngine_tFileInputJSON_3 = scriptEngineMgr_tFileInputJSON_3.getEngineByName("JavaScript");
if (jsEngine_tFileInputJSON_3 == null) {
	
    System.err.println("No script engine found for JavaScript");
} else {
    java.net.URL jsonjsUrl_tFileInputJSON_3 = com.jsonpath.test.ReadJar.class.getResource("json.js");
    if(jsonjsUrl_tFileInputJSON_3!=null) {
    	jsEngine_tFileInputJSON_3.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonjsUrl_tFileInputJSON_3.openStream())));
    }
    
    java.net.URL jsonpathjsUrl_tFileInputJSON_3 = com.jsonpath.test.ReadJar.class.getResource("jsonpath.js");
    if(jsonpathjsUrl_tFileInputJSON_3!=null) {
		jsEngine_tFileInputJSON_3.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonpathjsUrl_tFileInputJSON_3.openStream())));
	}

	java.io.BufferedReader fr_tFileInputJSON_3 = null;
	try{
	
		fr_tFileInputJSON_3 = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("/Users/arseniy/Downloads/Countries-States-Cities-database-master/states.json"),"UTF-8"));
	
		jsonText_tFileInputJSON_3 = org.json.simple.JSONValue.parse(fr_tFileInputJSON_3);
		if(jsonText_tFileInputJSON_3 == null) {
			throw new RuntimeException("fail to parse the json file : " +  "/Users/arseniy/Downloads/Countries-States-Cities-database-master/states.json" );
		}
	} catch(java.lang.Exception e_tFileInputJSON_3) {
	
		
 		System.err.println(e_tFileInputJSON_3.getMessage());
	
	} finally {
		if(fr_tFileInputJSON_3 != null ) {
			fr_tFileInputJSON_3.close();
		}
    }

	if(jsonText_tFileInputJSON_3!=null) {
		jsEngine_tFileInputJSON_3.eval("var obj="+jsonText_tFileInputJSON_3.toString());

		javax.script.Invocable invocableEngine_tFileInputJSON_3 = (javax.script.Invocable)jsEngine_tFileInputJSON_3;


recordMaxSize_tFileInputJSON_3=jsonUtil_tFileInputJSON_3.getData("$.states[*].id",invocableEngine_tFileInputJSON_3,JSONResultList_tFileInputJSON_3,recordMaxSize_tFileInputJSON_3);


recordMaxSize_tFileInputJSON_3=jsonUtil_tFileInputJSON_3.getData("$.states[*].name",invocableEngine_tFileInputJSON_3,JSONResultList_tFileInputJSON_3,recordMaxSize_tFileInputJSON_3);


recordMaxSize_tFileInputJSON_3=jsonUtil_tFileInputJSON_3.getData("$.states[*].country_id",invocableEngine_tFileInputJSON_3,JSONResultList_tFileInputJSON_3,recordMaxSize_tFileInputJSON_3);

	}
}
	for(int nbResultArray_tFileInputJSON_3 = 0; nbResultArray_tFileInputJSON_3 < recordMaxSize_tFileInputJSON_3; nbResultArray_tFileInputJSON_3++){
	
		nb_line_tFileInputJSON_3++;
					row3 = null;			
					row3 = null;			
                	boolean whetherReject_tFileInputJSON_3 = false;
                	row3 = new row3Struct();
                	try{
                            jsonUtil_tFileInputJSON_3.setRowValue_0(row3,JSONResultList_tFileInputJSON_3,nbResultArray_tFileInputJSON_3);
                    } catch (java.lang.Exception e) {
                        whetherReject_tFileInputJSON_3 = true;
                                System.err.println(e.getMessage());
                                row3 = null;
                    }

 



/**
 * [tFileInputJSON_3 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_3";

	

 


	tos_count_tFileInputJSON_3++;

/**
 * [tFileInputJSON_3 main ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tHash_row3 main ] start
	 */

	

	
	
	currentComponent="tHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

row3Struct row3_HashRow = new row3Struct();

					row3_HashRow.id_state = row3.id_state;
					row3_HashRow.name_state = row3.name_state;
					row3_HashRow.country_id = row3.country_id;
tHash_row3.put(row3_HashRow, row3_HashRow);


 


	tos_count_tHash_row3++;

/**
 * [tHash_row3 main ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputJSON_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_3";

	

	}
	globalMap.put("tFileInputJSON_3_NB_LINE",nb_line_tFileInputJSON_3);
 

ok_Hash.put("tFileInputJSON_3", true);
end_Hash.put("tFileInputJSON_3", System.currentTimeMillis());




/**
 * [tFileInputJSON_3 end ] stop
 */

	
	/**
	 * [tHash_row3 end ] start
	 */

	

	
	
	currentComponent="tHash_row3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row3", true);
end_Hash.put("tHash_row3", System.currentTimeMillis());




/**
 * [tHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputJSON_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_3";

	

 



/**
 * [tFileInputJSON_3 finally ] stop
 */

	
	/**
	 * [tHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tHash_row3";

	

 



/**
 * [tHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id_country;

				public Integer getId_country () {
					return this.id_country;
				}
				
			    public String sortname_country;

				public String getSortname_country () {
					return this.sortname_country;
				}
				
			    public String name_country;

				public String getName_country () {
					return this.name_country;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_country == null) ? 0 : this.id_country.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.id_country == null) {
							if (other.id_country != null)
								return false;
						
						} else if (!this.id_country.equals(other.id_country))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.id_country = this.id_country;
	            other.sortname_country = this.sortname_country;
	            other.name_country = this.name_country;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.id_country = this.id_country;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id_country = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.sortname_country = readString(dis,ois);
					
						this.name_country = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.sortname_country, dos, oos);
					
						writeString(this.name_country, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_country="+String.valueOf(id_country));
		sb.append(",sortname_country="+sortname_country);
		sb.append(",name_country="+name_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_country, other.id_country);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputJSON_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row5", false);
		start_Hash.put("tHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tHash_row5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row5 = 0;
		
    	class BytesLimit65535_tHash_row5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHash_row5().limitLog4jByte();

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
	            globalMap.put("tHash_row5", tHash_row5);
			
            

 



/**
 * [tHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_2", false);
		start_Hash.put("tFileInputJSON_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_2";

	
		int tos_count_tFileInputJSON_2 = 0;
		
    	class BytesLimit65535_tFileInputJSON_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputJSON_2().limitLog4jByte();

	
  class JSONUtil_tFileInputJSON_2{
      public int getData(String query,javax.script.Invocable invocableEngine,java.util.List<org.json.simple.JSONArray> jsonResultList,int recordMaxSize){
          try{
              //only 2 types: String/Boolean
              String resultObj = invocableEngine.invokeFunction("jsonPath",query).toString();
              if(!"false".equals(resultObj)){
	              org.json.simple.JSONArray resultArray= (org.json.simple.JSONArray)org.json.simple.JSONValue.parse(resultObj);
	              jsonResultList.add(resultArray);
	              if(recordMaxSize != -1 && recordMaxSize != resultArray.size()){
		             //just give an error, don't stop
					
		              System.err.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
	               }
	               recordMaxSize = Math.max(recordMaxSize, resultArray.size());
               }else{
					
	               System.err.println("Can't find any data with JSONPath " + query);
	               //add null to take a place in List(buffer)
	               jsonResultList.add(null); 
               }
          }catch(java.lang.Exception e){
				
              e.printStackTrace();
          }
          return recordMaxSize;
      }

	                   void setRowValue_0(row5Struct row5, java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2, int nbResultArray_tFileInputJSON_2) throws java.io.UnsupportedEncodingException{
							        if(JSONResultList_tFileInputJSON_2.get(0) != null && nbResultArray_tFileInputJSON_2<JSONResultList_tFileInputJSON_2.get(0).size() && JSONResultList_tFileInputJSON_2.get(0).get(nbResultArray_tFileInputJSON_2)!=null){
			                                row5.id_country = ParserUtils.parseTo_Integer(JSONResultList_tFileInputJSON_2.get(0).get(nbResultArray_tFileInputJSON_2).toString());
							        }else{

		                                    row5.id_country = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_2.get(1) != null && nbResultArray_tFileInputJSON_2<JSONResultList_tFileInputJSON_2.get(1).size() && JSONResultList_tFileInputJSON_2.get(1).get(nbResultArray_tFileInputJSON_2)!=null){		
			                                row5.sortname_country = JSONResultList_tFileInputJSON_2.get(1).get(nbResultArray_tFileInputJSON_2).toString();
							        }else{

		                                    row5.sortname_country = null;
		
		                             }
							        if(JSONResultList_tFileInputJSON_2.get(2) != null && nbResultArray_tFileInputJSON_2<JSONResultList_tFileInputJSON_2.get(2).size() && JSONResultList_tFileInputJSON_2.get(2).get(nbResultArray_tFileInputJSON_2)!=null){		
			                                row5.name_country = JSONResultList_tFileInputJSON_2.get(2).get(nbResultArray_tFileInputJSON_2).toString();
							        }else{

		                                    row5.name_country = null;
		
		                             }
                    }
  }
int nb_line_tFileInputJSON_2 = 0;
java.lang.Object jsonText_tFileInputJSON_2 = null;
JSONUtil_tFileInputJSON_2 jsonUtil_tFileInputJSON_2=new JSONUtil_tFileInputJSON_2();
java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2 = new java.util.ArrayList<org.json.simple.JSONArray>();
int recordMaxSize_tFileInputJSON_2 = -1;

//init js json engine
javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_2 = new javax.script.ScriptEngineManager();
javax.script.ScriptEngine jsEngine_tFileInputJSON_2 = scriptEngineMgr_tFileInputJSON_2.getEngineByName("JavaScript");
if (jsEngine_tFileInputJSON_2 == null) {
	
    System.err.println("No script engine found for JavaScript");
} else {
    java.net.URL jsonjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class.getResource("json.js");
    if(jsonjsUrl_tFileInputJSON_2!=null) {
    	jsEngine_tFileInputJSON_2.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonjsUrl_tFileInputJSON_2.openStream())));
    }
    
    java.net.URL jsonpathjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class.getResource("jsonpath.js");
    if(jsonpathjsUrl_tFileInputJSON_2!=null) {
		jsEngine_tFileInputJSON_2.eval(new java.io.BufferedReader(new java.io.InputStreamReader(jsonpathjsUrl_tFileInputJSON_2.openStream())));
	}

	java.io.BufferedReader fr_tFileInputJSON_2 = null;
	try{
	
		fr_tFileInputJSON_2 = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("/Users/arseniy/Downloads/Countries-States-Cities-database-master/countries.json"),"UTF-8"));
	
		jsonText_tFileInputJSON_2 = org.json.simple.JSONValue.parse(fr_tFileInputJSON_2);
		if(jsonText_tFileInputJSON_2 == null) {
			throw new RuntimeException("fail to parse the json file : " +  "/Users/arseniy/Downloads/Countries-States-Cities-database-master/countries.json" );
		}
	} catch(java.lang.Exception e_tFileInputJSON_2) {
	
		
 		System.err.println(e_tFileInputJSON_2.getMessage());
	
	} finally {
		if(fr_tFileInputJSON_2 != null ) {
			fr_tFileInputJSON_2.close();
		}
    }

	if(jsonText_tFileInputJSON_2!=null) {
		jsEngine_tFileInputJSON_2.eval("var obj="+jsonText_tFileInputJSON_2.toString());

		javax.script.Invocable invocableEngine_tFileInputJSON_2 = (javax.script.Invocable)jsEngine_tFileInputJSON_2;


recordMaxSize_tFileInputJSON_2=jsonUtil_tFileInputJSON_2.getData("$.countries[*].id",invocableEngine_tFileInputJSON_2,JSONResultList_tFileInputJSON_2,recordMaxSize_tFileInputJSON_2);


recordMaxSize_tFileInputJSON_2=jsonUtil_tFileInputJSON_2.getData("$.countries[*].sortname",invocableEngine_tFileInputJSON_2,JSONResultList_tFileInputJSON_2,recordMaxSize_tFileInputJSON_2);


recordMaxSize_tFileInputJSON_2=jsonUtil_tFileInputJSON_2.getData("$.countries[*].name",invocableEngine_tFileInputJSON_2,JSONResultList_tFileInputJSON_2,recordMaxSize_tFileInputJSON_2);

	}
}
	for(int nbResultArray_tFileInputJSON_2 = 0; nbResultArray_tFileInputJSON_2 < recordMaxSize_tFileInputJSON_2; nbResultArray_tFileInputJSON_2++){
	
		nb_line_tFileInputJSON_2++;
					row5 = null;			
					row5 = null;			
                	boolean whetherReject_tFileInputJSON_2 = false;
                	row5 = new row5Struct();
                	try{
                            jsonUtil_tFileInputJSON_2.setRowValue_0(row5,JSONResultList_tFileInputJSON_2,nbResultArray_tFileInputJSON_2);
                    } catch (java.lang.Exception e) {
                        whetherReject_tFileInputJSON_2 = true;
                                System.err.println(e.getMessage());
                                row5 = null;
                    }

 



/**
 * [tFileInputJSON_2 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_2";

	

 


	tos_count_tFileInputJSON_2++;

/**
 * [tFileInputJSON_2 main ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHash_row5 main ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

row5Struct row5_HashRow = new row5Struct();

					row5_HashRow.id_country = row5.id_country;
					row5_HashRow.sortname_country = row5.sortname_country;
					row5_HashRow.name_country = row5.name_country;
tHash_row5.put(row5_HashRow, row5_HashRow);


 


	tos_count_tHash_row5++;

/**
 * [tHash_row5 main ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputJSON_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_2";

	

	}
	globalMap.put("tFileInputJSON_2_NB_LINE",nb_line_tFileInputJSON_2);
 

ok_Hash.put("tFileInputJSON_2", true);
end_Hash.put("tFileInputJSON_2", System.currentTimeMillis());




/**
 * [tFileInputJSON_2 end ] stop
 */

	
	/**
	 * [tHash_row5 end ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row5", true);
end_Hash.put("tHash_row5", System.currentTimeMillis());




/**
 * [tHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputJSON_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_2";

	

 



/**
 * [tFileInputJSON_2 finally ] stop
 */

	
	/**
	 * [tHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

 



/**
 * [tHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ETL_Generate_monthly_file = new byte[0];
    static byte[] commonByteArray_ETL_Generate_monthly_file = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_Generate_monthly_file) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row1 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row1().limitLog4jByte();

			   		// connection name:row1
			   		// source node:tJavaFlex_1 - inputs:() outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_2 - inputs:(row7,row1) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// start part of your Java code
for(int i = 0; i<100; i++){      


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



row1.id = i;

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.id = row1.id;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */



	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}
      

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Generate_monthly_file Generate_monthly_fileClass = new Generate_monthly_file();

        int exitCode = Generate_monthly_fileClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Generate_monthly_file.class.getClassLoader().getResourceAsStream("etl/generate_monthly_file_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("reporting_date", "id_Date");
				
            try{
                String context_reporting_date_value = context.getProperty("reporting_date");
                if (context_reporting_date_value == null){
                    context_reporting_date_value = "";
                }
                int context_reporting_date_pos = context_reporting_date_value.indexOf(";");
                String context_reporting_date_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_reporting_date_pos > -1){
                    context_reporting_date_pattern = context_reporting_date_value.substring(0, context_reporting_date_pos);
                    context_reporting_date_value = context_reporting_date_value.substring(context_reporting_date_pos + 1);
                }

                context.reporting_date=(java.util.Date)(new java.text.SimpleDateFormat(context_reporting_date_pattern).parse(context_reporting_date_value));

            }catch(ParseException e)
            {
                context.reporting_date=null;
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("reporting_date")) {
                context.reporting_date = (java.util.Date) parentContextMap.get("reporting_date");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputJSON_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputJSON_4) {
globalMap.put("tFileInputJSON_4_SUBPROCESS_STATE", -1);

e_tFileInputJSON_4.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Generate_monthly_file");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     135331 characters generated by Talend Open Studio for Data Integration 
 *     on the February 7, 2018 9:25:45 EST PM
 ************************************************************************************************/