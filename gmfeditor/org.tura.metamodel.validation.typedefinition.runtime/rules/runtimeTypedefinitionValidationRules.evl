 context TypePointer {

  constraint PackageRef {
      check :  self.packageRef.isDefined()
      message : 'Undefined  package name ' + self.eClass().name + ' not allowed'

  }
  
  constraint TypeRef {
      check :  self.typeRef.isDefined()
      message : 'Undefined  type name ' + self.eClass().name + ' not allowed'

  }
  
   constraint RecipeMappers{
      check : self.getAllRecipeMappers()
      message : 'Runtime constraint ' + self.typeRef.name+" -->"
  } 

}

operation TypePointer getAllRecipeMappers() : Boolean { 

    var indicator = new Native('org.tura.metamodel.wizard.infrastructure.Indicator');
    var appmappers =   new Native('java.util.ArrayList');  
    var util = new Native('org.tura.metamodel.commons.Util');
    
    appmappers.addAll(indicator.currentRecipe.mappers);
    appmappers.addAll(indicator.currentIngredient.mappers);
    
    for( appmapper in appmappers ){
          var set = appmapper.mapper.mappers.select(r|r.typeRef.uid=self.typeRef.uid);
          if (  set.size() > 0 ){
              if (util.mapperRecognizer(set,indicator.currentIngredient) )
                  return true;
          }    
       }
    
   return false;
}