 context BusinessObject {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.businessObject.select(r|r.isKindOf(BusinessObject) and r.name=self.name).size() = 1
      message : 'BusinessObject name  ' + self.name + ' is not unique'
   
   } 

}

 context BusinessMethod{
 
   constraint HasName {
      check :  self.methodRef.isDefined()
      message : 'Undefined method name ' + self.eClass().name + ' not allowed'

  }
  
 }