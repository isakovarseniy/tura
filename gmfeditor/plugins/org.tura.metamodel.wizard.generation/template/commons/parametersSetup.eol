operation commonInit(dc,command,trigger,oprName){
   var uuid := Native('java.util.UUID');

  trigger.packageRef=command.eContainer.parent;
  trigger.typeRef = command;
  trigger.methodRef=command.operations->select(q|q.name=oprName).first();
  
  trigger.fakePackageName=trigger.packageRef.name;
  trigger.fakeTypeName=trigger.typeRef.name;
  trigger.fakeMethod=trigger.methodRef.name;

}



operation typeConstant( parameter , method) {

   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=true;
   ctxParam.value.value= method;

   return ctxParam;

}

operation typeParam(type,parameter){

   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Packages."+type.parent.parent.name+"."+type.parent.parent.name+"::"+type.name;


   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypesImpl";
   expr.objRef=type.parent.eContainer();
   expr.order=0;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "PackageImpl";
   expr.objRef=type.parent.parent;
   expr.order=1;
   ctxParam.value.expression.add(expr);

   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypeImpl";
   expr.objRef=type;
   expr.order=2;
   ctxParam.value.expression.add(expr);


   return ctxParam;

}

operation treeDataControl(treedc,dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Tree data controls.Tree"+treedc.name+"."+dc.name+"."+attribute;
   
   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeRootDataControlHolder";
   expr.order=0;
   ctxParam.value.expression.add(expr);

   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeDataControl";
   expr.order=1;
   ctxParam.value.expression.add(expr);
   
   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=2;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=3;
   ctxParam.value.expression.add(expr);

   return ctxParam;

}


operation simpleDataControl(dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Data controls."+dc.name+"."+attribute;
   
   
   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlHolder";
   expr.objRef=dc.parent.eContainer();
   expr.order=0;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=1;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=2;
   ctxParam.value.expression.add(expr);
   
   return ctxParam;

}

