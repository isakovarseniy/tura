import "platform:/plugin/org.tura.metamodel.wizard.generation/template/commons/buildExpression.eol";



operation comperssorComandProcessor(dc,command){

	     switch  (command.name){
	      case "Create command": createCommand(dc,command); 
	      case "Update compressor command": updateCompressorCommand(dc,command);
	      case "Insert commpressor command": insertCommpressorCommand(dc,command);
	      case "Remove compressor command": removeCompressorCommand(dc,command);
	      case "Search command": searchCommand(dc,command);
	      default : "default".println();
	     
	     }

}

operation  createCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   
   var trigger = new domain::CreateTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.create = trigger;
   commonInit(dc,command,trigger,"create");
   var ctxParam = null;
   var k =0 ;
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
	   switch (i){
		      case "0" :  ctxParam =typeParam(dc.baseTypeRef.typeRef,parameter);
           }
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
}

operation  searchCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new domain::SearchTrigger;
   
   trigger.uid = uuid.randomUUID().toString();
   dc.search = trigger;
   
   commonInit(dc,command,trigger,"find");
   
   var ctxParam = null;
   var k =0 ;
	var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
	   if (treedc.~treeRoot.isDefined()){
	      switch (i){
		      case "0" :  ctxParam =treeDataControl(treedc,dc,"searchCriteria","DataControlFakeAttribute",parameter);
		      case "1":   ctxParam =treeDataControl(treedc,dc,"orderCriteria","DataControlFakeAttribute",parameter);
		      case "2":   ctxParam =treeDataControl(treedc,dc,"start Index","DataControlFakeAttribute",parameter);
		      case "3":   ctxParam =treeDataControl(treedc,dc,"end Index","DataControlFakeAttribute",parameter);
		      case "4":   ctxParam =typeParam(dc.baseTypeRef.typeRef,parameter);
		  }  
	   }else{
	      switch (i){
		      case "0" :  ctxParam =simpleDataControl(dc,"searchCriteria","DataControlFakeAttribute",parameter);
		      case "1":   ctxParam =simpleDataControl(dc,"orderCriteria","DataControlFakeAttribute",parameter);
		      case "2":   ctxParam =simpleDataControl(dc,"start Index","DataControlFakeAttribute",parameter);
		      case "3":   ctxParam =simpleDataControl(dc,"end Index","DataControlFakeAttribute",parameter);
		      case "4":   ctxParam =typeParam(dc.baseTypeRef.typeRef,parameter);
	      }
	   }
       k = k + 1;
	   trigger.parameters.add(ctxParam);
	}   
}

operation  updateCompressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new domain::UpdateTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.update = trigger;

   commonInit(dc,command,trigger,"update");
   var ctxParam = null;
   var parameter = trigger.methodRef.parameters.first();
    
   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
    
}

operation  insertCommpressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new domain::InsertTrigger;
   
   trigger.uid = uuid.randomUUID().toString();
   dc.insert = trigger;

   commonInit(dc,command,trigger,"insert");
   var ctxParam = null;
   var parameter = trigger.methodRef.parameters.first();

   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   

}

operation  removeCompressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new domain::DeleteTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.remove = trigger;
   
   commonInit(dc,command,trigger,"remove");
   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
   
}

operation commonInit(dc,command,trigger,oprName){
   var uuid := Native('java.util.UUID');

  trigger.packageRef=command.eContainer.parent;
  trigger.typeRef = command;
  trigger.methodRef=command.operations->select(q|q.name=oprName).first();
  
  trigger.fakePackageName=trigger.packageRef.name;
  trigger.fakeTypeName=trigger.typeRef.name;
  trigger.fakeMethod=trigger.methodRef.name;

}



operation typeConstant( parameter , method) {

   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=true;
   ctxParam.value.value= method;

   return ctxParam;

}

operation typeParam(type,parameter){

   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Packages."+type.parent.parent.name+"."+type.parent.parent.name+"::"+type.name;


   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypesImpl";
   expr.objRef=type.parent.eContainer();
   expr.order=0;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "PackageImpl";
   expr.objRef=type.parent.parent;
   expr.order=1;
   ctxParam.value.expression.add(expr);

   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypeImpl";
   expr.objRef=type;
   expr.order=2;
   ctxParam.value.expression.add(expr);


   return ctxParam;

}

operation treeDataControl(treedc,dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Tree data controls.Tree"+treedc.name+"."+dc.name+"."+attribute;
   
   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeRootDataControlHolder";
   expr.order=0;
   ctxParam.value.expression.add(expr);

   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeDataControl";
   expr.order=1;
   ctxParam.value.expression.add(expr);
   
   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=2;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=3;
   ctxParam.value.expression.add(expr);

   return ctxParam;

}


operation simpleDataControl(dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new domain::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new domain::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Data controls."+dc.name+"."+attribute;
   
   
   var expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlHolder";
   expr.objRef=dc.parent.eContainer();
   expr.order=0;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=1;
   ctxParam.value.expression.add(expr);


   expr = new domain::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=2;
   ctxParam.value.expression.add(expr);
   
   return ctxParam;

}


