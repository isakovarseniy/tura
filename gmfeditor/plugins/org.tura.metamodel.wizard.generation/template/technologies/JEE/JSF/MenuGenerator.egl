[%@template
operation   menuGenerator(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var component = hash.get("component");
     var form = hash.get("form");
     var  javaPath =  hash.get("javaPath");  
     var uipackage = hash.get("uipackage");
     
     for (menuDefinition in form.view.view.menus){
        for (menu in menuDefinition.menuView.menuFolders){
           for (item in menu.menuElements->select(q|q.isKindOf(domain::SubMenu)) ){
             item.toSubmenu.~submenu=true;
           }
           if (menu.extensionRef <> null){
                if (menu.extensionRef.findClassifier('UIGeneration','JSF','menu.global')){
                   menu.~extpount = 'global';
                }else{
                   menu.~extpount = 'form';
                }
                
           }
       }
      }  
     
     for (menuDefinition in form.view.view.menus){
        for (menu in menuDefinition.menuView.menuFolders){
           menu.menuProcessor(hash);
        }
    }
  }
  
 @template 
  operation domain:: MenuFolder menuProcessor(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var component = hash.get("component");
     var form = hash.get("form");
     var  javaPath =  hash.get("javaPath");  
     var uipackage = hash.get("uipackage");
     hash.put("menu",self);

      var type = "org.primefaces.model.menu.DefaultMenuModel";
      var addOperation="addElement";
      if (self.~submenu.isDefined()){
           type = "org.primefaces.model.menu.DefaultSubMenu";
      }
      if (self.extensionRef <> null ){
           type = "java.util.ArrayList<org.primefaces.model.menu.MenuElement>";
           addOperation="add";
      }
           
        %]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].menu;
        
[%  if (self.~extpount.isDefined() and self.~extpount = 'global'){%] 
         [%=globalHeader(hash)%] 
[%   } %]   
        public class [%=util.mergeAndCapitalize(self.name)%]Menu  implements java.io.Serializable{
        
        	private static final long serialVersionUID = 1L;
        
[%  if (self.~extpount.isDefined() and self.~extpount = 'global'){%] 
         [%=globalConstractor(hash)%] 
[%   } %]           
        
           public [%=type%] getMenu() throws org.tura.platform.datacontrol.commons.TuraException{
             [%
               %][%=type%] model = new [%=type%]();
             [%       if (self.~submenu.isDefined()){ %]  
               model.setIcon("[%=buildExpression(self.icon,hints,hash)%]");
             [%}
                 for (item in self.menuElements){%]
                   [%=item.addToModel(hash,addOperation)%]
                [% }
            %]
              return model;
           }
        
        }
 [%       
        var f = new Native("org.tura.metamodel.wizard.infrastructure.JavaFormatter");
        out.formatWith(f);
        util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/menu/"  , util.mergeAndCapitalize(self.name) +"Menu.java",out.toString());  
  }
  
@template  
  operation domain::MenuItem addToModel(hash,addOperation){
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var update = self.refreshAreas->select(r|r.group > 1);
     var process = self.refreshAreas->select(r|r.group == 1)->sortBy(q|q.group);
     
  %]
        org.primefaces.model.menu.DefaultMenuItem [%=util.mergeAndUnCapitalize(self.name)%] = new org.primefaces.model.menu.DefaultMenuItem("[%=buildExpression(self.multiLangLabel,hints,hash)%]");
        [%=util.mergeAndUnCapitalize(self.name)%].setUrl("[%=buildExpression(self.transition,hints,hash)%]");
        [%=util.mergeAndUnCapitalize(self.name)%].setIcon("[%=buildExpression(self.icon,hints,hash)%]");
        [%=util.mergeAndUnCapitalize(self.name)%].setUpdate("[%=refreshAriasGroup(update)%]");
        [%=util.mergeAndUnCapitalize(self.name)%].setProcess("[%=refreshAriasGroup(process)%]");
   [%
       for ( field in  self.fields){
          if (field.classifiers.size() <> 0 )
            continue;
           hints.put("actionListener",true); 
           %] [%=util.mergeAndUnCapitalize(self.name)%].setCommand("[%=buildExpression(field,hints,hash)%]");[%
           hints.remove("actionListener"); 
      }   
   
   %]
        model.[%=addOperation%]([%=util.mergeAndUnCapitalize(self.name)%]);
[%  
  }
  
@template  
  operation domain::SubMenu addToModel(hash,addOperation){
     var util = new Native('org.tura.metamodel.commons.Util');
  %]
         [%=util.mergeAndCapitalize(self.toSubmenu.name)%]Menu [%=util.mergeAndUnCapitalize(self.name)%]  = new [%=util.mergeAndCapitalize(self.toSubmenu.name)%]Menu();
        model.[%=addOperation%]([%=util.mergeAndUnCapitalize(self.name)%].getMenu());
[%  
  }
  

  operation domain::MenuSeparator addToModel(hash,addOperation){
       var util = new Native('org.tura.metamodel.commons.Util');
  %]
     org.primefaces.model.menu.DefaultSeparator  [%=util.mergeAndUnCapitalize(self.name)%]  = new org.primefaces.model.menu.DefaultSeparator();
     model.[%=addOperation%]([%=util.mergeAndUnCapitalize(self.name)%]);
  [%
 }

@template
  operation domain::MenuExtensionPoint addToModel(hash,addOperation){
     var form = hash.get("form");
     var  javaPath =  hash.get("javaPath");  
     var uipackage = hash.get("uipackage");
     var util = new Native('org.tura.metamodel.commons.Util');
      var application = uipackage.eContainer().parent.parent;
     

     if (self.findClassifier('UIGeneration','JSF','menu.global')){%]
       java.util.ArrayList<org.primefaces.model.menu.MenuElement>  [%=util.mergeAndUnCapitalize(self.name)%] = org.tura.platform.primefaces.menu.GlobalExtensionPointResolver.find("[%=util.mergeAndCapitalize(application.name)%]" , "[%=util.mergeAndCapitalize(uipackage.name)%]", "[%=util.mergeAndCapitalize(form.name)%]", "[%=util.mergeAndCapitalize(self.name)%]");
     [%  
     }else{%]
       java.util.ArrayList<org.primefaces.model.menu.MenuElement>  [%=util.mergeAndUnCapitalize(self.name)%] = org.tura.platform.primefaces.menu.FormsExtensionPointResolver.find("[%=util.mergeAndCapitalize(uipackage.name)%]", "[%=util.mergeAndCapitalize(form.name)%]", "[%=util.mergeAndCapitalize(self.name)%]");
     [%
     }
  %]
        if ([%=util.mergeAndUnCapitalize(self.name)%] != null){
        for (  org.primefaces.model.menu.MenuElement  item :  [%=util.mergeAndUnCapitalize(self.name)%] )
           model.[%=addOperation%](item);
        }   
[%  
  } 
@template
  operation globalHeader(hash){%]
@javax.enterprise.context.ApplicationScoped
@org.tura.platform.primefaces.menu.Eager
  [%
  }
  
@template
  operation globalConstractor(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     var menu=hash.get("menu");
    
    var extension = menu.extensionRef;
    var form = extension.eContainer().eContainer().parent.eContainer().parent.eContainer();
    var uipackage = form.eContainer().parent;
    var application = uipackage.eContainer().parent.parent;
     
  
  %]
  
  
  	@javax.inject.Inject
	private transient java.util.logging.Logger logger;
  
	@javax.annotation.PostConstruct
	public void init() {
	   String elements[] = new String[] { "[%=util.mergeAndCapitalize(application.name)%]", "[%=util.mergeAndCapitalize(uipackage.name)%]","[%=util.mergeAndCapitalize(form.name)%]" };
		try {
			javax.naming.Context ic = new javax.naming.InitialContext();
			ic = (javax.naming.Context) ic.lookup("java:global");
			for (String element : elements) {
				try {
					ic = ic.createSubcontext(element);
				} catch (javax.naming.NameAlreadyBoundException e) {
				}
			}
			ic.bind("[%=util.mergeAndCapitalize(extension.name)%]", this);
		} catch (javax.naming.NamingException e) {
			logger.info(e.getMessage());
		}
	}

	@javax.annotation.PreDestroy
	public void destroy() {
		String path = "java:global/[%=util.mergeAndCapitalize(application.name)%]/[%=util.mergeAndCapitalize(uipackage.name)%]/[%=util.mergeAndCapitalize(form.name)%]";
		try {
			javax.naming.InitialContext ic = new javax.naming.InitialContext();
			try {
				ic.lookup(path);
				ic.unbind("[%=util.mergeAndCapitalize(extension.name)%]");
			} catch (javax.naming.NamingException ne) {
			   logger.info(ne.getMessage());
			}

		} catch (javax.naming.NamingException e) {
			logger.info(e.getMessage());
		}

	}
  
  
  [%
  }
  
 %]
