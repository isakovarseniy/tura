[%
operation  viewgeneration(hash) {
      var form = hash.get("form");   
      var  javaPath =  hash.get("javaPath");  
      var webapp = hash.get("webapp");
      var util = new Native('org.tura.metamodel.commons.Util');
      var allPorts = new Native('java.util.ArrayList'); 
      var actionTriggers = new Native('java.util.ArrayList'); 
      var scriptTriggers = new Native('java.util.ArrayList'); 
      
      var uipackage = hash.get("uipackage");

      hash.put("actionTriggers",actionTriggers);
      hash.put("scriptTriggers",scriptTriggers);
      
      if (form.view = null or form.view.view = null)
         return;   

      for (canvas in form.view.view.canvases){
              if (not canvas.isKindOf(domain::TabCanvas) ){
                  var ports = canvas.viewElement->select(p|p.isKindOf(domain::ViewPort)); 
                   allPorts.addAll(ports);
              }
              canvas.draw(hash);   
      }

 
      hash.put("allPorts",allPorts);
      var f = new Native("org.tura.metamodel.wizard.infrastructure.JavaFormatter");
      var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
             
      var viewportclass : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/viewPortHolderClass.egl",hash,TemplateFactory);
      viewportclass.setFormatter(f);
      var buffer = viewportclass.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/"  , "ViewPortHolder.java",buffer);  
      
      var expproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/expressionsProducer.egl",hash,TemplateFactory);
      expproducer.setFormatter(f);
      var buffer = expproducer.process();
      util.saveFile( javaPath+"/commons/producer/"  , "ExpressionsProducer.java",buffer);  
      
     var viewporttriggerproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/viewPortTriggerProducer.egl",hash,TemplateFactory);
      viewporttriggerproducer.setFormatter(f);
      var buffer = viewporttriggerproducer.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "ViewPortTriggerProducer.java",buffer);  
 
      actionExecutor(hash);
      scriptGenerator(hash);
}

@template
operation domain::Uielement  uiElementAttributes(hash){
%][%=self.styleAttributes(hash)%] [%=self.enabled(hash)%] [%=self.required(hash)%] [%if (hash.get("readonly") <> null){%] readonly="[%=hash.get("readonly")%]"[%}else{%][%=self.readonly(hash)%][%}%]
[%}


@template
operation domain::StyleElement  styleAttributes(hash){
      var util = new Native('org.tura.metamodel.commons.Util');
 
     if (self.style <> null  and  self.style.value <> null  ){
        var value = util.apostropheRemover( buildParameterizedExpression(self.style));
     %]style="[%=value%]"[%}

     if (self.styleClass <> null  and self.styleClass.size() <> 0 ){%]styleClass="[%
      var first = 0;
      for (class in self.styleClass ){ 
        if (class.classifier = null or( class.classifier <> null   and class.classifier.hint = null )){
      
          if ( first <> 0){%] [%}
         var value = util.apostropheRemover(buildExpression(class));
         first=1;
         %][%=value%][%}} 
     %]"[%
     }
}


operation domain::StyleElement  styleAttributes(artifactLib:String, artifact: String, classifier : String):String{
      var util = new Native('org.tura.metamodel.commons.Util');
      var value = "";
     if (self.styleClass <> null  and self.styleClass.size() <> 0 ){
      var first = 0;
      for (class in self.styleClass ){ 
         if (class.classifier <> null and class.classifier.findHint(artifactLib,artifact,classifier)){
             if ( first <> 0){value = value+",";}
             value = value + util.apostropheRemover(buildExpression(class));
             first=1;
           }
         } 
     }
     return value;
}

@template
operation domain::Uielement  validator(hash){
    if (self.findClassifier("UIGeneration",  "JSF","validator"))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation domain::Uielement  convertor(hash){
    if (self.findClassifier("UIGeneration",  "JSF","converter"))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation domain::Uielement  readOnlyConverter(hash){
    if (self.findClassifier("UIGeneration",  "JSF","readOnlyConverter"))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation domain::Uielement  enabled(hash){
      var value = constructExpression(self.enabled,self,'trigger.disabled',hash);
     %]disabled="[%=value%]"[%
}

@template
operation domain::Uielement  required(hash){
     if (self.required <> null  and self.required.value <> null){
         var value = buildParameterizedExpression(self.required);
            
     %]required="[%=value%]"[%}
}

@template
operation domain::Uielement  readonly(hash){
     if (self.readOnly <> null  and self.readOnly.value <> null){
          var value = buildParameterizedExpression(self.readOnly);
            
     %]readonly="[%=value%]"[%}
}

@template
operation domain::Uielement  mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}

@template
operation domain::Uielement  draw(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     var value;

     util.traceIfDebug("UI element",  self.eClass().name +" start: " +self.uid);     

     if (hash.get("context") == null ){
         value = buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(),self.valuePointer));
      %] [%=self.noContext(hash,value)%] [%           
      }
     else{
          if (hash.get("context").equals("table") ){
               value =  "#{row[2]."+self.valuePointer.name+"}";
               %] [%=self.tableContext(hash,value)%] [%           
           }  
          if (hash.get("context").equals("tree") ){
               value =  "#{row[1]."+self.valuePointer.name+"}";
               %] [%=self.treeContext(hash,value)%] [%           
          }     
     }

     util.traceIfDebug("UI element",  self.eClass().name +" end: " +self.uid);     
     
}

@template
operation domain::ViewPort  mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}

@template
operation domain::CanvasFrame mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}

@template
operation domain::ViewArea mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}


@template
operation domain::ActionTrigger mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}

@template
operation domain::Uielement  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}

@template
operation domain::CanvasFrame  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}

@template
operation domain::ViewPort  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}

@template
operation domain::Trigger  scriptTrigger( beanName:String,hash){
   hash.get("scriptTriggers").add(self);
   %]#{scriptGenerator[%=beanName%].scriptBuilder('[%=self.mkuid()%]')}[%
}

@template
operation domain::Trigger  javaTrigger( beanName:String, hash){
   hash.get("actionTriggers").add(self);
   %]#{actionExecutor[%=beanName%].setSource('[%=self.mkuid()%]').eventListener}[%
}

@template
operation domain::Trigger  javaCall( beanName:String, hash){
   hash.get("actionTriggers").add(self);
   %]#{actionExecutor[%=beanName%].setSource('[%=self.mkuid()%]').action}[%
}


operation constructExpression( context : domain::Context, triggers: domain::ActioinTriggers, classifier : String , hash) {
   var util = new Native('org.tura.metamodel.commons.Util');
   var recipe = hash.get("recipe");
   var ingredient = hash.get("ingredient");

   var trigger = triggers.findClassifiedTrigger("UIGeneration",  "JSF", classifier);
   if ( trigger <> null ){
        var type = trigger.typeRef;
        if (type <> null ){
           type.mappingType2Java(recipe,ingredient);
           type.mappingType2JavaScript(recipe,ingredient);
        }else
          return "";
        if (type.~mapper.isDefined() and "Type2JavaScript".equals(type.~mapper)){
           return trigger.scriptTrigger(util.getBeanFactoryName(),hash );
           
        }
        if (type.~mapper.isDefined() and "Type2Java".equals(type.~mapper)){
           return trigger.javaCall(util.getBeanFactoryName(),hash);
        }   
   }else{
     if (context <> null and context.value <> null){
         return  buildParameterizedExpression(context);
      }
   }  
   return "";
}

operation domain::ActioinTriggers findClassifiedTrigger( artifactLib:String, artifact: String, classifier : String) {
       for (trigger in self.triggers){
          if (trigger.findClassifier(artifactLib,artifact,classifier)){
             return trigger;
          }
       }
       return null;
}


%]