operation ArtificialFieldImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation DataControlHolder(expression:String, contextValue , paramId: Integer , array  , hints , inOutParams) : String {
   var util = new Native('org.tura.metamodel.commons.Util');
   var begin = "#{";
   var end = "}";
   if (hints.get("noCurlyBracket") <> null  ){
      begin = "";
      end = "";
   }
   
   return begin+"beanFactory"+inOutParams.get("beanFactoryName")+".<holder>"+end;
}

operation TreeRootDataControlHolder(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   var util = new Native('org.tura.metamodel.commons.Util');
   var begin = "#{";
   var end = "}";
   if (hints.get("noCurlyBracket") <> null  ){
      begin = "";
      end = "";
   }
   
   return begin+"beanFactory"+inOutParams.get("beanFactoryName")+".treeRoot<holder>"+end;
}

operation DataControlImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
       var util = new Native('org.tura.metamodel.commons.Util');
       var dc = contextValue.expression.get(paramId).objRef;
       if (contextValue.expression.get(paramId).~treeDC <> null){
          dc = contextValue.expression.get(paramId).~treeDC;
          return expression.replaceAll("<holder>",util.mergeAndCapitalize(dc.name)+".<holder>");
       }
       return    expression.replaceAll("<holder>",util.mergeAndUnCapitalize(dc.name)+".<holder>");

}

operation TriggerImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation TypeElementImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation AttributeImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   var util = new Native('org.tura.metamodel.commons.Util');
   var attr =  contextValue.expression.get(paramId).objRef;
   return expression.replaceAll("<holder>", util.mergeAndUnCapitalize(attr.name)  +".<holder>");
}

operation TypesImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation PackageImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation OperationImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
    var action = contextValue.expression.get(paramId);
    var recipe = inOutParams.get("recipe");
    var ingredient = inOutParams.get("ingredient");

   if ( action.objRef <> null ){
        var type = action.objRef.eContainer();
        if (type <> null ){
           type.mappingType2Java(recipe,ingredient);
           type.mappingType2JavaScript(recipe,ingredient);
        }else
          return "";
        if (type.~mapper.isDefined() and "Type2JavaScript".equals(type.~mapper)){
           return contextValue.scriptTrigger(inOutParams);
           
        }
        if (type.~mapper.isDefined() and "Type2Java".equals(type.~mapper)){

        if (hints.get("actionListener") <> null  and hints.get("actionListener") )
           return contextValue.javaTrigger(inOutParams);
        else
           return contextValue.javaCall(inOutParams);
           
        }   
   }else{
      expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
   }  
}

operation GroupImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation RoleImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   var util = new Native('org.tura.metamodel.commons.Util');
   var role = contextValue.expression.get(paramId).objRef;
    var recipe = inOutParams.get("recipe");
    var ingredient = inOutParams.get("ingredient");

   role.mappingRole2Role(recipe,ingredient);
   return expression.replaceAll("<holder>", role.~localRoleName  +".<holder>");
}

operation MessageLibraryImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
     var util = new Native('org.tura.metamodel.commons.Util');
     var library = contextValue.expression.get(paramId).objRef;
   return expression.replaceAll("<holder>", util.mergeAndCapitalize(library.name)+"<holder>");
}

operation MessagesImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   var begin = "#{";
   var end = "}";
   if (hints.get("noCurlyBracket") <> null  ){
      begin = "";
      end = "";
   }
      return begin+"<holder>"+end;
}


operation MessageImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", "['"+array.get(paramId).replaceAll(" ","")+"']"+".<holder>");
}

operation DomainArtifactsImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
}

operation DomainArtifactImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
}

operation ArtifactImpl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}


operation  GeneratioinHintImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
   return expression.replaceAll("<holder>", array.get(paramId)+".<holder>");
}

operation DataControlFakeAttribute(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
      var util = new Native('org.tura.metamodel.commons.Util');
       if (contextValue.expression.get(paramId-1).~treeDC <> null and contextValue.expression.get(paramId-1).~treeDC = contextValue.~sourceControl){
            if (array.get(paramId) <> "currentObject")
              return expression.replaceAll("<holder>", "controls['*******']."+util.mergeAndUnCapitalize(array.get(paramId))+".<holder>");
            else
              return expression.replaceAll("<holder>", "controls['*******'].currentObject"+".<holder>");
        }
        else{
              return expression.replaceAll("<holder>", util.mergeAndUnCapitalize(array.get(paramId))+".<holder>");
        }
}

operation DataControlFakeMethod(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
       var util = new Native('org.tura.metamodel.commons.Util');
       if (contextValue.expression.get(paramId-1).~treeDC <> null and contextValue.expression.get(paramId-1).~treeDC = contextValue.~sourceControl){
            if (array.get(paramId) <> "currentObject")
              return expression.replaceAll("<holder>", "controls['*******']."+util.mergeAndUnCapitalize(array.get(paramId))+".<holder>");
            else
              return expression.replaceAll("<holder>", "controls['*******'].currentObject"+".<holder>");
        }
        else{
              return expression.replaceAll("<holder>", util.mergeAndUnCapitalize(array.get(paramId))+".<holder>");
        }
}

operation TreeDataControl(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
    if (contextValue.expression.size() > paramId+1 and contextValue.expression.get(paramId+1).expressionType.equals("DataControlImpl") ){
       var dc = contextValue.expression.get(paramId+1).objRef.findTreeRoot();
       contextValue.expression.get(paramId+1).~treeDC = dc;
    }
    return expression;
}

operation ExtendedType(expression:String, contextValue , paramId: Integer , array , hints , inOutParams ) : String {
   return expression;
}

operation  RolesImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
    return "<holder>";
}

operation  ApplicationStyleImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
    return "<holder>";
}

operation  StylesPackageImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
   return expression;
}

operation  StyleLibraryImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
   return expression;
}

operation  StyleSetImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
     var util = new Native('org.tura.metamodel.commons.Util');
     var set = contextValue.expression.get(paramId).objRef;

     return expression.replaceAll("<holder>", util.dashmergeAndUnCapitalize(set.name)+".<holder>");
     
}     

operation  RootImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
   var util = new Native('org.tura.metamodel.commons.Util');
   var begin = "#{";
   var end = "}";
   if (hints.get("noCurlyBracket") <> null  ){
      begin = "";
      end = "";
   }
   
   return begin+"beanFactory"+inOutParams.get("beanFactoryName")+".<holder>"+end;
}     

operation  FormVariableImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
     var util = new Native('org.tura.metamodel.commons.Util');

     return expression.replaceAll("<holder>", util.mergeAndUnCapitalize( array.get(paramId))+".<holder>");
     
}   


operation  WindowImpl(expression:String, contextValue , paramId: Integer, array , hints , inOutParams ) : String {
     var util = new Native('org.tura.metamodel.commons.Util');

     var app = contextValue.expression.get(paramId-3).objRef;
     var uipackage = contextValue.expression.get(paramId-2).objRef;
     var form = contextValue.expression.get(paramId-1).objRef;
     var window = contextValue.expression.get(paramId).objRef;
     
     var configuration = inOutParams.get("configuration");
     var routingTable = configuration.get("Application routing table");


     return  routingTable.get(util.mergeAndCapitalize(app.name).toLowerCase()) +  "/"+ util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/"+ util.mergeAndCapitalize(window.name)+".xhtml";
     
}  




operation domain::Context  scriptTrigger( hash){
   hash.get("scriptTriggers").add(self);
   return '#{scriptGenerator'+hash.get("beanFactoryName")+".scriptBuilder('"+self.mkuid()+"')}";
}

operation domain::Context  javaTrigger(  hash){
   hash.get("actionTriggers").add(self);
   return '#{actionExecutor'+hash.get("beanFactoryName")+".setSource('"+self.mkuid()+"').eventListener}";
}

operation domain::Context  javaCall( hash){
   hash.get("actionTriggers").add(self);
   return '#{actionExecutor'+hash.get("beanFactoryName")+".setSource('"+self.mkuid()+"').action}";
}


