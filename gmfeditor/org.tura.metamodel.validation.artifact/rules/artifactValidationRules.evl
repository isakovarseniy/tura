 context domain::Artifact {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.artifacts.select(r|r.isKindOf(domain::Artifact) and r.name=self.name).size() = 1
      message : 'Artifact name  ' + self.name + ' is not unique'
   
   } 

}

 context domain::ConfigVariable {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.configVariables.select(r|r.isKindOf(domain::ConfigVariable) and r.name=self.name).size() = 1
      message : 'ConfigVariable name  ' + self.name + ' is not unique'
   
   } 

}


 context domain::ModelQuery {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.modelQuery.select(r|r.isKindOf(domain::ModelQuery) and r.name=self.name).size() = 1
      message : 'ModelQuery name  ' + self.name + ' is not unique'
   
   } 

}


 context QueryParameter {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.parameters.select(r|r.isKindOf(domain::QueryParameter) and r.name=self.name).size() = 1
      message : 'QueryParameter name  ' + self.name + ' is not unique'
   
   } 

}



 context domain::Specifier {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.specifiers.select(r|r.isKindOf(domain::Specifier) and r.name=self.name).size() = 1
      message : 'Specifier name  ' + self.name + ' is not unique'
   
   } 

}

 context domain::Option {

  constraint HasName {

      check :  self.value.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.options.select(r|r.isKindOf(domain::Option) and r.value=self.value).size() = 1
      message : 'Option name  ' + self.value + ' is not unique'
   
   } 

}

