 context ModelMapper {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.mappers.select(r|r.isKindOf(ModelMapper) and r.name=self.name).size() = 1
      message : 'ModelMapper name  ' + self.name + ' is not unique'
   
   } 


}

context Property {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

  constraint HasValue {

      check :  self.value.isDefined()

      message : 'No value ' + self.name + ' not allowed'

  }
}
 

 context MappingSpecifier {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

  constraint HasValue {

      check :  self.value.isDefined()

      message : 'No value ' + self.name + ' not allowed'

  }

}

 context MappingVariable {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

  constraint HasValue {

      check :  self.value.isDefined()

      message : 'No value ' + self.name + ' not allowed'

  }

}





