@namespace(uri="http://tura.org/2013/v1/domain", prefix="tura.domain")
@gmf
package domain;

@gmf.diagram.domain
class Domain{
  id attr EString uid;
  val DomainArtifacts[1]#parent domainArtifacts;
  val DomainTypes[1]#parent domainTypes;
  val DomainApplications[1]#parent domainApplications;
}


class HTMLLayerHolder{
   attr EInt columns = 1;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class DomainArtifacts extends HTMLLayerHolder{
    id attr EString uid;
    attr EString name;  
   ref Domain#domainArtifacts parent;
   @gmf.compartment
   val DomainArtifact[*]#parent domainArtifact;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class DomainTypes{
    id attr EString uid;
   attr EString name;  
   ref TypesRepository#parent typesrepository;
   ref Domain#domainTypes parent;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class DomainApplications extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;  
   @gmf.compartment
   val DomainApplication[*]#parent applications;
   ref Domain#domainApplications parent;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class DomainApplication{
   id attr EString uid;
   attr EString name;  
   ref Application#parent application;
   ref DomainApplications#applications parent;
}


@gmf.node(label="name")
class DomainArtifact{
    id attr EString uid;
   attr EString name;
   ref DomainArtifacts#domainArtifact parent;
   ref  Artifacts#parent artifact;
}


@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class ORMEntity extends DomainArtifact{
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class JPAService extends DomainArtifact{
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class EJBService extends DomainArtifact{
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class ContinuousIintegration extends DomainArtifact{
}

@gmf.diagram.artifact
class Artifacts{
    id attr EString uid;
   val Artifact[*]#parent artifacts;
   ref DomainArtifact#artifact parent;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Artifact{
    id attr EString uid;
   attr EString name;
   attr EString description;
   ref Artifacts#artifacts parent;
   
   // Variables resolved by configuration of recipe (for example server IP)  
   @gmf.compartment(layout="list")
   val   ConfigVariable[*]#parent configVariables;
   
   // Variables to query model ( for example FormName or service name)
   @gmf.compartment(layout="list")
   val   ModelQuery[*]#parent modelQuery;
   
   //For navigation in the template (for example choosing specific technologies EclipseLink vs Hibernate)
   @gmf.compartment(layout="list")
   val   Specifier[*]#parent specifiers;

   attr EString template;
}


@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class ConfigVariable{
   id attr EString uid;
  attr EString name;
   ref Artifact#configVariables parent;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class ModelQuery{
    id attr EString uid;
   attr EString name;
   attr EString query;
   ref Artifact#modelQuery parent;
   val  QueryParameter[*]#parent parameters;  

}

class QueryParameter{
    id attr EString uid;
   ref ModelQuery#parameters parent;
   attr EString name;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Specifier{
    id attr EString uid;
   attr EString name;
   ref Artifact#specifiers parent;
   val  Option[1..*]#parent options;  
}

@gmf.node(label="name")
class Option{
    id attr EString uid;
   ref Specifier#options parent;
   attr EString value;
}

@gmf.diagram.application
class Application{
    id attr EString uid;
   val ApplicationRecipes#parent applicationRecipes;
   val ApplicationMappers#parent applicationMappers;
   val ApplicationUILayer#parent applicationUILayer;
   val ApplicationInfrastructureLayer#parent  applicationInfrastructureLayer;
   val ApplicationStyle#parent applicationStyle;
   val ApplicationRole#parent applicationRole;
   val ApplicationMessages#parent applicationMessages;
   ref DomainApplication#application parent;
}


@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationMessages{
    id attr EString uid;
   attr EString name;
   ref Application#applicationMessages parent;
   ref Messages#parent messages;
}



@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationRole{
    id attr EString uid;
   attr EString name;
   ref Application#applicationRole parent;
   ref Roles#parent roles; 
}


@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationStyle extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;
   ref Application#applicationStyle parent;
   @gmf.compartment
   val StylesPackage[*]#parent stylesPackage;
}

@gmf.node(label="name",border.color="0,0,0",color="255,196,176")
class StylesPackage{
    id attr EString uid;
   attr EString name;
   ref ApplicationStyle#stylesPackage parent;
   ref Styles#parent styles;
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationUILayer extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;
   ref Application#applicationUILayer parent;
   @gmf.compartment
   val ApplicationUIPackage[*]#parent applicationUIPackages;
}

@gmf.node(label="name",border.color="0,0,0",color="255,196,176")
class ApplicationUIPackage{
    id attr EString uid;
   attr EString name;
   ref ApplicationUILayer#applicationUIPackages parent;
   ref UIPackage#parent uipackage;
}


@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationRecipes extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;
   ref Application#applicationRecipes parent;
   @gmf.compartment
   val ApplicationRecipe[*]#parent recipes;
}

@gmf.node(label="name",border.color="0,0,0",color="255,196,176")
class ApplicationRecipe{
    id attr EString uid;
   attr EString name;
   ref Recipes#parent recipes;
   ref ApplicationRecipes#recipes parent;
}

@gmf.node(label="name",border.color="0,0,0",color="164,230,255")
class ApplicationMappers extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;
   ref Application#applicationMappers parent;
    @gmf.compartment
   val ApplicationMapper[*]#parent mappers;
}

@gmf.node(label="name",border.color="0,0,0",color="255,237,85")
class ApplicationMapper{
    id attr EString uid;
   attr EString name;
   ref Mappers#parent mapper; 
   ref ApplicationMappers#mappers parent;
}

class MethodPointer extends TypePointer{
    ref Operation methodRef;

  // To support display label
    attr EString fakeMethod;
}

@gmf.diagram.messages
class Messages{
    id attr EString uid;
    ref ApplicationMessages#messages parent;
    val MessageLibrary[*]  messageLibraries;
}


@gmf.node(label="name",border.color="0,0,0",color="255,237,85")
class MessageLibrary{
    id attr EString uid;
    attr EString name;
    val LanguageRef[*] libLanguages;
    @gmf.compartment(layout="list")
    val Message[*] messages ;
}

class LanguageRef{
    id attr EString uid;
    ref Language lang; 
}

@gmf.node(label="name",border.color="0,0,0",color="255,237,85")
class Message{
    id attr EString uid;
    attr EString name;
   val Translation[*] translatioins;
   
}
class Translation{
    id attr EString uid;
    attr EString translation;
    ref LanguageRef lang;
}


class Language{
    id attr EString uid;
   attr EString lang;
   attr EString code;
}


@gmf.diagram
class Roles{
    id attr EString uid;
    ref ApplicationRole#roles parent;
    val Role[*] roles;
    val Group[*] groups;
}

@gmf.node(figure="org.tura.metamodel.commons.figures.RoleFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/role.png")
class Role{
    id attr EString uid;
    attr EString name;
}

@gmf.node(figure="org.tura.metamodel.commons.figures.GroupFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/group.png")
class Group{
    id attr EString uid;
    attr EString name;
    
  @gmf.link(target.decoration="arrow", style="dash")
   ref Group[*] group2Group;
    
  @gmf.link(target.decoration="arrow", style="dash")
   ref Role[*] group2Role;
    
}

@gmf.diagram.style
class Styles{
    id attr EString uid;
    ref StylesPackage#styles parent;
    val StyleLibrary[*] libraries;
}

@gmf.node(label="name",border.color="0,0,0",color="255,237,85")
class StyleLibrary{
    id attr EString uid;
    attr EString name;
    @gmf.compartment(layout="list")
    val StyleSet[*] styles;    
}

@gmf.node(label="name",border.color="0,0,0",color="255,237,85")
class StyleSet{
    id attr EString uid;
   attr EString name;
}

@gmf.diagram.mapper
class Mappers{
    id attr EString uid;
   val Mapper[*]#parent mappers;
   ref ApplicationMapper#mapper parent;
}

class Mapper {
    id attr EString uid;
    ref Mappers#mappers  parent;
    attr boolean serviceLayer;
    attr boolean uiLayer;
}

class TypeMapper extends Mapper,TypePointer{
}

@gmf.node(label="fakePackageName,fakeTypeName",border.color="0,0,0",color="255,237,85")
class JavaMapper extends TypeMapper{
   attr EString mappedToPackageName;
   attr EString mappedToClassName;
   attr EString artifactId;
   attr EString groupId;
   attr EString version;
   attr EString libraryName;
}



@gmf.node(label="fakePackageName,fakeTypeName",border.color="0,0,0",color="47,180,155")
class JavaScriptMapper extends TypeMapper{
   attr EString libraryUrl;
}

@gmf.node(label="fakePackageName,fakeTypeName",border.color="0,0,0",color="47,180,155")
class CSSMapper extends Mapper{
   attr EString libraryUrl;
   ref StylesPackage stylePackage;
   ref StyleLibrary styleLibrary;

  // To support display label
  attr EString fakePackageName;
  attr EString fakeTypeName;

}

@gmf.node(label="fakeRoleName",border.color="0,0,0",color="246,148,52")
class RoleMapper extends Mapper{
     ref EObject role;
     attr EString localRoleName;
     attr EString globalRoleName;
        
  // To support display label
  attr EString fakeRoleName;
   
}


@gmf.diagram.recipe
class Recipes{
    id attr EString uid;
  val Recipe#parent recipe;
  val Configuration[*] configurations;
  val Infrastructure[*] infrastructures;
  ref ApplicationRecipe#recipes parent;
  val DeploymentSequence deployment;
}

@gmf.node(label="name",border.color="0,0,0",color="177,201,236")
class DeploymentSequence{
    id attr EString uid;
   attr EString name;
   val DeploymentComponents deploymentComponents;
}

@gmf.diagram.deployment
class DeploymentComponents{
    id attr EString uid;
    val DeploymentComponent[*] deplymentStep;   
    val DeploymentStarStep startSeq;
}

@gmf.node(label="name",border.color="0,0,0",color="177,201,236")
class DeploymentComponent{
    id attr EString uid;
    attr EString name;
    ref ModelMapper mapper;
  @gmf.link(target.decoration="arrow", style="dash")
   ref DeploymentComponent deploymentComponentLink;
}

@gmf.node(label="name",border.color="0,0,0",color="255,69,0")
class DeploymentStarStep{
    id attr EString uid;
    attr EString name;
  @gmf.link(target.decoration="arrow", style="dash")
   ref DeploymentComponent firstStep;
}


class UsingMappers{
  ref ApplicationMapper[*] mappers;
}

//Value of laers must be 2^n
enum PlatformLayers{
   ServiceLayer = 1;
   UILayer = 2;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Recipe extends UsingMappers{
    id attr EString uid;
  ref Recipes#recipe parent;
  attr EString name;
  @gmf.compartment(layout="list")
  val Ingredient[*]#parent ingredients;
  @gmf.link(target.decoration="arrow", style="dash")
  ref Infrastructure[*]#recipe infrastructures;
  @gmf.link(target.decoration="arrow", style="dash")
  ref DeploymentSequence#recipe deployment;
}

@gmf.node(label="name",border.color="0,0,0",color="255,222,32")
class Ingredient extends UsingMappers ,HTMLLayerHolder{
  id attr EString uid;
  attr EString name;
  ref Recipe#ingredients parent;
  @gmf.compartment
  val Component[*]#parent components;
  attr PlatformLayers layer;
}

class Component extends HTMLLayerHolder{
    id attr EString uid;
   attr EString name;
   ref Ingredient#components parent;
  @gmf.compartment
   val ModelMapper[*]#parent mappers;
   attr EString componentRoot;
}

@gmf.node(label="name",border.color="0,0,0",color="128,128,128")
class JavaComponent extends Component{
   attr EString artifactId;
   attr EString groupId;
   attr EString version;
   attr EString basePackage;   
}


@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Infrastructure{
  id attr EString uid;
  ref Recipe#infrastructures recipe;
  attr EString name;
  @gmf.link(target.decoration="arrow", style="dash")
  ref Configuration#infrastructure recipeConfig;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Configuration{
    id attr EString uid;
   attr EString name;
   ref Infrastructure#recipeConfig infrastructure;
   @gmf.compartment(layout="list")
   val Property[*] properties; 
  @gmf.link(style="dot", width="2" ,target.decoration="closedarrow")
   ref Configuration#parent configExtension;
   ref Configuration#configExtension parent;
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ModelMapper extends ArtifactRef{
   attr EString name;
   ref Component#mappers parent;
   val MappingSpecifier[*] specifiers;
   @gmf.compartment(layout="list")
    val Query[*] queries;
    attr EString artifactExecutionString;
}

@gmf.node(label="fakeName",border.color="0,0,0",color="255,239,222")
class Property{
    id attr EString uid;
    ref ConfigVariable confVarRef;
    attr EString value;
    attr EString fakeName;
}

class MappingSpecifier{
    id attr EString uid;
   ref  Specifier specifierRef;
   ref Option valueRef;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class Query{
    id attr EString uid;
   ref ModelQuery modelQuery;
   attr EString name;
   ref ModelQuery queryRef;
   val QueryVariable[*] variables;
   attr EString groupCode;
}

class QueryVariable{
    id attr EString uid;
   ref QueryParameter queryParamRef;
   attr EString value;
}

class ArtifactRef{
    id attr EString uid;
   ref DomainArtifact domainArtifactRef;
   ref Artifact artifactRef;
}

class TypePointer{
  ref Package packageRef;
  ref TypeElement typeRef;

  // To support display label
  attr EString fakePackageName;
  attr EString fakeTypeName;
}

@gmf.diagram.typedefinition
class TypeDefinition{
    id attr EString uid;
   val TypeElement[*]#parent types;
   ref Package#typedefinition parent;
}

class TypeElement{
    id attr EString uid;
   attr EString name; 
   ref TypeDefinition#types parent;
}


@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Primitive extends TypeElement{
}


@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Type extends TypeElement {
   @gmf.compartment(layout="list")
   val Attribute[*]#parent attributes;
   @gmf.compartment(layout="list")
   val Operation[*]#parent operations;
   val TypeExtension[*] extension;
}

@gmf.node(label="fakePackageName,fakeTypeName",border.color="0,0,0",color="255,239,222")
class TypeReference extends TypeElement , TypePointer{
 }

@gmf.link(source="source", target="target", style="dot", width="2" ,target.decoration="closedarrow")
class TypeExtension {
    id attr EString uid;
    ref TypeElement source;
    ref TypeElement target;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Attribute extends  TypePointer{
    id attr EString uid;
   attr EString name;
   attr EBoolean pk;
   ref Type#attributes parent;
}


@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Operation{
    id attr EString uid;
   attr EString name;
   ref Type#operations parent;
   val Parameter[*]#parent parameters;
   val ReturnValue returnValue;
}

class Parameter extends  TypePointer{
    id attr EString uid;
   attr EString name;
   attr EInt order;
   ref Operation#parameters parent;
}


class ReturnValue extends TypePointer{
    id attr EString uid;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Enumarator extends TypeElement{
  @gmf.compartment(layout="list")
   val EnumAttribute[*]#parent values;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class EnumAttribute{
    id attr EString uid;
   ref Enumarator#values parent;
   attr EString name;
   attr EString  value;
}


@gmf.diagram.typesrepository
class TypesRepository{
    id attr EString uid;
  val Types[1]#parent typeDefinition;
  ref DomainTypes#typesrepository parent;
}

@gmf.node(label="name",border.color="0,0,0",color="255,239,222")
class Types  extends HTMLLayerHolder{
    id attr EString uid;
   ref TypesRepository#typeDefinition parent;
   attr EString name;
   @gmf.compartment
   val Package[*]#parent packages;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class Package{
    id attr EString uid;
   attr EString name;
   ref TypeDefinition#parent typedefinition;
   ref  Types#packages parent;
}

@gmf.diagram.uipackage
class UIPackage{
    id attr EString uid;
    ref ApplicationUIPackage#uipackage parent;
    val Form[*] forms;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class Form{
    id attr EString uid;
   attr EString name;
   @gmf.compartment(layout="list")
   val FormView view;
   @gmf.compartment(layout="list")
   val FormDataControls datacontrols;
   
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class FormView{
    id attr EString uid;
   attr EString name;
   ref Views#parent view;
}

@gmf.diagram.view
class Views{
    id attr EString uid;
   ref FormView#view parent; 
   val CanvasFrame[*]  canvases;
   val ViewInheritance[*] viewInheritances;
   val TabPagesInheritance[*] tabPagesInheritances;
}


class MultiLangLabel{
   val Context multiLangLabel;
}

class CanvasFrame{
    id attr EString uid;
   attr EString name;
}

class ViewPortHolder extends HTMLLayerHolder{
   @gmf.compartment
   val ViewElement[*] viewElement;
}

class DefaultCavas{
   attr boolean defaultCanvas;
}

class ViewElement{
   
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class Canvas extends CanvasFrame,ViewPortHolder,DefaultCavas, MultiLangLabel{
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class Window extends CanvasFrame,ViewPortHolder,MultiLangLabel{
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class TabCanvas extends CanvasFrame,DefaultCavas,MultiLangLabel{
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class TabPage extends CanvasFrame,ViewPortHolder,MultiLangLabel{
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ViewPort extends ViewElement{
    id attr EString uid;
   attr EString name;
  @gmf.compartment(layout="list")
    val ViewPortTrigger  viewPortTrigger;
}

@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ViewArea extends ViewElement{
    id attr EString uid;
   attr EString name;
   ref CanvasView#parent canvasView;
}


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class ViewPortTrigger extends Trigger  {
   id attr EString uid;
 }

@gmf.link(source="source", target="target", color = "80,195,63" ,style="dot", width="2" , target.decoration="closedarrow")
class ViewInheritance{
    id attr EString uid;
   ref ViewPort source;
   ref CanvasFrame target;
}



@gmf.link(source="source", target="target", style="dash", color = "238,16,16" ,width="2" , target.decoration="arrow")
class TabPagesInheritance{
    id attr EString uid;
   ref TabCanvas source;
   ref TabPage target;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class FormDataControls{
    id attr EString uid;
   attr EString name;
   ref Controls#parent formControl;
}


@gmf.diagram.canvas
class CanvasView{
    id attr EString uid;
   ref ViewArea#canvasView parent;
   val LayerHolder  baseCanvas; 
}

class Style{
    id attr EString uid;
    attr EString style;
}

class ChildrenHolder{
   @gmf.compartment
   val Uielement [*] children; 
}

class StyleClass{
    id attr EString uid;
    ref StylesPackage stylesPackage;
    ref StyleLibrary library;
    ref StyleSet styleSet;
}

class ContextParameter{
    id attr EString uid;
   ref Parameter parameter;
   val ContextValue value;
}

class ContextValue{
   id attr EString uid;
   attr boolean constant;
   attr EString value;
   val ExpressionPart[*] expression;
}

class ExpressionPart{
   id attr EString uid;
   ref EObject objRef;
   attr EInt order;   
}

class ContextParameters {
    val ContextParameter[*] parameters;
}

class Context extends ContextValue, ContextParameters{
}



class StyleElement{
    val Style style;
    val StyleClass[*] styleClass;
}

class Uielement extends StyleElement{
    id attr EString uid;
    attr EString nickname;
    val Context enabled;
    val Context required;
    val Context readOnly;
    ref Uielement[*] onEventRefreshArea;
}

class SourcesPointer extends Uielement{
   ref DataControl sourcePointer;
   ref EObject valuePointer;
   ref Type sourceCast;
}

class ActionElement extends Uielement , Trigger {
}

class InputElement extends SourcesPointer {
}

class Selection extends StyleElement{
   ref EObject displayOptionPointer;
   ref EObject valueOptionPointer;
}

class OptionSelection extends InputElement {
   ref DataControl optionPointer;
   ref Type optionCast;
}

@gmf.node(label.placement="none",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/layerholder.png")
class LayerHolder extends Uielement , ChildrenHolder, HTMLLayerHolder{
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.InputTextFigure",label.placement="none",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/inputtext.png")
class InputText extends InputElement {
   
}

@gmf.node(label="label",tool.small.bundle="org.tura.metamodel.commons",label.icon="false",tool.small.path="icons/label.png")
class Label extends Uielement ,MultiLangLabel{
  attr EString label;
}

@gmf.node(figure="org.tura.metamodel.commons.figures.OutputTextFigure",label.placement="none",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/outputtext.png")
class OutputText extends InputElement {
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.CheckBoxFigure",label.placement="none",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/checkbox.png")
class CheckBox extends InputElement {
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.DropDownFigure",label.placement="none",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/dropdownselection.png")
class DropDownSelection extends OptionSelection {
   val Selection selection;
}

@gmf.node(label="label",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/column.png")
class Column extends StyleElement,MultiLangLabel{
    id attr EString uid;
   attr EString label;
   @gmf.compartment(layout="list")
   val Uielement element;   
}

@gmf.node(label="label",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/table.png")
class Table extends SourcesPointer,HTMLLayerHolder,MultiLangLabel{
   attr EString label;
   @gmf.compartment
    val Column[*] cols;
}

@gmf.node(label="label",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/tree.png")
class Tree extends SourcesPointer,MultiLangLabel{
   attr EString label;
   val Context image;
}

@gmf.node(figure="org.tura.metamodel.commons.figures.ButtonFigure",label.icon="false",label="label",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/button.png")
class Button extends ActionElement,MultiLangLabel{
   attr EString label;
}

@gmf.diagram.control
class Controls{
    id attr EString uid;
    ref FormDataControls#formControl parent; 
    val Root root;
    val DataControl [*]#parent controls;
    val Relation[*] relations;
}

class Trigger extends MethodPointer , ContextParameters{
}

@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class PREFormTrigger  extends Trigger {
    id attr EString uid;
 }

@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class PREQueryTrigger  extends  Trigger {
   id attr EString uid;
 }

@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class POSTQueryTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class PREInsertTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class PREDeleteTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class POSTCreateTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class PREUpdateTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class CreateTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class InsertTrigger  extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class UpdateTrigger   extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class DeleteTrigger  extends Trigger {
    id attr EString uid;
 }


@gmf.node(label="fakeMethod",border.color="0,0,0",color="241,238,203")
class SearchTrigger  extends Trigger {
    id attr EString uid;
 }



@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class Root{
    id attr EString uid;
   attr EString name;
   @gmf.compartment(layout="list")
   val PREFormTrigger preFormTrigger;
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class DataControl {
    id attr EString uid;
   attr EString name;
   ref Controls#controls parent;
   @gmf.compartment(layout="list")
   val PREQueryTrigger preQueryTrigger;
   @gmf.compartment(layout="list")
   val POSTQueryTrigger postQueryTrigger;
   @gmf.compartment(layout="list")
   val PREInsertTrigger preInsertTrigger;
   @gmf.compartment(layout="list")
   val PREDeleteTrigger preDeleteTrigger;
   @gmf.compartment(layout="list")
   val POSTCreateTrigger postCreateTrigger;
   @gmf.compartment(layout="list")
   val PREUpdateTrigger preUpdateTrigger;
   @gmf.compartment(layout="list")
   val CreateTrigger create;
   @gmf.compartment(layout="list")
   val InsertTrigger insert;
   @gmf.compartment(layout="list")
   val UpdateTrigger update;
   @gmf.compartment(layout="list")
   val DeleteTrigger remove;
   @gmf.compartment(layout="list")
   val SearchTrigger search;

   @gmf.compartment(layout="list")
   val ArtificialField[*]#parent artificialFields;   
   
    
}

@gmf.link(source="master", target="detail", style="dash", target.decoration="arrow")
class Relation{
    id attr EString uid;
   attr EString name;
   ref DataControl master;
   ref DataControl detail;
   attr EBoolean isTree;
   val Link[*]#parent links;  
}

@gmf.node(label="name",border.color="0,0,0",color="241,238,203")
class ArtificialField extends TypePointer{
    id attr EString uid;
   attr EString name;
   ref DataControl#artificialFields parent; 
   
}

class Link{
    id attr EString uid;
    ref Relation#links parent;
    ref Attribute masterField;
    ref Attribute detailField;
}


@gmf.node(label="name",border.color="0,0,0",color="192,192,192")
class ApplicationInfrastructureLayer{
    id attr EString uid;
   attr EString name;
   ref Application#applicationInfrastructureLayer parent;
   val EnterpriseInfrastructure#parent infarastructure;
}

@gmf.diagram.infarastructure
class EnterpriseInfrastructure{
    id attr EString uid;
    ref ApplicationInfrastructureLayer#infarastructure parent;
    val Datacenter[*]#parent datacenters;
    val InfrastructureConnection[*] infrastructureConnections;
   
}


@gmf.node(label="name" ,tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/datacenter.png")
class Datacenter extends HTMLLayerHolder{
    id attr EString uid;
    ref EnterpriseInfrastructure#datacenters parent;
   @gmf.compartment
    val Subsystem[*]#parent subsystems;
   attr EString name;
}

@gmf.node(label="name" ,tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/subsystem.png")
class Subsystem{
    id attr EString uid;
    attr EString name;
    ref Datacenter#subsystems parent;
   @gmf.compartment(layout="list")
    val InfrastructureLayer[*]#parent  infrastructureLayer;
}

@gmf.node(label="name" ,tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/infra.png")
class InfrastructureLayer {
     id attr EString uid;
     attr EString name;
     ref Subsystem#infrastructureLayer parent;
   @gmf.compartment
     val InfrastructureComponent[*]#parent  infrastructureComponent;
}


@gmf.link(source="master", target="detail",width="2")
class InfrastructureConnection{
    id attr EString uid;
   ref InfrastructureComponent master;
   ref InfrastructureComponent detail;
}


class InfrastructureComponent{
     id attr EString uid;
     attr EString name;
     ref InfrastructureLayer#infrastructureComponent parent;
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.ServerFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/server.png")
class Server extends InfrastructureComponent{
   
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.RouterFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/router.png")
class Router extends InfrastructureComponent{
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.HubFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/hub.png")
class Hub extends InfrastructureComponent{
   
}

@gmf.node(figure="org.tura.metamodel.commons.figures.StorageFigure", label.icon="false", label="name", label.placement="external",tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/storage.png")
class Storage extends InfrastructureComponent{
   
}

@gmf.node(label="name" ,tool.small.bundle="org.tura.metamodel.commons",tool.small.path="icons/serverclaster.png")
class ServerClaster extends InfrastructureComponent{
   @gmf.compartment
  val Server[*] servers;
}

