 context Type {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.types.select(r|r.isKindOf(Type) and r.name=self.name).size() = 1
      message : 'Type name  ' + self.name + ' is not unique'
   
   } 

}

 context Attribute {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

}

 context Operation {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

}

 context Enumarator {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

}

 context EnumAttribute {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

  constraint HasValue {

      check :  self.value.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

}

 context TypePointer {

  constraint PackageName {

      check :  self.packageName.isDefined()

      message : 'Undefined  package name ' + self.eClass().name + ' not allowed'

  }
  
  constraint TypeName {

      check :  self.typeName.isDefined()

      message : 'Undefined  type name ' + self.eClass().name + ' not allowed'

  }
  
  constraint TypeReference {
  
     guard : self.satisfies("TypeName") and  self.satisfies("PackageName") and self.packageName<>'Primitives'

      check :   Package.allInstances.exists(p|p.name=self.packageName) and Type.allInstances.exists(p|p.name=self.typeName) 
 
      message : 'Wrong reference to type ' + self.eClass().name + " to " +self.packageName+'::'+ self.typeName

  }


  constraint PrimitiveReference {
  
     guard : self.satisfies("TypeName") and  self.satisfies("PackageName") and self.packageName='Primitives'

      check :   Primitive.allInstances.exists(p|p.name=self.typeName) 
 
      message : 'Wrong reference to primitive ' + self.eClass().name +  " to " + self.typeName

  }


}






