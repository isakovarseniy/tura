 context ApplicationRecipe {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.recipes.select(r|r.isKindOf(ApplicationRecipe) and r.name=self.name).size() = 1
      message : 'ApplicationRecipe name  ' + self.name + ' is not unique'
   
   } 

}


 context ApplicationMapper {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.parent.mappers.select(r|r.isKindOf(ApplicationMapper) and r.name=self.name).size() = 1
      message : 'ApplicationMapper name  ' + self.name + ' is not unique'
   
   } 

}
