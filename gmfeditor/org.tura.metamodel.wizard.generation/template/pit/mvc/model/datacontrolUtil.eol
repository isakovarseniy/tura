import "platform:/plugin/org.tura.metamodel.wizard.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.wizard.generation/template/commons/buildExpression.eol";
 


operation Controls processRootElement(recipe:Recipe, ingredient :Ingredient ) { 
    if (self.root.isDefined()){
 	   for ( frmvar in self.root.variables){
 	      if ( frmvar.typeRef <> null)
 	          frmvar.typeRef.mappingType2Java(recipe,ingredient);
 	      if (frmvar.paramRef<> null and frmvar.paramRef.typeRef <> null  )    
 	         frmvar.paramRef.typeRef.mappingType2Java(recipe,ingredient);
	   }
       if (self.root.preFormTrigger.isDefined()) 	         
 	        self.root.preFormTrigger.processTrigger(recipe,ingredient);
    }
}

operation DataControl processDefaultQuery(recipe:Recipe, ingredient :Ingredient ) { 

      if ( self.defaultSearch<> null)
            self.defaultSearch.processParameters(recipe,ingredient);
}

operation DataControl processTriggers(recipe:Recipe, ingredient :Ingredient ) { 

        var provider = new Native('java.util.HashMap');
        self.~provider=provider;

        self.create.processTrigger(recipe,ingredient);
        var array = new Native('java.util.ArrayList');
        array.add("create");
        provider.put(self.create.typeRef.~fullName,array);   

        self.insert.processTrigger(recipe,ingredient);
        array = provider.get(self.insert.typeRef.~fullName);   
        if (array = null){
           array = new Native('java.util.ArrayList');
           provider.put(self.insert.typeRef.~fullName,array);   
         }
        array.add("insert");
        
        self.update.processTrigger(recipe,ingredient);
        array = provider.get(self.update.typeRef.~fullName);   
        if (array = null){
           array = new Native('java.util.ArrayList');
           provider.put(self.update.typeRef.~fullName,array);   
         }
        array.add("update");

        self.remove.processTrigger(recipe,ingredient);
        array = provider.get(self.remove.typeRef.~fullName);   
        if (array = null){
           array = new Native('java.util.ArrayList');
           provider.put(self.remove.typeRef.~fullName,array);   
         }
        array.add("delete");

        self.search.processTrigger(recipe,ingredient);
        array = provider.get(self.search.typeRef.~fullName);   
        if (array = null){
           array = new Native('java.util.ArrayList');
           provider.put(self.search.typeRef.~fullName,array);   
         }
        array.add("search");
}


operation Trigger processTrigger(recipe:Recipe, ingredient :Ingredient){
        var util = new Native('org.tura.metamodel.commons.Util');
        if (self.typeRef.isDefined()){
          self.typeRef.mappingType2Java(recipe,ingredient);
          self.processParameters(recipe,ingredient);
        }
}

operation ContextParameters processParameters(recipe:Recipe, ingredient :Ingredient){
        var util = new Native('org.tura.metamodel.commons.Util');
        for (parameter in self.parameters){
            parameter.~result =  buildExpression(parameter.value);
            parameter.refObj.typeRef.mappingType2Java(recipe,ingredient);
        }
}



operation DataControl processKeys(recipe:Recipe, ingredient :Ingredient ) { 

        var util = new Native('org.tura.metamodel.commons.Util');
        
        var tp = self.create.methodRef.returnValue.typeRef;
        
        var basetype = self.getBaseClass(recipe,ingredient);
        
        self.~baseclass = basetype.~class;
        self.~basepackage = basetype.~package;
        self.~basefullName = basetype.~fullName;     
        
        var keys = new Native('java.util.ArrayList');
        var operations = new Native('java.util.HashMap');
        var attributes = new Native('java.util.HashMap');
        
        var helper = new Native('org.tura.metamodel.commons.Helper');
        helper.addOperations(operations, attributes,tp);

         for (attribute in attributes.values){
               if (attribute.pk == true ){
                  keys.add(attribute);
               }
         }
        self.~keys = keys;
}



operation DataControl processArtificialFields(recipe:Recipe, ingredient :Ingredient ) { 

        var artificialFields = self.artificialFields;
        for (  field in artificialFields){
           field.typeRef.mappingType2Java(recipe,ingredient);
        }
}

operation DataControl processRelations( recipe:Recipe, ingredient :Ingredient) { 
        var util = new Native('org.tura.metamodel.commons.Util');
        var queryHelper =  new Native('org.tura.metamodel.commons.QueryHelper');
        
       var masterscontrol = domain::DataControl.allInstances()->select(r|r.eContainer() = self.parent )->reject(q|domain::Relation.allInstances()->select(r|r.eContainer() = self.parent )->collect(w|w.detail)->includes(q));        
        for ( master in masterscontrol ){
            master.~masterControl = true;
        }        
        var form = queryHelper.getForm(self);
        var treeRoots =   queryHelper.findTreeRootControls(form);
        for ( tR in treeRoots ){
            var treeRoot = tR.getDc();
            var objectTrack =  new Native('java.util.ArrayList');
            if (treeRoot.~dependArray = null)     
                 treeRoot.~dependArray = new Native('java.util.ArrayList');    
            treeRoot.~treeRoot=true;       
            treeRoot.findDependecies(objectTrack, treeRoot,recipe,ingredient);
        }
        
}


operation DataControl processDependencies(recipe:Recipe, ingredient :Ingredient){
        var util = new Native('org.tura.metamodel.commons.Util');
        var queryHelper =  new Native('org.tura.metamodel.commons.QueryHelper');
        var form = queryHelper.getForm(self);
        var listOfDependencies = domain::Dependency.allInstances()->select(r| r.eContainer().uid = 
						form.getDatacontrols().getFormControl().getUid())->collect(w|w);
        for (dep in listOfDependencies){
            var master = dep.master;
            var dependent = dep.detail;
             if (dependent.~dependObject = null)
                dependent.~dependObject = new Native('java.util.ArrayList');  
         
            dependent.~dependObject.add(self.getBaseClass(recipe,ingredient).~fullName);
         
             if (master.~dependArray = null)     
                 master.~dependArray = new Native('java.util.ArrayList');    
                 
            master.~dependArray.add(buildExpression(util.createArtificialContextValue(dependent,dependent.findTreeRoot(),null)));
                 
        }         

}

operation DataControl findDependecies ( objectTrack, treeRoot: DataControl,recipe:Recipe, ingredient :Ingredient){

        var util = new Native('org.tura.metamodel.commons.Util');

         if (objectTrack.contains(self) )
              return;
        
        objectTrack.add(self);
        
        var listOfRelations = domain::Relation.allInstances()->select(r|r.isTree=false and r.master = self);
        for (rel in listOfRelations){
            var dependent = rel.detail;
            treeRoot.~dependArray.add(buildExpression(util.createArtificialContextValue(dependent,dependent.findTreeRoot(),null)));
            if (dependent.~dependObject == null)
                dependent.~dependObject = new Native('java.util.ArrayList');  
    // self is master datacontrol            
            dependent.~dependObject.add(self.getBaseClass(recipe,ingredient).~fullName);
            dependent.~masterRoot=treeRoot;
            dependent.~relation=rel;
            for ( lnk in rel.links ){
                lnk.masterField.typeRef.mappingType2Java(recipe,ingredient);
                lnk.~result = buildExpression ( util.createArtificialContextValue(rel.master,rel.master.findTreeRoot(), lnk));
            }
        }      
              
        var listOfDependecies = domain::Dependency.allInstances()->select(r| r.master = self);
        for (dep in listOfDependecies){
            var dependent = dep.detail;
            treeRoot.~dependArray.add(buildExpression(util.createArtificialContextValue(dependent,dependent.findTreeRoot(),null)));
           if (dependent.~dependObject == null)
                dependent.~dependObject = new Native('java.util.ArrayList');  

            dependent.~dependObject.add(self.getBaseClass(recipe,ingredient).~fullName);
         
        }              
              
        var listOfTreeNodes = domain::Relation.allInstances()->select(r|r.isTree=true and r.master = self)->collect(w|w.detail);
        for (treeNode in listOfTreeNodes){
               treeNode.findDependecies(objectTrack, treeRoot,recipe,ingredient);
        }
}

operation DataControl getBaseClass(recipe:Recipe, ingredient :Ingredient)  : Type{
    
       var base = self.create.methodRef.returnValue.typeRef;
        if (self.baseType <> null)
             base = self.baseType;
        base.mappingType2Java(recipe,ingredient);
        return base;
 
 }
