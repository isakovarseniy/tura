operation buildParameterizedExpression(context : domain::Context ) : String {
           if (context = null or context.value = null)
             return ""; 
           var result = buildExpression(context);
           if (context.parameters <> null and context.parameters.size() <> 0 ){
              result = result + "(";
              var i = 0;
               for (parameter  in context.parameters){
                  if ( i <> 0)
                     result = result + ",";
                  result = result + buildExpression(parameter.value);
                  i = 1;
               }
              result = result + ")";
           }
         return result;  
}



operation  buildExpression( contextValue) : String {
      if (contextValue.constant = true )
           return contextValue.value;
           
       var i : Integer = 0;    
       var resultExpression : String = ""; 
       var tokenizer = new Native("java.util.StringTokenizer")(contextValue.value,"."); 
       var tokenArray = new Native("java.util.ArrayList"); 
       while (tokenizer.hasMoreTokens()) {
         tokenArray.add(tokenizer.nextToken());
       }
       
       for (  exprParam in  contextValue.expression  )  {
       switch(exprParam.expressionType){
       
          case "ArtificialFieldImpl":              resultExpression = ArtificialFieldImpl(resultExpression,contextValue,i,tokenArray);
          case "DataControlHolder":           resultExpression = DataControlHolder(resultExpression,contextValue,i,tokenArray);
          case "TreeRootDataControlHolder": resultExpression = TreeRootDataControlHolder(resultExpression,contextValue,i,tokenArray);
          case "DataControlImpl":               resultExpression = DataControlImpl(resultExpression,contextValue,i,tokenArray);
          case "TriggerImpl":                       resultExpression = TriggerImpl(resultExpression,contextValue,i,tokenArray);
          case "TypeElementImpl":             resultExpression = TypeElementImpl(resultExpression,contextValue,i,tokenArray);
          case "AttributeImpl":                     resultExpression = AttributeImpl(resultExpression,contextValue,i,tokenArray);
          case "TypesImpl":                       resultExpression = TypesImpl(resultExpression,contextValue,i,tokenArray);
          case "PackageImpl":                    resultExpression = PackageImpl(resultExpression,contextValue,i,tokenArray);
          case "OperationImpl":                  resultExpression = OperationImpl(resultExpression,contextValue,i,tokenArray);
          case "GroupImpl":                        resultExpression = GroupImpl(resultExpression,contextValue,i,tokenArray);
          case "RoleImpl":                          resultExpression = RoleImpl(resultExpression,contextValue,i,tokenArray);
          case "MessageLibraryImpl":        resultExpression = MessageLibraryImpl(resultExpression,contextValue,i,tokenArray);
          case "MessagesImpl":                 resultExpression = MessagesImpl(resultExpression,contextValue,i,tokenArray);
          case "MessageImpl":                   resultExpression = MessageImpl(resultExpression,contextValue,i,tokenArray);
          case "DomainArtifactsImpl":         resultExpression = DomainArtifactsImpl(resultExpression,contextValue,i,tokenArray);
          case "DomainArtifactImpl":           resultExpression = DomainArtifactImpl(resultExpression,contextValue,i,tokenArray);
          case "ArtifactImpl":                       resultExpression = ArtifactImpl(resultExpression,contextValue,i,tokenArray);
          case "GeneratioinHintImpl":                resultExpression = GeneratioinHint(resultExpression,contextValue,i,tokenArray);
          case "DataControlFakeAttribute": resultExpression = DataControlFakeAttribute(resultExpression,contextValue,i,tokenArray);
          case "DataControlFakeMethod":  resultExpression = DataControlFakeMethod(resultExpression,contextValue,i,tokenArray);
          case "TreeDataControl":               resultExpression = TreeDataControl(resultExpression,contextValue,i,tokenArray);
          case "ExtendedType":                   resultExpression = ExtendedType(resultExpression,contextValue,i,tokenArray);
          case "RolesImpl":                          resultExpression = RolesImpl(resultExpression,contextValue,i,tokenArray);
        }
        i = i +1;
       }  
     return resultExpression;
}

operation DataControl findTreeRoot(  ) : DataControl {
      var masters =  domain::Relation.allInstances()->select(r|r.isTree=true and  r.detail = self )->collect(w|w.master);
      for ( master in masters ){
         if (master = self )
            return self;
            
         return master.findTreeRoot();   
      }
     return self;
}


