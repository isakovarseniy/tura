<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/${Environment}.egl";
${percent}${end}

[%
     var util = new Native('org.tura.metamodel.commons.Util');
%]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].datacontrol;  

@javax.inject.Named("beanFactory")
[%=datacontrol_scope()%]
public class BeanFactory {
    [%
     var controls =  form.datacontrols.formControl.controls;
     for (control in controls){
       if (control.~masterControl = true){%]
       	@javax.inject.Inject
	   private javax.enterprise.inject.Instance<[%=typeName(control, component, form)%]> [%=propertyName(control)%]producer;
       private [%=typeName(control, component, form)%] [%=propertyName(control)%];
       [%}
     }    
    %]
    
 [%
     for (control in controls){
         var relations = domain::Relation.allInstances()->select(r|r.master= control);   
         for ( relation in relations ){
           if (relation.detail.~dependObject <>  null ){ %] 
       	@javax.inject.Inject
	   private javax.enterprise.inject.Instance<[%=typeName(relation.detail, component, form)%]> [%=propertyName(relation.detail)%]producer;
       private [%=typeName(relation.detail, component, form)%] [%=propertyName(relation.detail)%];

     [%}
       }
     } %]    
    
    [%
     var controls =  form.datacontrols.formControl.controls;
     for (control in controls){
       if (control.~masterControl = true){%]
          public    [%=typeName(control, component, form)%]  [%=methodName(control)%](){
               if ([%=propertyName(control)%] == null)
                  [%=propertyName(control)%] = [%=propertyName(control)%]producer.get();
               return [%=propertyName(control)%];
         }
       [%}
     }    
    %]
    
    
[%
     for (control in controls){
         var relations = domain::Relation.allInstances()->select(r|r.master= control);   
         for ( relation in relations ){
         if (relation.isTree = false){%]
          public    [%=typeName(relation.detail, component, form)%]  [%=methodName(relation.detail)%](){
       [%if (relation.detail.~dependObject =  null ){ %] 
          try {
               [%=typeName(relation.master, component, form)%] master =  [%=methodName(relation.master)%]();
               return ( [%=typeName(relation.detail, component, form)%] )master.get[%=util.mergeAndCapitalize(relation.master.name)%]2[%=util.mergeAndCapitalize(relation.detail.name)%]();
		     } catch (org.tura.platform.datacontrol.commons.TuraException e) {
			   return null;
		     }
         [%}%]

       [%if (relation.detail.~dependObject <>  null ){ %] 
          try {
               if ([%=propertyName(relation.detail)%] == null){
                  getTreeRoot[%=util.mergeAndCapitalize(relation.detail.~masterRoot.name)%]().getCurrentObject();
                  [%=propertyName(relation.detail)%] = [%=propertyName(relation.detail)%]producer.get();
               }
               return [%=propertyName(relation.detail)%];
		     } catch (org.tura.platform.datacontrol.commons.TuraException e) {
			   return null;
		     }
         [%}%]
          }
          [%}
         }
     }    
%]

}


[% @template
operation methodName(dc:DataControl) {
     var util = new Native('org.tura.metamodel.commons.Util');
%]
   get[%if (dc.~treeRoot=true){%]TreeRoot[%}%][%=util.mergeAndCapitalize(dc.name)%]
 [%} %]

[% @template
operation typeName(dc:DataControl, component: Component, form:Form) {
     var util = new Native('org.tura.metamodel.commons.Util');
%]
  [%=component.basePackage%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].datacontrol.[%if (dc.~treeRoot=true){%]TreeRoot[%}%][%=util.mergeAndCapitalize(dc.name)%]DC 
 [%} %]
 
 [% @template
operation propertyName(dc:DataControl) {
     var util = new Native('org.tura.metamodel.commons.Util');
%]
   [%if (dc.~treeRoot=true){%]treeRoot[%=util.mergeAndCapitalize(dc.name)%][%} else {%][%=util.mergeAndUnCapitalize(dc.name)%][%}%]
 [%} %]
 
 

