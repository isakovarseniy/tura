<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/${Environment}.egl";
${percent}${end}

[%
     var util = new Native('org.tura.metamodel.commons.Util');
%]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].datacontrol;  

public class [%=util.mergeAndCapitalize(control.name)%]DC extends org.tura.platform.datacontrol.DataControl <[%=control.~basefullName%]>  implements java.io.Serializable [%if (control.~dependObject.isDefined() and not control.~treeRoot.isDefined()){%] , org.tura.platform.datacontrol.ChangeRecordListener [%}%]{

	private static final long serialVersionUID = 1L;
	
	private transient @javax.inject.Inject java.util.logging.Logger logger;


    [%
    if (control.~dependObject.isDefined() and not control.~treeRoot.isDefined()){%]
    @Override
	public void handleChangeRecord(org.tura.platform.datacontrol.IDataControl dc , Object newCurrentObject) throws org.tura.platform.datacontrol.commons.TuraException{
    [%
      var i = 0;
      for (depend in control.~dependObject){
        if (i <> 0 ){ %],[%}%]
		if (newCurrentObject instanceof [%=depend%]){
            this.handleChangeMusterCurrentRecordNotification(newCurrentObject);
        }else{
            this.handleChangeMusterCurrentRecordNotification(null);
        }
    [%
        i = i+1;
      }
    %] 
	}     
   [%
    }
    %] 


	@javax.inject.Inject
    [%
    var i = 0;
    for (methodProvider in control.~provider.keySet()){
    %]
    private [%=methodProvider%] provider_[%=i%];
    [%
     i = i+1;
    }
    %] 
    

    [%
     var relations = domain::Relation.allInstances()->select(r|r.master= control);   
    for (relation in relations){
      if (not relation.detail.~dependObject.isDefined()){
    %]
	@javax.inject.Inject
	private javax.enterprise.inject.Instance<[%if (relation.detail.~treeRoot=true and relation.isTree <> true){%]TreeRoot[%}%][%=util.mergeAndCapitalize(relation.detail.name)%]DC> [%=util.mergeAndUnCapitalize(relation.detail.name)%]producer;
    [%
     }
    }
    %] 
    

	public  [%=util.mergeAndCapitalize(control.name)%]DC() throws Exception {
		super();
    [%
    if (control.~dependObject.isDefined()){%]
    blocked=true;
      [%}%]		
	}
	
	@javax.annotation.PostConstruct
	public void init() {
     try{
     setBaseClass([%=control.~basefullName%].class); 

    [%
    var i = 0;
    for (methodProvider in control.~provider.keySet()){
       for (method in control.~provider.get(methodProvider)) {
    %]
    
		this.[%=method%]Command.setProvider(provider_[%=i%]);
		this.[%=method%]Command.setDatacontrol(this);
    [%
      }
     i = i+1;
    }
    if (control.artificialFields.size() <> 0 ){%]
    setArtificialInterface(I[%=util.mergeAndCapitalize(control.name)%]ArtifitialFields.class);
    [%}%]
		org.tura.platform.datacontrol.DataControlFactory.buildConnection(this);
      }catch(Exception e){
         	logger.fine(e.getMessage());
      }
	}	

	@javax.inject.Inject
	public void setKeys(
			@org.tura.platform.datacontrol.annotations.Keys(fields = { 
    [%
    var i = 0;
    for (key in control.~keys){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Key(field = "[%=key.name%]") 
    [%
     i = i+1;
    }
    %] 
			}) java.util.List<String> keys) {
		this.keys = keys;
	}


	@javax.inject.Inject
	public void setArtificialProperties(
			@org.tura.platform.datacontrol.annotations.ArtificialFields(fields = {
   [%
    var i = 0;
    for (artificialField in control.artificialFields){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.ArtificialField(field = "[%=artificialField.name%]" , type = [%=artificialField.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
	 }) java.util.List<org.tura.platform.datacontrol.metainfo.ArtificialProperty> properties) {
		this.artificialProperties = properties;
	}

	@Override
	@javax.inject.Inject
	public void setElResolver(org.tura.platform.datacontrol.ELResolver elResolver) {
		this.elResolver = elResolver;
	}


	@Inject
	public void setCommandStack(
	      @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
	      org.tura.platform.datacontrol.CommandStack commandStack) {
		this.commandStack = commandStack;
	}


	@Override
	@javax.inject.Inject
	public void setCreateCommand(
			@org.tura.platform.datacontrol.annotations.Create(objectAction = "[%=control.create.methodRef.name%]", parameters = @org.tura.platform.datacontrol.annotations.Parameters(value = { 
   [%
    var i = 0;
    for (param in control.create.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Parameter(name = "[%=param.refObj.name%]", [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]", type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
			})) org.tura.platform.datacontrol.command.CreateCommand createCommand) {
		this.createCommand = createCommand;
	}

	@Override
	@Inject
	public void setInsertCommand(
			@org.tura.platform.datacontrol.annotations.Insert(objectAction = "[%=control.insert.methodRef.name%]", parameters = @org.tura.platform.datacontrol.annotations.Parameters(value = {
   [%
    var i = 0;
    for (param in control.insert.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Parameter(name = "[%=param.refObj.name%]", [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]", type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
			 })) org.tura.platform.datacontrol.command.InsertCommand insertCommand) {
		this.insertCommand = insertCommand;
	}

	@Override
	@Inject
	public void setUpdateCommand(
			@org.tura.platform.datacontrol.annotations.Update(objectAction = "[%=control.update.methodRef.name%]", parameters = @org.tura.platform.datacontrol.annotations.Parameters(value = {
   [%
    var i = 0;
    for (param in control.update.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Parameter(name = "[%=param.refObj.name%]", [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]", type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
			  })) org.tura.platform.datacontrol.command.UpdateCommand updateCommand) {
		this.updateCommand = updateCommand;
	}

	@Override
	@Inject
	public void setDeleteCommand(
			@org.tura.platform.datacontrol.annotations.Delete(objectAction = "[%=control.remove.methodRef.name%]", parameters = @org.tura.platform.datacontrol.annotations.Parameters(value = {
   [%
    var i = 0;
    for (param in control.remove.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Parameter(name = "[%=param.refObj.name%]", [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]", type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
			 })) org.tura.platform.datacontrol.command.DeleteCommand deleteCommand) {
		this.deleteCommand = deleteCommand;
	}

	@Override
	@Inject
	public void setSearchCommand(
			@org.tura.platform.datacontrol.annotations.Search(objectAction = "[%=control.search.methodRef.name%]", parameters = @org.tura.platform.datacontrol.annotations.Parameters(value = {
   [%
    var i = 0;
    for (param in control.search.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Parameter(name = "[%=param.refObj.name%]", [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]", type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
    %] 
					})) org.tura.platform.datacontrol.command.SearchCommand searchCommand) {
		this.searchCommand = searchCommand;
	}

	@Override
	@javax.inject.Inject
	public void setPreQueryTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PreQuery("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PreQueryTrigger preQueryTrigger) {
		this.preQueryTrigger = preQueryTrigger;
	}

	@Override
	@javax.inject.Inject
	public void setPostQueryTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PostQuery("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PostQueryTrigger postQueryTrigger) {
		this.postQueryTrigger = postQueryTrigger;
	}

	@Override
	@javax.inject.Inject
	public void setPostCreateTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PostCreate("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PostCreateTrigger postCreateTrigger) {
		this.postCreateTrigger = postCreateTrigger;
	}

	@Override
	@javax.inject.Inject
	public void setPreDeleteTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PreDelete("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PreDeleteTrigger preDeleteTrigger) {
		this.preDeleteTrigger = preDeleteTrigger;
	}

	@Override
	@javax.inject.Inject
	public void setPreInsertTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PreInsert("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PreInsertTrigger preInsertTrigger) {
		this.preInsertTrigger = preInsertTrigger;
	}

	@Override
	@javax.inject.Inject
	public void setPreUpdateTrigger(
	        @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
			@org.tura.platform.datacontrol.annotations.PreUpdate("[%=util.mergeAndUnCapitalize(control.name)%]") org.tura.platform.datacontrol.command.PreUpdateTrigger preUpdateTrigger) {
		this.preUpdateTrigger = preUpdateTrigger;
	}

    [%
    for (relation in relations){
      if (not relation.detail.~dependObject.isDefined()){
    %]
	@org.tura.platform.datacontrol.annotations.Connection(connectionName = "[%=util.mergeAndUnCapitalize(relation.master.name)%]2[%=util.mergeAndUnCapitalize(relation.detail.name)%]", links = { 
    [%
     var i = 0;
     for (link in relation.links){
       if (i <> 0 ){ %],[%}%]
	@org.tura.platform.datacontrol.annotations.Link(field1 = "[%=link.masterField.name%]", field2 = "[%=link.detailField.name%]")
    [%
     i = i+1;
      }%]    
  	})    
	public org.tura.platform.datacontrol.IDataControl get[%=util.mergeAndCapitalize(relation.master.name)%]2[%=util.mergeAndCapitalize(relation.detail.name)%]()  throws org.tura.platform.datacontrol.commons.TuraException{
		createChild("[%=util.mergeAndUnCapitalize(relation.master.name)%]2[%=util.mergeAndUnCapitalize(relation.detail.name)%]");
		Relation relation = this.getChild("[%=util.mergeAndUnCapitalize(relation.master.name)%]2[%=util.mergeAndUnCapitalize(relation.detail.name)%]");
		return relation.getChild();
	}
    [%
     }
    }
    %] 
    
 	@Override
	public void createChild( String relName) throws org.tura.platform.datacontrol.commons.TuraException{

    [%
    var i = 0;
    for (relation in relations){
      if (not relation.detail.~dependObject.isDefined()){
    %]
       [%if (i = 0 ){%]
		org.tura.platform.datacontrol.metainfo.Relation relation = this.getChild(relName);
		if (relation.getChild() == null) {
			org.tura.platform.datacontrol.IDataControl dc = null;       
       [% i = 1;
       }%]
       if ("[%=util.mergeAndUnCapitalize(relation.master.name)%]2[%=util.mergeAndUnCapitalize(relation.detail.name)%]".equals(relName)){
		dc = [%=util.mergeAndUnCapitalize(relation.detail.name)%]producer.get();
		}
    [%
      }
    }
    %] 
       [%if (i = 1 ){%]

            relation.setChild(dc);
            dc.setParent(relation);
            dc.setTreeContext(this.getTreeContext());
            relation.setMasterCurrentObject(getCurrentObject());
            dc.handleChangeMusterCurrentRecordNotification(relation.getMasterCurrentObject());
 		}
   [%}%]			
	}
    
	@Override
	@javax.inject.Inject
	public void setDefaultQuery(
			@org.tura.platform.datacontrol.annotations.Query(
			base = @org.tura.platform.datacontrol.annotations.Base(clazz = [%=control.~basefullName%].class)
			, search = @org.tura.platform.datacontrol.annotations.DefaultSearchCriterias(criterias = {
 
 [%
    var i = 0;
    if (control.~relation.isDefined()){
      for (link in control.~relation.links){
       if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.DefaultSearchCriteria(field = "[%=link.detailField.name%]",  comparator=com.octo.java.sql.exp.Operator.EQ ,  expression = "[%=link.~result%]"  , type =[%=link.masterField.typeRef.~fullName%].class) 
 [%
       i = i+1;
      } 
    }
 %]
 
  [%
    if (control.defaultSearch <> null) {
    for (param in control.defaultSearch.parameters){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.DefaultSearchCriteria(field = "[%=param.refObj.name%]",  comparator=com.octo.java.sql.exp.Operator.[%=param.getOperation()%] ,  [%if (param.value.constant){%]  value =  [%}else{%]  expression =  [%}%] "[%=param.~result%]"  , type = [%=param.refObj.typeRef.~fullName%].class) 
    [%
     i = i+1;
    }
   } 
    %] 
			}), 
			orders = @org.tura.platform.datacontrol.annotations.DefaultOrderBys(orders = { 
  [%
    var i = 0;
    if (control.defaultOrderBy <> null  and control.defaultOrderBy.size() <> 0) {
    for (param in control.defaultOrderBy.orderRules){
        if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.DefaultOrderBy(field = "[%=param.refObj.name%]", order =  com.octo.java.sql.query.SelectQuery.Order.[%=param.order%] ) 
    [%
     i = i+1;
    }
   }else{
      for (key in control.~keys){
      if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.DefaultOrderBy(field = "[%=key.name%]", order =  com.octo.java.sql.query.SelectQuery.Order.ASC ) 
    [%
     i = i+1;
     }
   } 
    %] 
			})) com.octo.java.sql.query.SelectQuery selectQuery) {
		this.defaultQuery = selectQuery;
	}
	
	private  org.tura.platform.datacontrol.IDataControl saveTreeContex ;
	
	private void saveState() {
		if (this.getTreeContext() != null) {
			saveTreeContex = this.getTreeContext().getCurrentControl();
			this.getTreeContext().setCurrentControl(this);
		}
	}

	private void restoreState() {
		if (saveTreeContex != null) {
			this.getTreeContext().setCurrentControl(saveTreeContex);
		}
	}

	private Object restoreState(Object obj) {
		if (saveTreeContex != null) {
			this.getTreeContext().setCurrentControl(saveTreeContex);
		}
		return obj;
	}	
	
	@Override
	public void forceRefresh() throws TuraException {
		saveState();
		super.forceRefresh();
		restoreState();		
	}

	@Override
	public void handleChangeMusterCurrentRecordNotification(
			Object newCurrentObject) throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		super.handleChangeMusterCurrentRecordNotification(newCurrentObject);
		restoreState();		
	}

	@Override
	public void notifyLiteners(org.tura.platform.datacontrol.event.Event event) throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		super.notifyLiteners(event);
		restoreState();		
	}

	@Override
	public [%=control.~basefullName%] getCurrentObject() throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return ([%=control.~basefullName%]) restoreState(super.getCurrentObject());
	}

	@Override
	public boolean hasNext() throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return (boolean) restoreState(super.hasNext());
	}

	@Override
	public void nextObject() throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		super.nextObject();
		restoreState();		
	}

	@Override
	public boolean hasPrev() {
		saveState();
		return (boolean) restoreState(super.hasPrev());
	}

	@Override
	public void prevObject() throws TuraException {
		saveState();
		super.prevObject();
		restoreState();		
	}

	@Override
	public void removeObject() throws Exception {
		saveState();
		super.removeObject();
		restoreState();		
	}

	@Override
	public String getObjectKey(Object object) throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return (String) restoreState(super.getObjectKey(object));
	}

	@Override
	public void removeAll() throws Exception {
		saveState();
		super.removeAll();
		restoreState();		
	}

	@Override
	public [%=control.~basefullName%] createObject() throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return ([%=control.~basefullName%]) restoreState(super.createObject());
	}

	@Override
	public Integer getCurrentPosition() {
		saveState();
		return (Integer) restoreState(super.getCurrentPosition());
	}

	@Override
	public boolean setCurrentPosition(Object crtPosition) throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return (boolean) restoreState(super.setCurrentPosition(crtPosition));
	}

	@Override
	public SelectQuery getQuery() {
		saveState();
		return (SelectQuery) restoreState(super.getQuery());
	}

	@Override
	public void cleanShifter() throws org.tura.platform.datacontrol.commons.TuraException{
		saveState();
		super.cleanShifter();
		restoreState();		
	}

	@Override
	public org.tura.platform.datacontrol.shift.ShiftControl getShifter() throws org.tura.platform.datacontrol.commons.TuraException {
		saveState();
		return (org.tura.platform.datacontrol.shift.ShiftControl) restoreState(super.getShifter());
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<[%=control.~basefullName%]> getScroller() {
		saveState();
		return (List<[%=control.~basefullName%]>) restoreState(super.getScroller());
	}
	
	
	
}