<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/${Environment}.egl";
${percent}${end}

[%
     var util = new Native('org.tura.metamodel.commons.Util');

%]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].datacontrol;  

public class TreeRoot[%=util.mergeAndCapitalize(control.name)%]DC extends org.tura.platform.datacontrol.TreeDataControl  implements java.io.Serializable [%if (control.~dependObject.isDefined()){%] , org.tura.platform.datacontrol.ChangeRecordListener [%}%]{

	private static final long serialVersionUID = 1L;


    [%
    if (control.~dependObject.isDefined()){%]
    @Override
	public void handleChangeRecord(org.tura.platform.datacontrol.IDataControl dc , Object newCurrentObject) throws org.tura.platform.datacontrol.commons.TuraException{
    [%
      var i = 0;
      for (depend in control.~dependObject){
        if (i <> 0 ){ %],[%}%]
		if (newCurrentObject instanceof [%=depend%]){
            this.handleChangeMusterCurrentRecordNotification(newCurrentObject);
        }else{
            this.handleChangeMusterCurrentRecordNotification(null);
        }
    [%
        i = i+1;
      }
    %] 
	}     
   [%
    }
    %] 


	@javax.inject.Inject
	public void setRoot([%=util.mergeAndCapitalize(control.name)%]DC root)  {
		super.setRoot(root);
		root.setTreeContext(this);
	}

	@Override
	@javax.inject.Inject
	public void setDependency(
			@org.tura.platform.datacontrol.annotations.Dependencies(dependency = { 
    [%
    var i = 0;
    for (depend in control.~dependArray){
     if (i <> 0 ){ %],[%}%]
			@org.tura.platform.datacontrol.annotations.Dependency(expression = "[%=depend%]") 
    [%
     i = i+1;
    }
    %] 
			
			}) java.util.List<org.tura.platform.datacontrol.metainfo.DependecyProperty> dependency) {
		this.dependency = dependency;
	}


}
