[%
import "platform:/plugin/org.tura.metamodel.wizard.generation/template/commons/typeElementUtil.eol";
%]



[% @template
operation  maven_mvc_build_runner(hash) {

    var util = new Native('org.tura.metamodel.commons.Util');
     
    var configuration = hash.get("configuration");
    var component = hash.get("component");
    var path = component.getComponentRoot+"/"+component.getArtifactId;  
    var model_mapper = hash.get("model_mapper");
 %]
[%=mavenBuilder_mavenCleanInstall(configuration, component.getComponentRoot+"/"+component.getArtifactId)%]
[%    

    model_mapper.artifactExecutionString=  os_shell_executor()+" "+path+"/"+"builder."+os_batch_extension();
    util.saveFile( path, "builder."+os_batch_extension(),out.toString());   
}
%]


[% @template
operation  maven_mvc_application_builder(hash) {

    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var alltypes = hash.get("alltypes");

    var util = new Native('org.tura.metamodel.commons.Util');
    var lib = new Native('java.util.HashMap');

     var currentLib = component.getArtifactId()+component.getVersion()+".jar";
     for (type in alltypes){
        type.mappingType2Java(recipe,ingredient);
        if (type.~library <> null and type.~library.equals(currentLib)<>true ){
              lib.put(type.~library,type);
        }
     }

    hash.put("lib",lib);
    util.populateTechnologies(hash,model_mapper);

  
     var builder : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/PrimeFaces/MavenWARBuilder.egl",hash,TemplateFactory);
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
     builder.setFormatter(f);
    
     var path = component.getComponentRoot+"/"+component.getArtifactId;  
     var buffer = builder.process();
     
     util.saveFile( path, "pom.xml",buffer); 

}    
%]

[% @template
operation mvc_deployment(hash){
         war_deployment(hash);     
}
%]

[% @template
operation  ant_maven_mvc_application_builde(hash) {
    
 
}
%]