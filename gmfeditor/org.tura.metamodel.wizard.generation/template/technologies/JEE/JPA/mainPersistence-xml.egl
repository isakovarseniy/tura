[%
 import "platform:/plugin/org.tura.metamodel.wizard.generation/template/commons/typeElementUtil.eol";
  
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var lib = new Native('java.util.HashMap');
     
     

     var type;
     var f = new Native("org.tura.metamodel.wizard.infrastructure.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query type",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 
     types = util.runQuery(model_mapper,"Query package of types",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 

    if (alltypes.size() <> 0 ){
 
       for (type in alltypes){
          type.mappingType2Java(recipe,ingredient);
          if (type.~library <> null)
              lib.put(type.~library,type);
       }
     }
     hash.put("recipe",recipe);
     hash.put("ingredient",ingredient);
     hash.put("component",component);
     hash.put("model_mapper",model_mapper);
     hash.put("configuration",configuration);
     hash.put("types",alltypes);
     hash.put("libraries",lib);

    util.populateTechnologies(hash,model_mapper);

  
     var persistence : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JPA/persistence-xml.egl",hash,TemplateFactory);
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
     persistence.setFormatter(f);
    
     var path = component.getComponentRoot+"/"+component.getArtifactId+"/src/main/resources/META-INF/";  
     var buffer = persistence.process();
     util.saveFile( path, "persistence.xml",buffer); 
 %]

