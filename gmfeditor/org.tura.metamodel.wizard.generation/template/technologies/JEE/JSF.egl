[%
operation  viewgeneration(hash) {
      var form = hash.get("form");   
      var  javaPath =  hash.get("javaPath");  
      var webapp = hash.get("webapp");
      var util = new Native('org.tura.metamodel.commons.Util');
      var allPorts = new Native('java.util.ArrayList'); 
      var actionElements = new Native('java.util.ArrayList'); 
      hash.put("actionElements",actionElements);
      

      for (canvas in form.view.view.canvases){
              if (not canvas.isKindOf(domain::TabCanvas) ){
                  var ports = canvas.viewElement->select(p|p.isKindOf(domain::ViewPort)); 
                   allPorts.addAll(ports);
              }
              canvas.draw(hash);   
      }

 
      hash.put("allPorts",allPorts);
      var f = new Native("org.tura.metamodel.wizard.infrastructure.JavaFormatter");
      var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
             
      var viewportclass : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/viewPortHolderClass.egl",hash,TemplateFactory);
      viewportclass.setFormatter(f);
      var buffer = viewportclass.process();
      util.saveFile( javaPath+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/"  , "ViewPortHolder.java",buffer);  
      
      var expproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/expressionsProducer.egl",hash,TemplateFactory);
      expproducer.setFormatter(f);
      var buffer = expproducer.process();
      util.saveFile( javaPath+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "ExpressionsProducer.java",buffer);  
      
     var viewporttriggerproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.wizard.generation/template/technologies/JEE/JSF/viewPortTriggerProducer.egl",hash,TemplateFactory);
      viewporttriggerproducer.setFormatter(f);
      var buffer = viewporttriggerproducer.process();
      util.saveFile( javaPath+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "ViewPortTriggerProducer.java",buffer);  
 
      web_xml(hash) ;
      actionExecutor(hash);
      scriptGenerator(hash);
}
%]


[%@template
operation domain::Uielement  uiElementAttributes(hash){
%][%=self.styleAttributes(hash)%] [%=self.enabled(hash)%] [%=self.required(hash)%] [%if (hash.get("readonly") <> null){%] readonly="[%=hash.get("readonly")%]"[%}else{%][%=self.readonly(hash)%][%}%]
[%}
%]

[%@template
operation domain::StyleElement  styleAttributes(hash){
      var util = new Native('org.tura.metamodel.commons.Util');
 
     if (self.style <> null  and  self.style.value <> null  ){
        var value = util.apostropheRemover( buildParameterizedExpression(self.style));
     %]style="[%=value%]"[%}

     if (self.styleClass <> null  and self.styleClass.size() <> 0 ){%]styleClass="[%
      var first = 0;
      for (class in self.styleClass ){ 
        if (class.classifier = null or( class.classifier <> null   and class.classifier.hint = null )){
      
          if ( first <> 0){%] [%}
         var value = util.apostropheRemover(buildExpression(class));
         first=1;
         %][%=value%][%}} 
     %]"[%
     }
}
%]

[%
operation domain::StyleElement  styleAttributes(artifactLib:String, artifact: String, classifier : String):String{
      var util = new Native('org.tura.metamodel.commons.Util');
      var value = "";
     if (self.styleClass <> null  and self.styleClass.size() <> 0 ){
      var first = 0;
      for (class in self.styleClass ){ 
         if (class.classifier <> null and class.classifier.findHint(artifactLib,artifact,classifier)){
             if ( first <> 0){value = value+",";}
             value = value + util.apostropheRemover(buildExpression(class));
             first=1;
           }
         } 
     }
     return value;
}
%]


[%@template
operation domain::Uielement  enabled(hash){
     if (self.enabled <> null and self.enabled.value <> null){
         var value = buildParameterizedExpression(self.enabled);
            
     %]enabled="[%=value%]"[%}
}
%]

[%@template
operation domain::Uielement  required(hash){
     if (self.required <> null  and self.required.value <> null){
         var value = buildParameterizedExpression(self.required);
            
     %]required="[%=value%]"[%}
}
%]


[%@template
operation domain::Uielement  readonly(hash){
     if (self.readOnly <> null  and self.readOnly.value <> null){
          var value = buildParameterizedExpression(self.readOnly);
            
     %]readonly="[%=value%]"[%}
}
%]

[%@template
operation domain::Uielement  mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}
%]


[%@template
operation domain::ViewPort  mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}
%]

[%@template
operation domain::CanvasFrame mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}
%]

[%@template
operation domain::ActionTrigger mkuid(){
%]tura[%=self.uid.replaceAll("\\-","_")%][%
}
%]



[%@template
operation domain::Uielement  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}
%]

[%@template
operation domain::CanvasFrame  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}
%]

[%@template
operation domain::ViewPort  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}
%]



