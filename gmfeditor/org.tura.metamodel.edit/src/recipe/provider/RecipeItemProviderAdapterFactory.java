/**
 */
package recipe.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import recipe.util.RecipeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RecipeItemProviderAdapterFactory extends RecipeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecipeItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Recipes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecipesItemProvider recipesItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Recipes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRecipesAdapter()
  {
    if (recipesItemProvider == null)
    {
      recipesItemProvider = new RecipesItemProvider(this);
    }

    return recipesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Recipe} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecipeItemProvider recipeItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Recipe}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRecipeAdapter()
  {
    if (recipeItemProvider == null)
    {
      recipeItemProvider = new RecipeItemProvider(this);
    }

    return recipeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Component} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentItemProvider componentItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Component}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentAdapter()
  {
    if (componentItemProvider == null)
    {
      componentItemProvider = new ComponentItemProvider(this);
    }

    return componentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.ModelMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelMapperItemProvider modelMapperItemProvider;

  /**
   * This creates an adapter for a {@link recipe.ModelMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelMapperAdapter()
  {
    if (modelMapperItemProvider == null)
    {
      modelMapperItemProvider = new ModelMapperItemProvider(this);
    }

    return modelMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Configuration} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationItemProvider configurationItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Configuration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConfigurationAdapter()
  {
    if (configurationItemProvider == null)
    {
      configurationItemProvider = new ConfigurationItemProvider(this);
    }

    return configurationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Property} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyItemProvider propertyItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Property}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyAdapter()
  {
    if (propertyItemProvider == null)
    {
      propertyItemProvider = new PropertyItemProvider(this);
    }

    return propertyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.Specifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecifierItemProvider specifierItemProvider;

  /**
   * This creates an adapter for a {@link recipe.Specifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSpecifierAdapter()
  {
    if (specifierItemProvider == null)
    {
      specifierItemProvider = new SpecifierItemProvider(this);
    }

    return specifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link recipe.ArtifactRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtifactRefItemProvider artifactRefItemProvider;

  /**
   * This creates an adapter for a {@link recipe.ArtifactRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArtifactRefAdapter()
  {
    if (artifactRefItemProvider == null)
    {
      artifactRefItemProvider = new ArtifactRefItemProvider(this);
    }

    return artifactRefItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (recipesItemProvider != null) recipesItemProvider.dispose();
    if (recipeItemProvider != null) recipeItemProvider.dispose();
    if (componentItemProvider != null) componentItemProvider.dispose();
    if (modelMapperItemProvider != null) modelMapperItemProvider.dispose();
    if (configurationItemProvider != null) configurationItemProvider.dispose();
    if (propertyItemProvider != null) propertyItemProvider.dispose();
    if (specifierItemProvider != null) specifierItemProvider.dispose();
    if (artifactRefItemProvider != null) artifactRefItemProvider.dispose();
  }

}
