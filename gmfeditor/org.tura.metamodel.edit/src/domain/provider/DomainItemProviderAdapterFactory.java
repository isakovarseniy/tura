/**
 */
package domain.provider;

import domain.util.DomainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainItemProviderAdapterFactory extends DomainAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Domain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainItemProvider domainItemProvider;

  /**
   * This creates an adapter for a {@link domain.Domain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainAdapter()
  {
    if (domainItemProvider == null)
    {
      domainItemProvider = new DomainItemProvider(this);
    }

    return domainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.HTMLLayerHolder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HTMLLayerHolderItemProvider htmlLayerHolderItemProvider;

  /**
   * This creates an adapter for a {@link domain.HTMLLayerHolder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHTMLLayerHolderAdapter()
  {
    if (htmlLayerHolderItemProvider == null)
    {
      htmlLayerHolderItemProvider = new HTMLLayerHolderItemProvider(this);
    }

    return htmlLayerHolderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Categorized} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CategorizedItemProvider categorizedItemProvider;

  /**
   * This creates an adapter for a {@link domain.Categorized}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCategorizedAdapter()
  {
    if (categorizedItemProvider == null)
    {
      categorizedItemProvider = new CategorizedItemProvider(this);
    }

    return categorizedItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Classifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassifierItemProvider classifierItemProvider;

  /**
   * This creates an adapter for a {@link domain.Classifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassifierAdapter()
  {
    if (classifierItemProvider == null)
    {
      classifierItemProvider = new ClassifierItemProvider(this);
    }

    return classifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainArtifacts} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainArtifactsItemProvider domainArtifactsItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainArtifacts}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainArtifactsAdapter()
  {
    if (domainArtifactsItemProvider == null)
    {
      domainArtifactsItemProvider = new DomainArtifactsItemProvider(this);
    }

    return domainArtifactsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainTypes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainTypesItemProvider domainTypesItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainTypes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainTypesAdapter()
  {
    if (domainTypesItemProvider == null)
    {
      domainTypesItemProvider = new DomainTypesItemProvider(this);
    }

    return domainTypesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainApplications} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainApplicationsItemProvider domainApplicationsItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainApplications}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainApplicationsAdapter()
  {
    if (domainApplicationsItemProvider == null)
    {
      domainApplicationsItemProvider = new DomainApplicationsItemProvider(this);
    }

    return domainApplicationsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainApplication} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainApplicationItemProvider domainApplicationItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainApplication}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainApplicationAdapter()
  {
    if (domainApplicationItemProvider == null)
    {
      domainApplicationItemProvider = new DomainApplicationItemProvider(this);
    }

    return domainApplicationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainArtifact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainArtifactItemProvider domainArtifactItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainArtifact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainArtifactAdapter()
  {
    if (domainArtifactItemProvider == null)
    {
      domainArtifactItemProvider = new DomainArtifactItemProvider(this);
    }

    return domainArtifactItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ORMEntity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ORMEntityItemProvider ormEntityItemProvider;

  /**
   * This creates an adapter for a {@link domain.ORMEntity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createORMEntityAdapter()
  {
    if (ormEntityItemProvider == null)
    {
      ormEntityItemProvider = new ORMEntityItemProvider(this);
    }

    return ormEntityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.JPAService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JPAServiceItemProvider jpaServiceItemProvider;

  /**
   * This creates an adapter for a {@link domain.JPAService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJPAServiceAdapter()
  {
    if (jpaServiceItemProvider == null)
    {
      jpaServiceItemProvider = new JPAServiceItemProvider(this);
    }

    return jpaServiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.EJBService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EJBServiceItemProvider ejbServiceItemProvider;

  /**
   * This creates an adapter for a {@link domain.EJBService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEJBServiceAdapter()
  {
    if (ejbServiceItemProvider == null)
    {
      ejbServiceItemProvider = new EJBServiceItemProvider(this);
    }

    return ejbServiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ContinuousIintegration} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContinuousIintegrationItemProvider continuousIintegrationItemProvider;

  /**
   * This creates an adapter for a {@link domain.ContinuousIintegration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContinuousIintegrationAdapter()
  {
    if (continuousIintegrationItemProvider == null)
    {
      continuousIintegrationItemProvider = new ContinuousIintegrationItemProvider(this);
    }

    return continuousIintegrationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Artifacts} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtifactsItemProvider artifactsItemProvider;

  /**
   * This creates an adapter for a {@link domain.Artifacts}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArtifactsAdapter()
  {
    if (artifactsItemProvider == null)
    {
      artifactsItemProvider = new ArtifactsItemProvider(this);
    }

    return artifactsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Artifact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtifactItemProvider artifactItemProvider;

  /**
   * This creates an adapter for a {@link domain.Artifact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArtifactAdapter()
  {
    if (artifactItemProvider == null)
    {
      artifactItemProvider = new ArtifactItemProvider(this);
    }

    return artifactItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.GenerationHint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenerationHintItemProvider generationHintItemProvider;

  /**
   * This creates an adapter for a {@link domain.GenerationHint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGenerationHintAdapter()
  {
    if (generationHintItemProvider == null)
    {
      generationHintItemProvider = new GenerationHintItemProvider(this);
    }

    return generationHintItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ConfigVariable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigVariableItemProvider configVariableItemProvider;

  /**
   * This creates an adapter for a {@link domain.ConfigVariable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConfigVariableAdapter()
  {
    if (configVariableItemProvider == null)
    {
      configVariableItemProvider = new ConfigVariableItemProvider(this);
    }

    return configVariableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ModelQuery} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelQueryItemProvider modelQueryItemProvider;

  /**
   * This creates an adapter for a {@link domain.ModelQuery}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelQueryAdapter()
  {
    if (modelQueryItemProvider == null)
    {
      modelQueryItemProvider = new ModelQueryItemProvider(this);
    }

    return modelQueryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.QueryParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryParameterItemProvider queryParameterItemProvider;

  /**
   * This creates an adapter for a {@link domain.QueryParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQueryParameterAdapter()
  {
    if (queryParameterItemProvider == null)
    {
      queryParameterItemProvider = new QueryParameterItemProvider(this);
    }

    return queryParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Specifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecifierItemProvider specifierItemProvider;

  /**
   * This creates an adapter for a {@link domain.Specifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSpecifierAdapter()
  {
    if (specifierItemProvider == null)
    {
      specifierItemProvider = new SpecifierItemProvider(this);
    }

    return specifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Option} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptionItemProvider optionItemProvider;

  /**
   * This creates an adapter for a {@link domain.Option}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOptionAdapter()
  {
    if (optionItemProvider == null)
    {
      optionItemProvider = new OptionItemProvider(this);
    }

    return optionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Application} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationItemProvider applicationItemProvider;

  /**
   * This creates an adapter for a {@link domain.Application}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationAdapter()
  {
    if (applicationItemProvider == null)
    {
      applicationItemProvider = new ApplicationItemProvider(this);
    }

    return applicationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationMessages} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationMessagesItemProvider applicationMessagesItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationMessages}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationMessagesAdapter()
  {
    if (applicationMessagesItemProvider == null)
    {
      applicationMessagesItemProvider = new ApplicationMessagesItemProvider(this);
    }

    return applicationMessagesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationRole} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationRoleItemProvider applicationRoleItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationRole}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationRoleAdapter()
  {
    if (applicationRoleItemProvider == null)
    {
      applicationRoleItemProvider = new ApplicationRoleItemProvider(this);
    }

    return applicationRoleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationStyle} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationStyleItemProvider applicationStyleItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationStyle}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationStyleAdapter()
  {
    if (applicationStyleItemProvider == null)
    {
      applicationStyleItemProvider = new ApplicationStyleItemProvider(this);
    }

    return applicationStyleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.StylesPackage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StylesPackageItemProvider stylesPackageItemProvider;

  /**
   * This creates an adapter for a {@link domain.StylesPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStylesPackageAdapter()
  {
    if (stylesPackageItemProvider == null)
    {
      stylesPackageItemProvider = new StylesPackageItemProvider(this);
    }

    return stylesPackageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationUILayer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationUILayerItemProvider applicationUILayerItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationUILayer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationUILayerAdapter()
  {
    if (applicationUILayerItemProvider == null)
    {
      applicationUILayerItemProvider = new ApplicationUILayerItemProvider(this);
    }

    return applicationUILayerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationUIPackage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationUIPackageItemProvider applicationUIPackageItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationUIPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationUIPackageAdapter()
  {
    if (applicationUIPackageItemProvider == null)
    {
      applicationUIPackageItemProvider = new ApplicationUIPackageItemProvider(this);
    }

    return applicationUIPackageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationRecipes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationRecipesItemProvider applicationRecipesItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationRecipes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationRecipesAdapter()
  {
    if (applicationRecipesItemProvider == null)
    {
      applicationRecipesItemProvider = new ApplicationRecipesItemProvider(this);
    }

    return applicationRecipesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationRecipe} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationRecipeItemProvider applicationRecipeItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationRecipe}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationRecipeAdapter()
  {
    if (applicationRecipeItemProvider == null)
    {
      applicationRecipeItemProvider = new ApplicationRecipeItemProvider(this);
    }

    return applicationRecipeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationMappers} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationMappersItemProvider applicationMappersItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationMappers}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationMappersAdapter()
  {
    if (applicationMappersItemProvider == null)
    {
      applicationMappersItemProvider = new ApplicationMappersItemProvider(this);
    }

    return applicationMappersItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationMapperItemProvider applicationMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationMapperAdapter()
  {
    if (applicationMapperItemProvider == null)
    {
      applicationMapperItemProvider = new ApplicationMapperItemProvider(this);
    }

    return applicationMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.MethodPointer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodPointerItemProvider methodPointerItemProvider;

  /**
   * This creates an adapter for a {@link domain.MethodPointer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMethodPointerAdapter()
  {
    if (methodPointerItemProvider == null)
    {
      methodPointerItemProvider = new MethodPointerItemProvider(this);
    }

    return methodPointerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Messages} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessagesItemProvider messagesItemProvider;

  /**
   * This creates an adapter for a {@link domain.Messages}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessagesAdapter()
  {
    if (messagesItemProvider == null)
    {
      messagesItemProvider = new MessagesItemProvider(this);
    }

    return messagesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.MessageLibrary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageLibraryItemProvider messageLibraryItemProvider;

  /**
   * This creates an adapter for a {@link domain.MessageLibrary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessageLibraryAdapter()
  {
    if (messageLibraryItemProvider == null)
    {
      messageLibraryItemProvider = new MessageLibraryItemProvider(this);
    }

    return messageLibraryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.LanguageRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LanguageRefItemProvider languageRefItemProvider;

  /**
   * This creates an adapter for a {@link domain.LanguageRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLanguageRefAdapter()
  {
    if (languageRefItemProvider == null)
    {
      languageRefItemProvider = new LanguageRefItemProvider(this);
    }

    return languageRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Message} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageItemProvider messageItemProvider;

  /**
   * This creates an adapter for a {@link domain.Message}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessageAdapter()
  {
    if (messageItemProvider == null)
    {
      messageItemProvider = new MessageItemProvider(this);
    }

    return messageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Translation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TranslationItemProvider translationItemProvider;

  /**
   * This creates an adapter for a {@link domain.Translation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTranslationAdapter()
  {
    if (translationItemProvider == null)
    {
      translationItemProvider = new TranslationItemProvider(this);
    }

    return translationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Language} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LanguageItemProvider languageItemProvider;

  /**
   * This creates an adapter for a {@link domain.Language}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLanguageAdapter()
  {
    if (languageItemProvider == null)
    {
      languageItemProvider = new LanguageItemProvider(this);
    }

    return languageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Roles} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RolesItemProvider rolesItemProvider;

  /**
   * This creates an adapter for a {@link domain.Roles}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRolesAdapter()
  {
    if (rolesItemProvider == null)
    {
      rolesItemProvider = new RolesItemProvider(this);
    }

    return rolesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Role} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoleItemProvider roleItemProvider;

  /**
   * This creates an adapter for a {@link domain.Role}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRoleAdapter()
  {
    if (roleItemProvider == null)
    {
      roleItemProvider = new RoleItemProvider(this);
    }

    return roleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Group} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupItemProvider groupItemProvider;

  /**
   * This creates an adapter for a {@link domain.Group}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGroupAdapter()
  {
    if (groupItemProvider == null)
    {
      groupItemProvider = new GroupItemProvider(this);
    }

    return groupItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Styles} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StylesItemProvider stylesItemProvider;

  /**
   * This creates an adapter for a {@link domain.Styles}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStylesAdapter()
  {
    if (stylesItemProvider == null)
    {
      stylesItemProvider = new StylesItemProvider(this);
    }

    return stylesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.StyleLibrary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StyleLibraryItemProvider styleLibraryItemProvider;

  /**
   * This creates an adapter for a {@link domain.StyleLibrary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStyleLibraryAdapter()
  {
    if (styleLibraryItemProvider == null)
    {
      styleLibraryItemProvider = new StyleLibraryItemProvider(this);
    }

    return styleLibraryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.StyleSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StyleSetItemProvider styleSetItemProvider;

  /**
   * This creates an adapter for a {@link domain.StyleSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStyleSetAdapter()
  {
    if (styleSetItemProvider == null)
    {
      styleSetItemProvider = new StyleSetItemProvider(this);
    }

    return styleSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Mappers} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappersItemProvider mappersItemProvider;

  /**
   * This creates an adapter for a {@link domain.Mappers}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMappersAdapter()
  {
    if (mappersItemProvider == null)
    {
      mappersItemProvider = new MappersItemProvider(this);
    }

    return mappersItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Mapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapperItemProvider mapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.Mapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMapperAdapter()
  {
    if (mapperItemProvider == null)
    {
      mapperItemProvider = new MapperItemProvider(this);
    }

    return mapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypeMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeMapperItemProvider typeMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypeMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeMapperAdapter()
  {
    if (typeMapperItemProvider == null)
    {
      typeMapperItemProvider = new TypeMapperItemProvider(this);
    }

    return typeMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.JavaMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JavaMapperItemProvider javaMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.JavaMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJavaMapperAdapter()
  {
    if (javaMapperItemProvider == null)
    {
      javaMapperItemProvider = new JavaMapperItemProvider(this);
    }

    return javaMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.JavaScriptMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JavaScriptMapperItemProvider javaScriptMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.JavaScriptMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJavaScriptMapperAdapter()
  {
    if (javaScriptMapperItemProvider == null)
    {
      javaScriptMapperItemProvider = new JavaScriptMapperItemProvider(this);
    }

    return javaScriptMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.CSSMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CSSMapperItemProvider cssMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.CSSMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCSSMapperAdapter()
  {
    if (cssMapperItemProvider == null)
    {
      cssMapperItemProvider = new CSSMapperItemProvider(this);
    }

    return cssMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.RoleMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoleMapperItemProvider roleMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.RoleMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRoleMapperAdapter()
  {
    if (roleMapperItemProvider == null)
    {
      roleMapperItemProvider = new RoleMapperItemProvider(this);
    }

    return roleMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Recipes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecipesItemProvider recipesItemProvider;

  /**
   * This creates an adapter for a {@link domain.Recipes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRecipesAdapter()
  {
    if (recipesItemProvider == null)
    {
      recipesItemProvider = new RecipesItemProvider(this);
    }

    return recipesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DeploymentSequence} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentSequenceItemProvider deploymentSequenceItemProvider;

  /**
   * This creates an adapter for a {@link domain.DeploymentSequence}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentSequenceAdapter()
  {
    if (deploymentSequenceItemProvider == null)
    {
      deploymentSequenceItemProvider = new DeploymentSequenceItemProvider(this);
    }

    return deploymentSequenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DeploymentComponents} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentComponentsItemProvider deploymentComponentsItemProvider;

  /**
   * This creates an adapter for a {@link domain.DeploymentComponents}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentComponentsAdapter()
  {
    if (deploymentComponentsItemProvider == null)
    {
      deploymentComponentsItemProvider = new DeploymentComponentsItemProvider(this);
    }

    return deploymentComponentsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DeploymentComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentComponentItemProvider deploymentComponentItemProvider;

  /**
   * This creates an adapter for a {@link domain.DeploymentComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentComponentAdapter()
  {
    if (deploymentComponentItemProvider == null)
    {
      deploymentComponentItemProvider = new DeploymentComponentItemProvider(this);
    }

    return deploymentComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DeploymentStarStep} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentStarStepItemProvider deploymentStarStepItemProvider;

  /**
   * This creates an adapter for a {@link domain.DeploymentStarStep}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeploymentStarStepAdapter()
  {
    if (deploymentStarStepItemProvider == null)
    {
      deploymentStarStepItemProvider = new DeploymentStarStepItemProvider(this);
    }

    return deploymentStarStepItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.UsingMappers} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UsingMappersItemProvider usingMappersItemProvider;

  /**
   * This creates an adapter for a {@link domain.UsingMappers}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUsingMappersAdapter()
  {
    if (usingMappersItemProvider == null)
    {
      usingMappersItemProvider = new UsingMappersItemProvider(this);
    }

    return usingMappersItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Recipe} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecipeItemProvider recipeItemProvider;

  /**
   * This creates an adapter for a {@link domain.Recipe}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRecipeAdapter()
  {
    if (recipeItemProvider == null)
    {
      recipeItemProvider = new RecipeItemProvider(this);
    }

    return recipeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Ingredient} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IngredientItemProvider ingredientItemProvider;

  /**
   * This creates an adapter for a {@link domain.Ingredient}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIngredientAdapter()
  {
    if (ingredientItemProvider == null)
    {
      ingredientItemProvider = new IngredientItemProvider(this);
    }

    return ingredientItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Component} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentItemProvider componentItemProvider;

  /**
   * This creates an adapter for a {@link domain.Component}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentAdapter()
  {
    if (componentItemProvider == null)
    {
      componentItemProvider = new ComponentItemProvider(this);
    }

    return componentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.JavaComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JavaComponentItemProvider javaComponentItemProvider;

  /**
   * This creates an adapter for a {@link domain.JavaComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJavaComponentAdapter()
  {
    if (javaComponentItemProvider == null)
    {
      javaComponentItemProvider = new JavaComponentItemProvider(this);
    }

    return javaComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Infrastructure} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InfrastructureItemProvider infrastructureItemProvider;

  /**
   * This creates an adapter for a {@link domain.Infrastructure}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInfrastructureAdapter()
  {
    if (infrastructureItemProvider == null)
    {
      infrastructureItemProvider = new InfrastructureItemProvider(this);
    }

    return infrastructureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Configuration} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationItemProvider configurationItemProvider;

  /**
   * This creates an adapter for a {@link domain.Configuration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConfigurationAdapter()
  {
    if (configurationItemProvider == null)
    {
      configurationItemProvider = new ConfigurationItemProvider(this);
    }

    return configurationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ModelMapper} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelMapperItemProvider modelMapperItemProvider;

  /**
   * This creates an adapter for a {@link domain.ModelMapper}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelMapperAdapter()
  {
    if (modelMapperItemProvider == null)
    {
      modelMapperItemProvider = new ModelMapperItemProvider(this);
    }

    return modelMapperItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Property} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyItemProvider propertyItemProvider;

  /**
   * This creates an adapter for a {@link domain.Property}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyAdapter()
  {
    if (propertyItemProvider == null)
    {
      propertyItemProvider = new PropertyItemProvider(this);
    }

    return propertyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.MappingSpecifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingSpecifierItemProvider mappingSpecifierItemProvider;

  /**
   * This creates an adapter for a {@link domain.MappingSpecifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMappingSpecifierAdapter()
  {
    if (mappingSpecifierItemProvider == null)
    {
      mappingSpecifierItemProvider = new MappingSpecifierItemProvider(this);
    }

    return mappingSpecifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Query} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryItemProvider queryItemProvider;

  /**
   * This creates an adapter for a {@link domain.Query}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQueryAdapter()
  {
    if (queryItemProvider == null)
    {
      queryItemProvider = new QueryItemProvider(this);
    }

    return queryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.QueryVariable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryVariableItemProvider queryVariableItemProvider;

  /**
   * This creates an adapter for a {@link domain.QueryVariable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQueryVariableAdapter()
  {
    if (queryVariableItemProvider == null)
    {
      queryVariableItemProvider = new QueryVariableItemProvider(this);
    }

    return queryVariableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ArtifactRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtifactRefItemProvider artifactRefItemProvider;

  /**
   * This creates an adapter for a {@link domain.ArtifactRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArtifactRefAdapter()
  {
    if (artifactRefItemProvider == null)
    {
      artifactRefItemProvider = new ArtifactRefItemProvider(this);
    }

    return artifactRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypePointer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypePointerItemProvider typePointerItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypePointer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypePointerAdapter()
  {
    if (typePointerItemProvider == null)
    {
      typePointerItemProvider = new TypePointerItemProvider(this);
    }

    return typePointerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypeDefinition} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeDefinitionItemProvider typeDefinitionItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypeDefinition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeDefinitionAdapter()
  {
    if (typeDefinitionItemProvider == null)
    {
      typeDefinitionItemProvider = new TypeDefinitionItemProvider(this);
    }

    return typeDefinitionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypeElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeElementItemProvider typeElementItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypeElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeElementAdapter()
  {
    if (typeElementItemProvider == null)
    {
      typeElementItemProvider = new TypeElementItemProvider(this);
    }

    return typeElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Primitive} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimitiveItemProvider primitiveItemProvider;

  /**
   * This creates an adapter for a {@link domain.Primitive}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPrimitiveAdapter()
  {
    if (primitiveItemProvider == null)
    {
      primitiveItemProvider = new PrimitiveItemProvider(this);
    }

    return primitiveItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Type} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeItemProvider typeItemProvider;

  /**
   * This creates an adapter for a {@link domain.Type}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeAdapter()
  {
    if (typeItemProvider == null)
    {
      typeItemProvider = new TypeItemProvider(this);
    }

    return typeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypeReference} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeReferenceItemProvider typeReferenceItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypeReference}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeReferenceAdapter()
  {
    if (typeReferenceItemProvider == null)
    {
      typeReferenceItemProvider = new TypeReferenceItemProvider(this);
    }

    return typeReferenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypeExtension} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeExtensionItemProvider typeExtensionItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypeExtension}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeExtensionAdapter()
  {
    if (typeExtensionItemProvider == null)
    {
      typeExtensionItemProvider = new TypeExtensionItemProvider(this);
    }

    return typeExtensionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Attribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link domain.Attribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter()
  {
    if (attributeItemProvider == null)
    {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Operation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationItemProvider operationItemProvider;

  /**
   * This creates an adapter for a {@link domain.Operation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOperationAdapter()
  {
    if (operationItemProvider == null)
    {
      operationItemProvider = new OperationItemProvider(this);
    }

    return operationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Parameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link domain.Parameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterAdapter()
  {
    if (parameterItemProvider == null)
    {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ReturnValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReturnValueItemProvider returnValueItemProvider;

  /**
   * This creates an adapter for a {@link domain.ReturnValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createReturnValueAdapter()
  {
    if (returnValueItemProvider == null)
    {
      returnValueItemProvider = new ReturnValueItemProvider(this);
    }

    return returnValueItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Enumarator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumaratorItemProvider enumaratorItemProvider;

  /**
   * This creates an adapter for a {@link domain.Enumarator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnumaratorAdapter()
  {
    if (enumaratorItemProvider == null)
    {
      enumaratorItemProvider = new EnumaratorItemProvider(this);
    }

    return enumaratorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.EnumAttribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumAttributeItemProvider enumAttributeItemProvider;

  /**
   * This creates an adapter for a {@link domain.EnumAttribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnumAttributeAdapter()
  {
    if (enumAttributeItemProvider == null)
    {
      enumAttributeItemProvider = new EnumAttributeItemProvider(this);
    }

    return enumAttributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TypesRepository} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypesRepositoryItemProvider typesRepositoryItemProvider;

  /**
   * This creates an adapter for a {@link domain.TypesRepository}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypesRepositoryAdapter()
  {
    if (typesRepositoryItemProvider == null)
    {
      typesRepositoryItemProvider = new TypesRepositoryItemProvider(this);
    }

    return typesRepositoryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Types} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypesItemProvider typesItemProvider;

  /**
   * This creates an adapter for a {@link domain.Types}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypesAdapter()
  {
    if (typesItemProvider == null)
    {
      typesItemProvider = new TypesItemProvider(this);
    }

    return typesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Package} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PackageItemProvider packageItemProvider;

  /**
   * This creates an adapter for a {@link domain.Package}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPackageAdapter()
  {
    if (packageItemProvider == null)
    {
      packageItemProvider = new PackageItemProvider(this);
    }

    return packageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.UIPackage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UIPackageItemProvider uiPackageItemProvider;

  /**
   * This creates an adapter for a {@link domain.UIPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUIPackageAdapter()
  {
    if (uiPackageItemProvider == null)
    {
      uiPackageItemProvider = new UIPackageItemProvider(this);
    }

    return uiPackageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Form} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormItemProvider formItemProvider;

  /**
   * This creates an adapter for a {@link domain.Form}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFormAdapter()
  {
    if (formItemProvider == null)
    {
      formItemProvider = new FormItemProvider(this);
    }

    return formItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.FormParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormParameterItemProvider formParameterItemProvider;

  /**
   * This creates an adapter for a {@link domain.FormParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFormParameterAdapter()
  {
    if (formParameterItemProvider == null)
    {
      formParameterItemProvider = new FormParameterItemProvider(this);
    }

    return formParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.FormView} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormViewItemProvider formViewItemProvider;

  /**
   * This creates an adapter for a {@link domain.FormView}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFormViewAdapter()
  {
    if (formViewItemProvider == null)
    {
      formViewItemProvider = new FormViewItemProvider(this);
    }

    return formViewItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Views} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewsItemProvider viewsItemProvider;

  /**
   * This creates an adapter for a {@link domain.Views}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewsAdapter()
  {
    if (viewsItemProvider == null)
    {
      viewsItemProvider = new ViewsItemProvider(this);
    }

    return viewsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Orderable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrderableItemProvider orderableItemProvider;

  /**
   * This creates an adapter for a {@link domain.Orderable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOrderableAdapter()
  {
    if (orderableItemProvider == null)
    {
      orderableItemProvider = new OrderableItemProvider(this);
    }

    return orderableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.MultiLangLabel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiLangLabelItemProvider multiLangLabelItemProvider;

  /**
   * This creates an adapter for a {@link domain.MultiLangLabel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMultiLangLabelAdapter()
  {
    if (multiLangLabelItemProvider == null)
    {
      multiLangLabelItemProvider = new MultiLangLabelItemProvider(this);
    }

    return multiLangLabelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.CanvasFrame} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CanvasFrameItemProvider canvasFrameItemProvider;

  /**
   * This creates an adapter for a {@link domain.CanvasFrame}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCanvasFrameAdapter()
  {
    if (canvasFrameItemProvider == null)
    {
      canvasFrameItemProvider = new CanvasFrameItemProvider(this);
    }

    return canvasFrameItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewPortHolder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewPortHolderItemProvider viewPortHolderItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewPortHolder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewPortHolderAdapter()
  {
    if (viewPortHolderItemProvider == null)
    {
      viewPortHolderItemProvider = new ViewPortHolderItemProvider(this);
    }

    return viewPortHolderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DefaultCavas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DefaultCavasItemProvider defaultCavasItemProvider;

  /**
   * This creates an adapter for a {@link domain.DefaultCavas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDefaultCavasAdapter()
  {
    if (defaultCavasItemProvider == null)
    {
      defaultCavasItemProvider = new DefaultCavasItemProvider(this);
    }

    return defaultCavasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewElementItemProvider viewElementItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewElementAdapter()
  {
    if (viewElementItemProvider == null)
    {
      viewElementItemProvider = new ViewElementItemProvider(this);
    }

    return viewElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PopupCanvas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PopupCanvasItemProvider popupCanvasItemProvider;

  /**
   * This creates an adapter for a {@link domain.PopupCanvas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPopupCanvasAdapter()
  {
    if (popupCanvasItemProvider == null)
    {
      popupCanvasItemProvider = new PopupCanvasItemProvider(this);
    }

    return popupCanvasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Canvas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CanvasItemProvider canvasItemProvider;

  /**
   * This creates an adapter for a {@link domain.Canvas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCanvasAdapter()
  {
    if (canvasItemProvider == null)
    {
      canvasItemProvider = new CanvasItemProvider(this);
    }

    return canvasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Window} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WindowItemProvider windowItemProvider;

  /**
   * This creates an adapter for a {@link domain.Window}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWindowAdapter()
  {
    if (windowItemProvider == null)
    {
      windowItemProvider = new WindowItemProvider(this);
    }

    return windowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TabCanvas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TabCanvasItemProvider tabCanvasItemProvider;

  /**
   * This creates an adapter for a {@link domain.TabCanvas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTabCanvasAdapter()
  {
    if (tabCanvasItemProvider == null)
    {
      tabCanvasItemProvider = new TabCanvasItemProvider(this);
    }

    return tabCanvasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TabPage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TabPageItemProvider tabPageItemProvider;

  /**
   * This creates an adapter for a {@link domain.TabPage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTabPageAdapter()
  {
    if (tabPageItemProvider == null)
    {
      tabPageItemProvider = new TabPageItemProvider(this);
    }

    return tabPageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewPort} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewPortItemProvider viewPortItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewPort}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewPortAdapter()
  {
    if (viewPortItemProvider == null)
    {
      viewPortItemProvider = new ViewPortItemProvider(this);
    }

    return viewPortItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewArea} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewAreaItemProvider viewAreaItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewArea}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewAreaAdapter()
  {
    if (viewAreaItemProvider == null)
    {
      viewAreaItemProvider = new ViewAreaItemProvider(this);
    }

    return viewAreaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewPortTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewPortTriggerItemProvider viewPortTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewPortTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewPortTriggerAdapter()
  {
    if (viewPortTriggerItemProvider == null)
    {
      viewPortTriggerItemProvider = new ViewPortTriggerItemProvider(this);
    }

    return viewPortTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ViewInheritance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewInheritanceItemProvider viewInheritanceItemProvider;

  /**
   * This creates an adapter for a {@link domain.ViewInheritance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createViewInheritanceAdapter()
  {
    if (viewInheritanceItemProvider == null)
    {
      viewInheritanceItemProvider = new ViewInheritanceItemProvider(this);
    }

    return viewInheritanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.TabPagesInheritance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TabPagesInheritanceItemProvider tabPagesInheritanceItemProvider;

  /**
   * This creates an adapter for a {@link domain.TabPagesInheritance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTabPagesInheritanceAdapter()
  {
    if (tabPagesInheritanceItemProvider == null)
    {
      tabPagesInheritanceItemProvider = new TabPagesInheritanceItemProvider(this);
    }

    return tabPagesInheritanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.FormDataControls} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormDataControlsItemProvider formDataControlsItemProvider;

  /**
   * This creates an adapter for a {@link domain.FormDataControls}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFormDataControlsAdapter()
  {
    if (formDataControlsItemProvider == null)
    {
      formDataControlsItemProvider = new FormDataControlsItemProvider(this);
    }

    return formDataControlsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.CanvasView} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CanvasViewItemProvider canvasViewItemProvider;

  /**
   * This creates an adapter for a {@link domain.CanvasView}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCanvasViewAdapter()
  {
    if (canvasViewItemProvider == null)
    {
      canvasViewItemProvider = new CanvasViewItemProvider(this);
    }

    return canvasViewItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ChildrenHolder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChildrenHolderItemProvider childrenHolderItemProvider;

  /**
   * This creates an adapter for a {@link domain.ChildrenHolder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChildrenHolderAdapter()
  {
    if (childrenHolderItemProvider == null)
    {
      childrenHolderItemProvider = new ChildrenHolderItemProvider(this);
    }

    return childrenHolderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ContextParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextParameterItemProvider contextParameterItemProvider;

  /**
   * This creates an adapter for a {@link domain.ContextParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextParameterAdapter()
  {
    if (contextParameterItemProvider == null)
    {
      contextParameterItemProvider = new ContextParameterItemProvider(this);
    }

    return contextParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ContextValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextValueItemProvider contextValueItemProvider;

  /**
   * This creates an adapter for a {@link domain.ContextValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextValueAdapter()
  {
    if (contextValueItemProvider == null)
    {
      contextValueItemProvider = new ContextValueItemProvider(this);
    }

    return contextValueItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ExpressionPart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionPartItemProvider expressionPartItemProvider;

  /**
   * This creates an adapter for a {@link domain.ExpressionPart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExpressionPartAdapter()
  {
    if (expressionPartItemProvider == null)
    {
      expressionPartItemProvider = new ExpressionPartItemProvider(this);
    }

    return expressionPartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ContextParameters} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextParametersItemProvider contextParametersItemProvider;

  /**
   * This creates an adapter for a {@link domain.ContextParameters}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextParametersAdapter()
  {
    if (contextParametersItemProvider == null)
    {
      contextParametersItemProvider = new ContextParametersItemProvider(this);
    }

    return contextParametersItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Context} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextItemProvider contextItemProvider;

  /**
   * This creates an adapter for a {@link domain.Context}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextAdapter()
  {
    if (contextItemProvider == null)
    {
      contextItemProvider = new ContextItemProvider(this);
    }

    return contextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.StyleElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StyleElementItemProvider styleElementItemProvider;

  /**
   * This creates an adapter for a {@link domain.StyleElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStyleElementAdapter()
  {
    if (styleElementItemProvider == null)
    {
      styleElementItemProvider = new StyleElementItemProvider(this);
    }

    return styleElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.StyleClass} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StyleClassItemProvider styleClassItemProvider;

  /**
   * This creates an adapter for a {@link domain.StyleClass}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStyleClassAdapter()
  {
    if (styleClassItemProvider == null)
    {
      styleClassItemProvider = new StyleClassItemProvider(this);
    }

    return styleClassItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.NickNamed} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NickNamedItemProvider nickNamedItemProvider;

  /**
   * This creates an adapter for a {@link domain.NickNamed}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNickNamedAdapter()
  {
    if (nickNamedItemProvider == null)
    {
      nickNamedItemProvider = new NickNamedItemProvider(this);
    }

    return nickNamedItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Uielement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UielementItemProvider uielementItemProvider;

  /**
   * This creates an adapter for a {@link domain.Uielement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUielementAdapter()
  {
    if (uielementItemProvider == null)
    {
      uielementItemProvider = new UielementItemProvider(this);
    }

    return uielementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.SourcesPointer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SourcesPointerItemProvider sourcesPointerItemProvider;

  /**
   * This creates an adapter for a {@link domain.SourcesPointer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSourcesPointerAdapter()
  {
    if (sourcesPointerItemProvider == null)
    {
      sourcesPointerItemProvider = new SourcesPointerItemProvider(this);
    }

    return sourcesPointerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ActionElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionElementItemProvider actionElementItemProvider;

  /**
   * This creates an adapter for a {@link domain.ActionElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionElementAdapter()
  {
    if (actionElementItemProvider == null)
    {
      actionElementItemProvider = new ActionElementItemProvider(this);
    }

    return actionElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ActionTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionTriggerItemProvider actionTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.ActionTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionTriggerAdapter()
  {
    if (actionTriggerItemProvider == null)
    {
      actionTriggerItemProvider = new ActionTriggerItemProvider(this);
    }

    return actionTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InputElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputElementItemProvider inputElementItemProvider;

  /**
   * This creates an adapter for a {@link domain.InputElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInputElementAdapter()
  {
    if (inputElementItemProvider == null)
    {
      inputElementItemProvider = new InputElementItemProvider(this);
    }

    return inputElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Selection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectionItemProvider selectionItemProvider;

  /**
   * This creates an adapter for a {@link domain.Selection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSelectionAdapter()
  {
    if (selectionItemProvider == null)
    {
      selectionItemProvider = new SelectionItemProvider(this);
    }

    return selectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.OptionSelection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptionSelectionItemProvider optionSelectionItemProvider;

  /**
   * This creates an adapter for a {@link domain.OptionSelection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOptionSelectionAdapter()
  {
    if (optionSelectionItemProvider == null)
    {
      optionSelectionItemProvider = new OptionSelectionItemProvider(this);
    }

    return optionSelectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.LayerHolder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LayerHolderItemProvider layerHolderItemProvider;

  /**
   * This creates an adapter for a {@link domain.LayerHolder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLayerHolderAdapter()
  {
    if (layerHolderItemProvider == null)
    {
      layerHolderItemProvider = new LayerHolderItemProvider(this);
    }

    return layerHolderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InputText} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputTextItemProvider inputTextItemProvider;

  /**
   * This creates an adapter for a {@link domain.InputText}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInputTextAdapter()
  {
    if (inputTextItemProvider == null)
    {
      inputTextItemProvider = new InputTextItemProvider(this);
    }

    return inputTextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Label} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LabelItemProvider labelItemProvider;

  /**
   * This creates an adapter for a {@link domain.Label}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLabelAdapter()
  {
    if (labelItemProvider == null)
    {
      labelItemProvider = new LabelItemProvider(this);
    }

    return labelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.OutputText} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutputTextItemProvider outputTextItemProvider;

  /**
   * This creates an adapter for a {@link domain.OutputText}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOutputTextAdapter()
  {
    if (outputTextItemProvider == null)
    {
      outputTextItemProvider = new OutputTextItemProvider(this);
    }

    return outputTextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.CheckBox} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckBoxItemProvider checkBoxItemProvider;

  /**
   * This creates an adapter for a {@link domain.CheckBox}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCheckBoxAdapter()
  {
    if (checkBoxItemProvider == null)
    {
      checkBoxItemProvider = new CheckBoxItemProvider(this);
    }

    return checkBoxItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DropDownSelection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DropDownSelectionItemProvider dropDownSelectionItemProvider;

  /**
   * This creates an adapter for a {@link domain.DropDownSelection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDropDownSelectionAdapter()
  {
    if (dropDownSelectionItemProvider == null)
    {
      dropDownSelectionItemProvider = new DropDownSelectionItemProvider(this);
    }

    return dropDownSelectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Image} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImageItemProvider imageItemProvider;

  /**
   * This creates an adapter for a {@link domain.Image}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImageAdapter()
  {
    if (imageItemProvider == null)
    {
      imageItemProvider = new ImageItemProvider(this);
    }

    return imageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Date} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DateItemProvider dateItemProvider;

  /**
   * This creates an adapter for a {@link domain.Date}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDateAdapter()
  {
    if (dateItemProvider == null)
    {
      dateItemProvider = new DateItemProvider(this);
    }

    return dateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Column} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColumnItemProvider columnItemProvider;

  /**
   * This creates an adapter for a {@link domain.Column}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createColumnAdapter()
  {
    if (columnItemProvider == null)
    {
      columnItemProvider = new ColumnItemProvider(this);
    }

    return columnItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Table} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableItemProvider tableItemProvider;

  /**
   * This creates an adapter for a {@link domain.Table}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTableAdapter()
  {
    if (tableItemProvider == null)
    {
      tableItemProvider = new TableItemProvider(this);
    }

    return tableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Tree} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TreeItemProvider treeItemProvider;

  /**
   * This creates an adapter for a {@link domain.Tree}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTreeAdapter()
  {
    if (treeItemProvider == null)
    {
      treeItemProvider = new TreeItemProvider(this);
    }

    return treeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Button} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ButtonItemProvider buttonItemProvider;

  /**
   * This creates an adapter for a {@link domain.Button}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createButtonAdapter()
  {
    if (buttonItemProvider == null)
    {
      buttonItemProvider = new ButtonItemProvider(this);
    }

    return buttonItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Controls} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControlsItemProvider controlsItemProvider;

  /**
   * This creates an adapter for a {@link domain.Controls}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createControlsAdapter()
  {
    if (controlsItemProvider == null)
    {
      controlsItemProvider = new ControlsItemProvider(this);
    }

    return controlsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Trigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerItemProvider triggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.Trigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTriggerAdapter()
  {
    if (triggerItemProvider == null)
    {
      triggerItemProvider = new TriggerItemProvider(this);
    }

    return triggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PREFormTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PREFormTriggerItemProvider preFormTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.PREFormTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPREFormTriggerAdapter()
  {
    if (preFormTriggerItemProvider == null)
    {
      preFormTriggerItemProvider = new PREFormTriggerItemProvider(this);
    }

    return preFormTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PREQueryTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PREQueryTriggerItemProvider preQueryTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.PREQueryTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPREQueryTriggerAdapter()
  {
    if (preQueryTriggerItemProvider == null)
    {
      preQueryTriggerItemProvider = new PREQueryTriggerItemProvider(this);
    }

    return preQueryTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.POSTQueryTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected POSTQueryTriggerItemProvider postQueryTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.POSTQueryTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPOSTQueryTriggerAdapter()
  {
    if (postQueryTriggerItemProvider == null)
    {
      postQueryTriggerItemProvider = new POSTQueryTriggerItemProvider(this);
    }

    return postQueryTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PREInsertTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PREInsertTriggerItemProvider preInsertTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.PREInsertTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPREInsertTriggerAdapter()
  {
    if (preInsertTriggerItemProvider == null)
    {
      preInsertTriggerItemProvider = new PREInsertTriggerItemProvider(this);
    }

    return preInsertTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PREDeleteTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PREDeleteTriggerItemProvider preDeleteTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.PREDeleteTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPREDeleteTriggerAdapter()
  {
    if (preDeleteTriggerItemProvider == null)
    {
      preDeleteTriggerItemProvider = new PREDeleteTriggerItemProvider(this);
    }

    return preDeleteTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.POSTCreateTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected POSTCreateTriggerItemProvider postCreateTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.POSTCreateTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPOSTCreateTriggerAdapter()
  {
    if (postCreateTriggerItemProvider == null)
    {
      postCreateTriggerItemProvider = new POSTCreateTriggerItemProvider(this);
    }

    return postCreateTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.PREUpdateTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PREUpdateTriggerItemProvider preUpdateTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.PREUpdateTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPREUpdateTriggerAdapter()
  {
    if (preUpdateTriggerItemProvider == null)
    {
      preUpdateTriggerItemProvider = new PREUpdateTriggerItemProvider(this);
    }

    return preUpdateTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.CreateTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CreateTriggerItemProvider createTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.CreateTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCreateTriggerAdapter()
  {
    if (createTriggerItemProvider == null)
    {
      createTriggerItemProvider = new CreateTriggerItemProvider(this);
    }

    return createTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InsertTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InsertTriggerItemProvider insertTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.InsertTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInsertTriggerAdapter()
  {
    if (insertTriggerItemProvider == null)
    {
      insertTriggerItemProvider = new InsertTriggerItemProvider(this);
    }

    return insertTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.UpdateTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UpdateTriggerItemProvider updateTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.UpdateTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUpdateTriggerAdapter()
  {
    if (updateTriggerItemProvider == null)
    {
      updateTriggerItemProvider = new UpdateTriggerItemProvider(this);
    }

    return updateTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DeleteTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeleteTriggerItemProvider deleteTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.DeleteTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeleteTriggerAdapter()
  {
    if (deleteTriggerItemProvider == null)
    {
      deleteTriggerItemProvider = new DeleteTriggerItemProvider(this);
    }

    return deleteTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.SearchTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SearchTriggerItemProvider searchTriggerItemProvider;

  /**
   * This creates an adapter for a {@link domain.SearchTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSearchTriggerAdapter()
  {
    if (searchTriggerItemProvider == null)
    {
      searchTriggerItemProvider = new SearchTriggerItemProvider(this);
    }

    return searchTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Root} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootItemProvider rootItemProvider;

  /**
   * This creates an adapter for a {@link domain.Root}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRootAdapter()
  {
    if (rootItemProvider == null)
    {
      rootItemProvider = new RootItemProvider(this);
    }

    return rootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.FormVariable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormVariableItemProvider formVariableItemProvider;

  /**
   * This creates an adapter for a {@link domain.FormVariable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFormVariableAdapter()
  {
    if (formVariableItemProvider == null)
    {
      formVariableItemProvider = new FormVariableItemProvider(this);
    }

    return formVariableItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DataControl} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataControlItemProvider dataControlItemProvider;

  /**
   * This creates an adapter for a {@link domain.DataControl}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDataControlAdapter()
  {
    if (dataControlItemProvider == null)
    {
      dataControlItemProvider = new DataControlItemProvider(this);
    }

    return dataControlItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Orders} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrdersItemProvider ordersItemProvider;

  /**
   * This creates an adapter for a {@link domain.Orders}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOrdersAdapter()
  {
    if (ordersItemProvider == null)
    {
      ordersItemProvider = new OrdersItemProvider(this);
    }

    return ordersItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.OrderBy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrderByItemProvider orderByItemProvider;

  /**
   * This creates an adapter for a {@link domain.OrderBy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOrderByAdapter()
  {
    if (orderByItemProvider == null)
    {
      orderByItemProvider = new OrderByItemProvider(this);
    }

    return orderByItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Relation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationItemProvider relationItemProvider;

  /**
   * This creates an adapter for a {@link domain.Relation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationAdapter()
  {
    if (relationItemProvider == null)
    {
      relationItemProvider = new RelationItemProvider(this);
    }

    return relationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Dependency} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependencyItemProvider dependencyItemProvider;

  /**
   * This creates an adapter for a {@link domain.Dependency}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDependencyAdapter()
  {
    if (dependencyItemProvider == null)
    {
      dependencyItemProvider = new DependencyItemProvider(this);
    }

    return dependencyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ArtificialField} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtificialFieldItemProvider artificialFieldItemProvider;

  /**
   * This creates an adapter for a {@link domain.ArtificialField}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArtificialFieldAdapter()
  {
    if (artificialFieldItemProvider == null)
    {
      artificialFieldItemProvider = new ArtificialFieldItemProvider(this);
    }

    return artificialFieldItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Link} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkItemProvider linkItemProvider;

  /**
   * This creates an adapter for a {@link domain.Link}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLinkAdapter()
  {
    if (linkItemProvider == null)
    {
      linkItemProvider = new LinkItemProvider(this);
    }

    return linkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ApplicationInfrastructureLayer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationInfrastructureLayerItemProvider applicationInfrastructureLayerItemProvider;

  /**
   * This creates an adapter for a {@link domain.ApplicationInfrastructureLayer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationInfrastructureLayerAdapter()
  {
    if (applicationInfrastructureLayerItemProvider == null)
    {
      applicationInfrastructureLayerItemProvider = new ApplicationInfrastructureLayerItemProvider(this);
    }

    return applicationInfrastructureLayerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.EnterpriseInfrastructure} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnterpriseInfrastructureItemProvider enterpriseInfrastructureItemProvider;

  /**
   * This creates an adapter for a {@link domain.EnterpriseInfrastructure}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnterpriseInfrastructureAdapter()
  {
    if (enterpriseInfrastructureItemProvider == null)
    {
      enterpriseInfrastructureItemProvider = new EnterpriseInfrastructureItemProvider(this);
    }

    return enterpriseInfrastructureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Datacenter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatacenterItemProvider datacenterItemProvider;

  /**
   * This creates an adapter for a {@link domain.Datacenter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDatacenterAdapter()
  {
    if (datacenterItemProvider == null)
    {
      datacenterItemProvider = new DatacenterItemProvider(this);
    }

    return datacenterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Subsystem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubsystemItemProvider subsystemItemProvider;

  /**
   * This creates an adapter for a {@link domain.Subsystem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSubsystemAdapter()
  {
    if (subsystemItemProvider == null)
    {
      subsystemItemProvider = new SubsystemItemProvider(this);
    }

    return subsystemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InfrastructureLayer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InfrastructureLayerItemProvider infrastructureLayerItemProvider;

  /**
   * This creates an adapter for a {@link domain.InfrastructureLayer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInfrastructureLayerAdapter()
  {
    if (infrastructureLayerItemProvider == null)
    {
      infrastructureLayerItemProvider = new InfrastructureLayerItemProvider(this);
    }

    return infrastructureLayerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InfrastructureConnection} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InfrastructureConnectionItemProvider infrastructureConnectionItemProvider;

  /**
   * This creates an adapter for a {@link domain.InfrastructureConnection}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInfrastructureConnectionAdapter()
  {
    if (infrastructureConnectionItemProvider == null)
    {
      infrastructureConnectionItemProvider = new InfrastructureConnectionItemProvider(this);
    }

    return infrastructureConnectionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.InfrastructureComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InfrastructureComponentItemProvider infrastructureComponentItemProvider;

  /**
   * This creates an adapter for a {@link domain.InfrastructureComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInfrastructureComponentAdapter()
  {
    if (infrastructureComponentItemProvider == null)
    {
      infrastructureComponentItemProvider = new InfrastructureComponentItemProvider(this);
    }

    return infrastructureComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Server} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServerItemProvider serverItemProvider;

  /**
   * This creates an adapter for a {@link domain.Server}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServerAdapter()
  {
    if (serverItemProvider == null)
    {
      serverItemProvider = new ServerItemProvider(this);
    }

    return serverItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Router} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RouterItemProvider routerItemProvider;

  /**
   * This creates an adapter for a {@link domain.Router}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRouterAdapter()
  {
    if (routerItemProvider == null)
    {
      routerItemProvider = new RouterItemProvider(this);
    }

    return routerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Hub} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HubItemProvider hubItemProvider;

  /**
   * This creates an adapter for a {@link domain.Hub}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHubAdapter()
  {
    if (hubItemProvider == null)
    {
      hubItemProvider = new HubItemProvider(this);
    }

    return hubItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Storage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StorageItemProvider storageItemProvider;

  /**
   * This creates an adapter for a {@link domain.Storage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStorageAdapter()
  {
    if (storageItemProvider == null)
    {
      storageItemProvider = new StorageItemProvider(this);
    }

    return storageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.ServerClaster} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServerClasterItemProvider serverClasterItemProvider;

  /**
   * This creates an adapter for a {@link domain.ServerClaster}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServerClasterAdapter()
  {
    if (serverClasterItemProvider == null)
    {
      serverClasterItemProvider = new ServerClasterItemProvider(this);
    }

    return serverClasterItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (domainItemProvider != null) domainItemProvider.dispose();
    if (htmlLayerHolderItemProvider != null) htmlLayerHolderItemProvider.dispose();
    if (categorizedItemProvider != null) categorizedItemProvider.dispose();
    if (classifierItemProvider != null) classifierItemProvider.dispose();
    if (domainArtifactsItemProvider != null) domainArtifactsItemProvider.dispose();
    if (domainTypesItemProvider != null) domainTypesItemProvider.dispose();
    if (domainApplicationsItemProvider != null) domainApplicationsItemProvider.dispose();
    if (domainApplicationItemProvider != null) domainApplicationItemProvider.dispose();
    if (domainArtifactItemProvider != null) domainArtifactItemProvider.dispose();
    if (ormEntityItemProvider != null) ormEntityItemProvider.dispose();
    if (jpaServiceItemProvider != null) jpaServiceItemProvider.dispose();
    if (ejbServiceItemProvider != null) ejbServiceItemProvider.dispose();
    if (continuousIintegrationItemProvider != null) continuousIintegrationItemProvider.dispose();
    if (artifactsItemProvider != null) artifactsItemProvider.dispose();
    if (artifactItemProvider != null) artifactItemProvider.dispose();
    if (generationHintItemProvider != null) generationHintItemProvider.dispose();
    if (configVariableItemProvider != null) configVariableItemProvider.dispose();
    if (modelQueryItemProvider != null) modelQueryItemProvider.dispose();
    if (queryParameterItemProvider != null) queryParameterItemProvider.dispose();
    if (specifierItemProvider != null) specifierItemProvider.dispose();
    if (optionItemProvider != null) optionItemProvider.dispose();
    if (applicationItemProvider != null) applicationItemProvider.dispose();
    if (applicationMessagesItemProvider != null) applicationMessagesItemProvider.dispose();
    if (applicationRoleItemProvider != null) applicationRoleItemProvider.dispose();
    if (applicationStyleItemProvider != null) applicationStyleItemProvider.dispose();
    if (stylesPackageItemProvider != null) stylesPackageItemProvider.dispose();
    if (applicationUILayerItemProvider != null) applicationUILayerItemProvider.dispose();
    if (applicationUIPackageItemProvider != null) applicationUIPackageItemProvider.dispose();
    if (applicationRecipesItemProvider != null) applicationRecipesItemProvider.dispose();
    if (applicationRecipeItemProvider != null) applicationRecipeItemProvider.dispose();
    if (applicationMappersItemProvider != null) applicationMappersItemProvider.dispose();
    if (applicationMapperItemProvider != null) applicationMapperItemProvider.dispose();
    if (methodPointerItemProvider != null) methodPointerItemProvider.dispose();
    if (messagesItemProvider != null) messagesItemProvider.dispose();
    if (messageLibraryItemProvider != null) messageLibraryItemProvider.dispose();
    if (languageRefItemProvider != null) languageRefItemProvider.dispose();
    if (messageItemProvider != null) messageItemProvider.dispose();
    if (translationItemProvider != null) translationItemProvider.dispose();
    if (languageItemProvider != null) languageItemProvider.dispose();
    if (rolesItemProvider != null) rolesItemProvider.dispose();
    if (roleItemProvider != null) roleItemProvider.dispose();
    if (groupItemProvider != null) groupItemProvider.dispose();
    if (stylesItemProvider != null) stylesItemProvider.dispose();
    if (styleLibraryItemProvider != null) styleLibraryItemProvider.dispose();
    if (styleSetItemProvider != null) styleSetItemProvider.dispose();
    if (mappersItemProvider != null) mappersItemProvider.dispose();
    if (mapperItemProvider != null) mapperItemProvider.dispose();
    if (typeMapperItemProvider != null) typeMapperItemProvider.dispose();
    if (javaMapperItemProvider != null) javaMapperItemProvider.dispose();
    if (javaScriptMapperItemProvider != null) javaScriptMapperItemProvider.dispose();
    if (cssMapperItemProvider != null) cssMapperItemProvider.dispose();
    if (roleMapperItemProvider != null) roleMapperItemProvider.dispose();
    if (recipesItemProvider != null) recipesItemProvider.dispose();
    if (deploymentSequenceItemProvider != null) deploymentSequenceItemProvider.dispose();
    if (deploymentComponentsItemProvider != null) deploymentComponentsItemProvider.dispose();
    if (deploymentComponentItemProvider != null) deploymentComponentItemProvider.dispose();
    if (deploymentStarStepItemProvider != null) deploymentStarStepItemProvider.dispose();
    if (usingMappersItemProvider != null) usingMappersItemProvider.dispose();
    if (recipeItemProvider != null) recipeItemProvider.dispose();
    if (ingredientItemProvider != null) ingredientItemProvider.dispose();
    if (componentItemProvider != null) componentItemProvider.dispose();
    if (javaComponentItemProvider != null) javaComponentItemProvider.dispose();
    if (infrastructureItemProvider != null) infrastructureItemProvider.dispose();
    if (configurationItemProvider != null) configurationItemProvider.dispose();
    if (modelMapperItemProvider != null) modelMapperItemProvider.dispose();
    if (propertyItemProvider != null) propertyItemProvider.dispose();
    if (mappingSpecifierItemProvider != null) mappingSpecifierItemProvider.dispose();
    if (queryItemProvider != null) queryItemProvider.dispose();
    if (queryVariableItemProvider != null) queryVariableItemProvider.dispose();
    if (artifactRefItemProvider != null) artifactRefItemProvider.dispose();
    if (typePointerItemProvider != null) typePointerItemProvider.dispose();
    if (typeDefinitionItemProvider != null) typeDefinitionItemProvider.dispose();
    if (typeElementItemProvider != null) typeElementItemProvider.dispose();
    if (primitiveItemProvider != null) primitiveItemProvider.dispose();
    if (typeItemProvider != null) typeItemProvider.dispose();
    if (typeReferenceItemProvider != null) typeReferenceItemProvider.dispose();
    if (typeExtensionItemProvider != null) typeExtensionItemProvider.dispose();
    if (attributeItemProvider != null) attributeItemProvider.dispose();
    if (operationItemProvider != null) operationItemProvider.dispose();
    if (parameterItemProvider != null) parameterItemProvider.dispose();
    if (returnValueItemProvider != null) returnValueItemProvider.dispose();
    if (enumaratorItemProvider != null) enumaratorItemProvider.dispose();
    if (enumAttributeItemProvider != null) enumAttributeItemProvider.dispose();
    if (typesRepositoryItemProvider != null) typesRepositoryItemProvider.dispose();
    if (typesItemProvider != null) typesItemProvider.dispose();
    if (packageItemProvider != null) packageItemProvider.dispose();
    if (uiPackageItemProvider != null) uiPackageItemProvider.dispose();
    if (formItemProvider != null) formItemProvider.dispose();
    if (formParameterItemProvider != null) formParameterItemProvider.dispose();
    if (formViewItemProvider != null) formViewItemProvider.dispose();
    if (viewsItemProvider != null) viewsItemProvider.dispose();
    if (orderableItemProvider != null) orderableItemProvider.dispose();
    if (multiLangLabelItemProvider != null) multiLangLabelItemProvider.dispose();
    if (canvasFrameItemProvider != null) canvasFrameItemProvider.dispose();
    if (viewPortHolderItemProvider != null) viewPortHolderItemProvider.dispose();
    if (defaultCavasItemProvider != null) defaultCavasItemProvider.dispose();
    if (viewElementItemProvider != null) viewElementItemProvider.dispose();
    if (popupCanvasItemProvider != null) popupCanvasItemProvider.dispose();
    if (canvasItemProvider != null) canvasItemProvider.dispose();
    if (windowItemProvider != null) windowItemProvider.dispose();
    if (tabCanvasItemProvider != null) tabCanvasItemProvider.dispose();
    if (tabPageItemProvider != null) tabPageItemProvider.dispose();
    if (viewPortItemProvider != null) viewPortItemProvider.dispose();
    if (viewAreaItemProvider != null) viewAreaItemProvider.dispose();
    if (viewPortTriggerItemProvider != null) viewPortTriggerItemProvider.dispose();
    if (viewInheritanceItemProvider != null) viewInheritanceItemProvider.dispose();
    if (tabPagesInheritanceItemProvider != null) tabPagesInheritanceItemProvider.dispose();
    if (formDataControlsItemProvider != null) formDataControlsItemProvider.dispose();
    if (canvasViewItemProvider != null) canvasViewItemProvider.dispose();
    if (childrenHolderItemProvider != null) childrenHolderItemProvider.dispose();
    if (contextParameterItemProvider != null) contextParameterItemProvider.dispose();
    if (contextValueItemProvider != null) contextValueItemProvider.dispose();
    if (expressionPartItemProvider != null) expressionPartItemProvider.dispose();
    if (contextParametersItemProvider != null) contextParametersItemProvider.dispose();
    if (contextItemProvider != null) contextItemProvider.dispose();
    if (styleElementItemProvider != null) styleElementItemProvider.dispose();
    if (styleClassItemProvider != null) styleClassItemProvider.dispose();
    if (nickNamedItemProvider != null) nickNamedItemProvider.dispose();
    if (uielementItemProvider != null) uielementItemProvider.dispose();
    if (sourcesPointerItemProvider != null) sourcesPointerItemProvider.dispose();
    if (actionElementItemProvider != null) actionElementItemProvider.dispose();
    if (actionTriggerItemProvider != null) actionTriggerItemProvider.dispose();
    if (inputElementItemProvider != null) inputElementItemProvider.dispose();
    if (selectionItemProvider != null) selectionItemProvider.dispose();
    if (optionSelectionItemProvider != null) optionSelectionItemProvider.dispose();
    if (layerHolderItemProvider != null) layerHolderItemProvider.dispose();
    if (inputTextItemProvider != null) inputTextItemProvider.dispose();
    if (labelItemProvider != null) labelItemProvider.dispose();
    if (outputTextItemProvider != null) outputTextItemProvider.dispose();
    if (checkBoxItemProvider != null) checkBoxItemProvider.dispose();
    if (dropDownSelectionItemProvider != null) dropDownSelectionItemProvider.dispose();
    if (imageItemProvider != null) imageItemProvider.dispose();
    if (dateItemProvider != null) dateItemProvider.dispose();
    if (columnItemProvider != null) columnItemProvider.dispose();
    if (tableItemProvider != null) tableItemProvider.dispose();
    if (treeItemProvider != null) treeItemProvider.dispose();
    if (buttonItemProvider != null) buttonItemProvider.dispose();
    if (controlsItemProvider != null) controlsItemProvider.dispose();
    if (triggerItemProvider != null) triggerItemProvider.dispose();
    if (preFormTriggerItemProvider != null) preFormTriggerItemProvider.dispose();
    if (preQueryTriggerItemProvider != null) preQueryTriggerItemProvider.dispose();
    if (postQueryTriggerItemProvider != null) postQueryTriggerItemProvider.dispose();
    if (preInsertTriggerItemProvider != null) preInsertTriggerItemProvider.dispose();
    if (preDeleteTriggerItemProvider != null) preDeleteTriggerItemProvider.dispose();
    if (postCreateTriggerItemProvider != null) postCreateTriggerItemProvider.dispose();
    if (preUpdateTriggerItemProvider != null) preUpdateTriggerItemProvider.dispose();
    if (createTriggerItemProvider != null) createTriggerItemProvider.dispose();
    if (insertTriggerItemProvider != null) insertTriggerItemProvider.dispose();
    if (updateTriggerItemProvider != null) updateTriggerItemProvider.dispose();
    if (deleteTriggerItemProvider != null) deleteTriggerItemProvider.dispose();
    if (searchTriggerItemProvider != null) searchTriggerItemProvider.dispose();
    if (rootItemProvider != null) rootItemProvider.dispose();
    if (formVariableItemProvider != null) formVariableItemProvider.dispose();
    if (dataControlItemProvider != null) dataControlItemProvider.dispose();
    if (ordersItemProvider != null) ordersItemProvider.dispose();
    if (orderByItemProvider != null) orderByItemProvider.dispose();
    if (relationItemProvider != null) relationItemProvider.dispose();
    if (dependencyItemProvider != null) dependencyItemProvider.dispose();
    if (artificialFieldItemProvider != null) artificialFieldItemProvider.dispose();
    if (linkItemProvider != null) linkItemProvider.dispose();
    if (applicationInfrastructureLayerItemProvider != null) applicationInfrastructureLayerItemProvider.dispose();
    if (enterpriseInfrastructureItemProvider != null) enterpriseInfrastructureItemProvider.dispose();
    if (datacenterItemProvider != null) datacenterItemProvider.dispose();
    if (subsystemItemProvider != null) subsystemItemProvider.dispose();
    if (infrastructureLayerItemProvider != null) infrastructureLayerItemProvider.dispose();
    if (infrastructureConnectionItemProvider != null) infrastructureConnectionItemProvider.dispose();
    if (infrastructureComponentItemProvider != null) infrastructureComponentItemProvider.dispose();
    if (serverItemProvider != null) serverItemProvider.dispose();
    if (routerItemProvider != null) routerItemProvider.dispose();
    if (hubItemProvider != null) hubItemProvider.dispose();
    if (storageItemProvider != null) storageItemProvider.dispose();
    if (serverClasterItemProvider != null) serverClasterItemProvider.dispose();
  }

}
