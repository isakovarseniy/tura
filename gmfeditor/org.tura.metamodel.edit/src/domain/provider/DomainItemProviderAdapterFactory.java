/**
 */
package domain.provider;

import domain.util.DomainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainItemProviderAdapterFactory extends DomainAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Domain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainItemProvider domainItemProvider;

  /**
   * This creates an adapter for a {@link domain.Domain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainAdapter()
  {
    if (domainItemProvider == null)
    {
      domainItemProvider = new DomainItemProvider(this);
    }

    return domainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Dammy1} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Dammy1ItemProvider dammy1ItemProvider;

  /**
   * This creates an adapter for a {@link domain.Dammy1}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDammy1Adapter()
  {
    if (dammy1ItemProvider == null)
    {
      dammy1ItemProvider = new Dammy1ItemProvider(this);
    }

    return dammy1ItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Dammy2} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Dammy2ItemProvider dammy2ItemProvider;

  /**
   * This creates an adapter for a {@link domain.Dammy2}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDammy2Adapter()
  {
    if (dammy2ItemProvider == null)
    {
      dammy2ItemProvider = new Dammy2ItemProvider(this);
    }

    return dammy2ItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Dammy3} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Dammy3ItemProvider dammy3ItemProvider;

  /**
   * This creates an adapter for a {@link domain.Dammy3}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDammy3Adapter()
  {
    if (dammy3ItemProvider == null)
    {
      dammy3ItemProvider = new Dammy3ItemProvider(this);
    }

    return dammy3ItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.Dammy4} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Dammy4ItemProvider dammy4ItemProvider;

  /**
   * This creates an adapter for a {@link domain.Dammy4}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDammy4Adapter()
  {
    if (dammy4ItemProvider == null)
    {
      dammy4ItemProvider = new Dammy4ItemProvider(this);
    }

    return dammy4ItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainArtifacts} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainArtifactsItemProvider domainArtifactsItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainArtifacts}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainArtifactsAdapter()
  {
    if (domainArtifactsItemProvider == null)
    {
      domainArtifactsItemProvider = new DomainArtifactsItemProvider(this);
    }

    return domainArtifactsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainTypes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainTypesItemProvider domainTypesItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainTypes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainTypesAdapter()
  {
    if (domainTypesItemProvider == null)
    {
      domainTypesItemProvider = new DomainTypesItemProvider(this);
    }

    return domainTypesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainApplications} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainApplicationsItemProvider domainApplicationsItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainApplications}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainApplicationsAdapter()
  {
    if (domainApplicationsItemProvider == null)
    {
      domainApplicationsItemProvider = new DomainApplicationsItemProvider(this);
    }

    return domainApplicationsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link domain.DomainApplication} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainApplicationItemProvider domainApplicationItemProvider;

  /**
   * This creates an adapter for a {@link domain.DomainApplication}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainApplicationAdapter()
  {
    if (domainApplicationItemProvider == null)
    {
      domainApplicationItemProvider = new DomainApplicationItemProvider(this);
    }

    return domainApplicationItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (domainItemProvider != null) domainItemProvider.dispose();
    if (dammy1ItemProvider != null) dammy1ItemProvider.dispose();
    if (dammy2ItemProvider != null) dammy2ItemProvider.dispose();
    if (dammy3ItemProvider != null) dammy3ItemProvider.dispose();
    if (dammy4ItemProvider != null) dammy4ItemProvider.dispose();
    if (domainArtifactsItemProvider != null) domainArtifactsItemProvider.dispose();
    if (domainTypesItemProvider != null) domainTypesItemProvider.dispose();
    if (domainApplicationsItemProvider != null) domainApplicationsItemProvider.dispose();
    if (domainApplicationItemProvider != null) domainApplicationItemProvider.dispose();
  }

}
