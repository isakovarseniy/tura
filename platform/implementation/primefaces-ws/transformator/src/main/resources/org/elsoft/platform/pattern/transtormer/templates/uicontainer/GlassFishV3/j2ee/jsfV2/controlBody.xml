<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 Arseniy Isakov
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:u="jelly:util"
	xmlns:a="jelly:ant">

	package org.elsoft.platform.${application}.${model.uicontainer};

	import java.lang.reflect.Method;
	import java.util.logging.Logger;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Map;
	import java.util.HashMap;
	import java.util.Iterator;
	import javax.faces.model.SelectItem;
 
    import org.primefaces.event.NodeCollapseEvent;
    import org.primefaces.event.NodeExpandEvent;
    import org.primefaces.event.NodeSelectEvent;
    import org.primefaces.event.NodeUnselectEvent;
    import org.primefaces.model.DefaultTreeNode;
	import org.primefaces.model.LazyDataModel;
    import org.primefaces.model.TreeNode;
	import javax.faces.event.ValueChangeEvent;

    import org.elsoft.platform.datacontrol.annotations.DefaultOrderBys;
    import org.elsoft.platform.datacontrol.RootModeSwitch;
    import org.elsoft.platform.datacontrol.annotations.DefaultSearchCriterias;
    import org.elsoft.platform.datacontrol.annotations.DefaultOrderBy;
    import org.elsoft.platform.datacontrol.annotations.DefaultSearchCriteria;
    import org.elsoft.platform.datacontrol.annotations.Dependencies;
    import org.elsoft.platform.datacontrol.annotations.Dependency;
	import org.elsoft.platform.ComparatorType;
	import org.elsoft.platform.OrderType;
	import org.elsoft.platform.datacontrol.annotations.GetMode;
	import org.elsoft.platform.datacontrol.annotations.IdField;
	import org.elsoft.platform.datacontrol.annotations.Link;
	import org.elsoft.platform.OrderCriteria;
    import org.elsoft.platform.datacontrol.annotations.TriggerOutput;
	import org.elsoft.platform.datacontrol.annotations.Variable;
	import org.elsoft.platform.datacontrol.annotations.Variables;
	import org.elsoft.platform.datacontrol.annotations.Proxy;
	import org.elsoft.platform.datacontrol.annotations.Connection;
	import org.elsoft.platform.datacontrol.annotations.Base;
	import org.elsoft.platform.datacontrol.annotations.VersionField;
	import org.elsoft.platform.datacontrol.Mode;
    import org.elsoft.platform.Reflection;
    import org.elsoft.platform.datacontrol.annotations.ArtificialProperties;
    import org.elsoft.platform.datacontrol.annotations.ArtificialProperty;
    import org.elsoft.platform.datacontrol.extender.ModeExtender;
    import org.elsoft.platform.datacontrol.ins.InsModeBeanWrapper;
    import org.elsoft.platform.datacontrol.annotations.CreateTrigger;
    import org.elsoft.platform.datacontrol.annotations.InsertTrigger;
    import org.elsoft.platform.datacontrol.annotations.UpdateTrigger;
    import org.elsoft.platform.datacontrol.annotations.RemoveTrigger;
    import org.elsoft.platform.datacontrol.annotations.SearchTrigger;
    import org.elsoft.platform.datacontrol.annotations.POSTCreateTrigger;
    import org.elsoft.platform.datacontrol.annotations.POSTQueryTrigger;
    import org.elsoft.platform.datacontrol.annotations.PREQueryTrigger;
    import org.elsoft.platform.datacontrol.annotations.PREInsertTrigger;
    import org.elsoft.platform.datacontrol.extender.Handler;

	<j:new className="java.util.HashMap" var="proxyHash" />

	<j:forEach items="${objlnk.dataLink.remoteBusinessMethods.iterator()}" var="rmi">
	  <j:if test="${rmi.methodType=='CreateTrigger'}">
	   <j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/${rmi.proxy.technology}/importService.xml"
				inherit="true" />
      </j:if>
	</j:forEach>

	@TriggerOutput(expression =
	"${model.uicontainer}binding.resultOperation")
	@Base(clazz=${objlnk.dataLink.majorType.resTypeName}.class)


    @Dependencies(dependency={
	<j:set var="iterator" value="0" />
	<j:forEach items="${objlnk.dataLink.dependency.iterator()}" var="dependency">
	   <j:if test="${iterator == 1}">,</j:if>
  	   @Dependency(expression ="${dependency}" )
	   <j:set var="iterator" value="1" />
	</j:forEach>
    
    })


    @DefaultOrderBys(orders={
	<j:set var="iterator" value="0" />
	<j:forEach items="${objlnk.dataLink.defaultOrderBy.iterator()}" var="orderBy">
	   <j:if test="${iterator == 1}">,</j:if>
  	   @DefaultOrderBy(field ="${orderBy.field}" , type=OrderType.${orderBy.order} )
	   <j:set var="iterator" value="1" />
	</j:forEach>
    
    
    })
    @DefaultSearchCriterias(criterias={
	<j:set var="iterator" value="0" />
	<j:forEach items="${objlnk.dataLink.defaultSearch.iterator()}" var="search">
	  <j:if test="${iterator == 1}">,</j:if>
      @DefaultSearchCriteria(field ="${search.field}" ,type=${search.type.resPackageName}.${search.type.resTypeName}.class, comparator=ComparatorType.${search.comparator}, value="${search.value}", expression="${search.expression}")
		<j:set var="iterator" value="1" />
	</j:forEach>

    
    
    })
        

	<j:forEach items="${objlnk.dataLink.annotation.iterator()}" var="ant">

			<j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/${ant.antType}.xml"
				inherit="true" />
	</j:forEach>

   @ArtificialProperties(fields = { 
     @ArtificialProperty(field = "position",type=Integer.class,defaulValue="") 
	<j:forEach items="${objlnk.dataLink.artifitialFields.iterator()}" var="ant">
     ,@ArtificialProperty(field = "${ant.artifitialFieldName}",type=${ant.type.resPackageName}.${ant.type.resTypeName}.class,defaulValue="${ant.defaultValue}") 
	</j:forEach>
     
     
     })



	public class ${objlnk.datalinkCapName}Handler extends Handler{


	<j:forEach items="${objlnk.proxy.iterator()}" var="proxy">

	@Proxy(name = "commonProxy")
	private ${proxy.resTypeName} proxy;

	public Object getProxy() {
	return proxy;
	}

	</j:forEach>

	public ${objlnk.datalinkCapName}Handler(){
	<j:forEach items="${objlnk.proxy.iterator()}" var="proxy">

	   <j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/${proxy.technology}/initService.xml"
				inherit="true" />
	</j:forEach>
	}

    public boolean isQueryMode(  )
    {
        if ( getMode(  ).getMode(  ).equals( RootModeSwitch.INSERT_MODE ) )
            return false;
         else
            return true;
    }


	@GetMode
	private Mode&lt;${objlnk.dataLink.majorType.resTypeName}&gt; mode;
	public Mode&lt;${objlnk.dataLink.majorType.resTypeName}&gt; getMode(){
	return mode;
	}

	<j:forEach items="${objlnk.dataLink.remoteBusinessMethods.iterator()}" var="rmi">
		<j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/RemoteMethod.xml"
				inherit="true" />
	</j:forEach>

	<j:forEach items="${objlnk.dataLink.remoteMethods.iterator()}" var="rmi">
		<j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/Trigger.xml"
				inherit="true" />
	</j:forEach>

	<j:forEach items="${objlnk.dataLink.remoteUIEventMethods.iterator()}" var="rmi">
		<j:import file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/Primefaces/trigger${rmi.methodType}.xml"
				inherit="true" />
	</j:forEach>

  	  <j:forEach items="${objlnk.details.iterator()}" var="rel">
  	  
    	<j:set var="iterator" value="0" />
		@Connection(links = {
		<j:forEach items="${rel.relation.links.iterator()}" var="lnk">
	        <j:if test="${iterator == 1}">,</j:if>
			@Link(field1 = "${lnk.masterField}", field2 = "${lnk.detailField}") 
    		<j:set var="iterator" value="1" />
		</j:forEach>
		}, connectedObject = ${rel.capDetailName}Handler.class, connectionName = "${objlnk.datalinkCapName}2${rel.capDetailName}",treeRelation =${rel.relation.treeRelation} )
        private ${rel.capDetailName}Handler ${rel.relation.detail.name}Handler;
		public ${rel.capDetailName}Handler get${rel.capDetailName}Handler(){
		   return ${rel.relation.detail.name}Handler;
		}
  	  </j:forEach>


	<j:forEach items="${objlnk.dataLink.triggers.iterator()}" var="event">
		<j:import
			file="${RootTemplate}/GlassFishV3/j2ee/jsfV2/Primefaces/event${event}.xml"
			inherit="true" />
	</j:forEach>

	}


</j:jelly>
