<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 Arseniy Isakov
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:u="jelly:util"
	xmlns:a="jelly:ant" xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core" xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">


    private TreeNode root;

    public TreeNode getRoot(  ) throws Exception
    {
 	  if ((root == null)||getMode(  ).getControl(  ).testForRefresh(  )) 
       {
            root = new DefaultTreeNode( this, null );

            Iterator&lt;${objlnk.dataLink.majorType.resTypeName}&gt; itr = getMode(  ).getControl(  ).getList(  ).iterator(  );
            boolean first = true;

            while ( itr.hasNext(  ) )
            {
                ${objlnk.dataLink.majorType.resTypeName} obj = itr.next(  );
                int i = getMode(  ).getControl(  ).getCurrentPosition(  );
                Reflection.call( obj, "setPosition", i );

                TreeNode node = new DefaultTreeNode( obj, root );
                if ( first ){
                    setSelectedNode( node );
                    first = false;
                }
 
                new DefaultTreeNode( this, node );
            }
            getMode().getControl().getObject(0);
            
        }

        return root;
    }

    private TreeNode selectedNode;

    public TreeNode getSelectedNode(  )
    {
        return selectedNode;
    }

	private void treeWalker(TreeNode selectedNode) throws Exception {
		if (selectedNode.getParent().getParent() != null) {
			treeWalker(selectedNode.getParent());
		}

		Object obj = selectedNode.getData();

		if (obj != null) {
			InsModeBeanWrapper w = (InsModeBeanWrapper) Reflection.call(obj,
					"getWrapper");
			int currentRow = (Integer) Reflection.call(obj, "getPosition");
			w.getDatacontrol().getObject(currentRow);

			BindingFactory bf = (BindingFactory) getMode().getElResolver()
					.getValue("${model.uicontainer}binding");
			ModeExtender ext = (ModeExtender) Reflection.call(w
					.getDatacontrol().getMode().getExtender(), "getWrapper");

			String methodName = ext
					.getClazz()
					.getSimpleName()
					.substring(0,
							ext.getClazz().getSimpleName().indexOf("Handler"));

			Method method = bf.getClass().getMethod("setCurrent" + methodName,
					ext.getClazz());
			method.invoke(bf, w.getDatacontrol().getMode().getExtender());
		}

	}

	public void setSelectedNode(TreeNode selectedNode) throws Exception {
		if (selectedNode == null)
			return;

		this.selectedNode = selectedNode;
		treeWalker(selectedNode);
	}

    public void onNodeExpand( NodeExpandEvent event ) throws Exception
    {
        org.primefaces.component.tree.Tree object = (org.primefaces.component.tree.Tree) event.getSource(  );
        TreeNode expnode = object.getRowNode(  );
        setSelectedNode(expnode);

        expnode.getChildren(  ).clear(  );

        InsModeBeanWrapper bean = (InsModeBeanWrapper) Reflection.call( expnode.getData(), "getWrapper" );
        Object ext=  bean.getDatacontrol().getMode().getExtender(); 
        ModeExtender modeExtender = (ModeExtender) Reflection.call( ext, "getWrapper" );

        Iterator&lt;String&gt; detItr = modeExtender.getRelations(  ).keySet(  ).iterator(  );
        HashMap&lt;String, String&gt; h = modeExtender.getRelations(  );

        while ( detItr.hasNext(  ) )
        {
            String relName = detItr.next(  );
            String method =  h.get( relName );
            Connection con = modeExtender.getConnections(  ).get( method );

            if ( ! con.treeRelation(  ) )
            {
                continue;
            }

            Object detHandler = Reflection.call( ext,
                                                 h.get( relName ) );

            ModeExtender detExtender = (ModeExtender) Reflection.call( detHandler, "getWrapper" );
            Mode&lt;?&gt; md = detExtender.getMode(  );
            md.getControl(  ).setRefresh( true );

            Iterator&lt;?&gt; itr = md.getControl(  ).getList(  ).iterator(  );

            while ( itr.hasNext(  ) )
            {
                Object obj = itr.next(  );
                int i = md.getControl(  ).getCurrentPosition(  );
                Reflection.call( obj, "setPosition", i );

                TreeNode chield = new DefaultTreeNode( obj, expnode );
                new DefaultTreeNode( detHandler, chield );
            }

            md.getControl(  ).getObject( 0 );
        }
    }

    public void onNodeCollapse( NodeCollapseEvent event )
    {
        org.primefaces.component.tree.Tree object = (org.primefaces.component.tree.Tree) event.getSource(  );
        TreeNode collapseNode = object.getRowNode(  );

        Object obj = collapseNode.getData(  );
        InsModeBeanWrapper w = (InsModeBeanWrapper) Reflection.call( obj, "getWrapper" );
        Object handler = w.getDatacontrol(  ).getMode(  ).getExtender(  );
        int i =collapseNode.getChildren(  ).size();
        for (int j=0; j&lt;i;j++)
        	collapseNode.getChildren(  ).remove(0);
        
        collapseNode.setExpanded( false );
//        new DefaultTreeNode( handler, collapseNode );
        
    }

    public void onNodeSelect( NodeSelectEvent event )throws Exception
    {
        org.primefaces.component.tree.Tree object = (org.primefaces.component.tree.Tree) event.getSource(  );
        TreeNode expnode = object.getRowNode(  );
        setSelectedNode( expnode );
    }

    public void onNodeUnselect( NodeUnselectEvent event )
    {
    }

</j:jelly>	
