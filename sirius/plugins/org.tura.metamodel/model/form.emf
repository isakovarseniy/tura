@namespace(uri="http://tura.org/2016/v2/form", prefix="tura.form")
package form;


import "platform:/resource/org.tura.metamodel/model/artifact.ecore";
import "platform:/resource/org.tura.metamodel/model/type.ecore";
import "platform:/resource/org.tura.metamodel/model/permission.ecore";
import "platform:/resource/org.tura.metamodel/model/common.ecore";


class Form{
    id attr EString uid;
   attr EString name;
   val Views view;
   val Controls datacontrols;
   val FormParameter[*] parameters;
   
}

class FormParameter extends type.TypePointer{
    id attr EString uid;
   attr EString name;
}


class Views{
    id attr EString uid;
   val CanvasFrame[*]  canvases;
   val ViewInheritance[*] viewInheritances;
   val TabPagesInheritance[*] tabPagesInheritances;
   val MenuDefinition[*] menus;
}


enum Comparator{
    EQ;
    NEQ;
    GT;
    GEQ;
    LT;
    LEQ;
}

enum Order {
   ASC;
   DESC;
}

class MultiLangLabel{
   val Context multiLangLabel;
}

class CanvasFrame extends StyleElement{
    id attr EString uid;
   attr EString name;
}

class ViewPortHolder extends common.HTMLLayerHolder{
   @gmf.compartment
   val ViewElement[*] viewElement;
}

class DefaultCavas{
   attr boolean defaultCanvas;
}

class ViewElement extends StyleElement, artifact.Categorized,NickNamed {

}


class PopupCanvas extends CanvasFrame,ViewPortHolder,DefaultCavas, MultiLangLabel,artifact.Categorized, FlexFields {
   attr boolean modal;
}

class Canvas extends CanvasFrame,ViewPortHolder,DefaultCavas, MultiLangLabel,artifact.Categorized,FlexFields {
}

class Window extends CanvasFrame,ViewPortHolder,MultiLangLabel,artifact.Categorized ,permission.Secured{
}

class MenuDefinition extends StyleElement,artifact.Categorized {
    id attr EString uid;
   attr EString name;
   val MenuFolder[*] menuFolders; 
   val ToSubmenu[*] toSubMenu;
}

enum Orientation{
	Top;
	Bottom;
	Left;
	Right;
}

class TabCanvas extends CanvasFrame,DefaultCavas,MultiLangLabel,artifact.Categorized {
  attr Orientation orientation ;
}

class TabPage extends CanvasFrame,ViewPortHolder,MultiLangLabel,artifact.Categorized,common.Orderable {
 attr EInt tabSequence;
}

class ViewPort extends ViewElement,common.Orderable{
    id attr EString uid;
   attr EString name;
    val ViewPortTrigger  viewPortTrigger;
}

class ViewArea extends ViewElement,common.Orderable{
    id attr EString uid;
   attr EString name;
   val LayerHolder  baseCanvas; 
   val LinkToLabel[*] linkToLabels;
   val LinkToMessage[*] linkToMessages;
}


class ViewPortTrigger extends Trigger  {
   id attr EString uid;
 }

class ViewInheritance{
    id attr EString uid;
   ref ViewPort source;
   ref CanvasFrame target;
}



class TabPagesInheritance{
    id attr EString uid;
   ref TabCanvas source;
   ref TabPage target;
}




class LinkToMessage {
    id attr EString uid;
    ref InputElement source;
    ref MessageElement target;
}


class LinkToLabel {
    id attr EString uid;
    ref InputElement source;
    ref Label target;
}


class ChildrenHolder{
   val Uielement [*] children; 
}

class ContextParameter{
    id attr EString uid;
   ref EObject refObj;
   attr Comparator operation;
   val ContextValue value;
}

class ContextValue{
   id attr EString uid;
   attr boolean constant;
   attr EString value;
   val ExpressionPart[*] expression;
}

class ExpressionPart{
   id attr EString uid;
   ref EObject objRef;
   attr EInt order;
   attr EString expressionType;   
}

class ContextParameters {
    val ContextParameter[*] parameters;
}

class Context extends ContextValue, ContextParameters{
}


//To define stye classes use flex fields
class StyleElement{
    val Context style;
}


class NickNamed{

    attr EString nickname;
}


class FlexFields {
	
	val FlexField[*] fields;
}


class FlexField extends Context , artifact.Categorized{
}


class EnabledUIItem{
    val Context enabled;
}

class Uielement extends StyleElement,NickNamed,artifact.Categorized, common.Orderable, EnabledUIItem,FlexFields,MenuHolder{
    id attr EString uid;
    val Context required;
    val Context readOnly;
    val AreaRef[*]  refreshAreas;
}

class ItemIcon{
    val Context icon;
}

class AreaRef{
	ref NickNamed area;
	attr EInt group;
}

class Formatable{
   attr EString format;
}


class ControlPointer{
   ref DataControl sourcePointer;
   ref EObject valuePointer;
   ref type.Type sourceCast;
   // to support tree structure
   ref DataControl sourceCastDataControl;	
}

class SourcesPointer extends Uielement,ControlPointer{

}


class InputElement extends SourcesPointer {
}

class Selection extends StyleElement{
   ref EObject displayOptionPointer;
   ref EObject valueOptionPointer;
}

class OptionSelection extends InputElement {
   ref DataControl optionPointer;
   ref type.Type optionCast;
   // to support tree structure
   ref DataControl optionCastDataControl;
}

class LayerHolder extends Uielement , ChildrenHolder, common.HTMLLayerHolder{
   
}

class InputText extends InputElement ,Formatable{
    attr EInt rows;
    attr EInt columns;
}

class Password extends InputElement ,Formatable{

}



class Label extends Uielement ,MultiLangLabel{
  attr EString label;
}

class MessageElement extends Uielement ,MultiLangLabel{
  attr EString label;
}


class OutputText extends InputElement ,Formatable{
   
}

class CheckBox extends InputElement {
   
}

class DropDownSelection extends OptionSelection {
   val Selection selection;
   val Context initialOptionMessage;
   attr EString  initialOptionValue;
}

class Image extends InputElement {
   
}


class Date extends InputElement ,Formatable{
   
}

class Button extends Uielement,MultiLangLabel,ItemIcon{
   attr EString label;
}

class Column extends StyleElement,MultiLangLabel, artifact.Categorized,common.HTMLLayerHolder,common.Orderable{
    id attr EString uid;
   attr EString label;
   val Uielement element;   
}

class Table extends SourcesPointer,MultiLangLabel,common.HTMLLayerHolder{
   attr EString label;
   attr EInt rowNumber;
   val Column[*] cols;
}

class Menu extends Uielement,MultiLangLabel{
}


class BlockUI  extends Uielement,  ChildrenHolder, common.HTMLLayerHolder {
     val AreaRef[*]  sourceTarget;	 
}

class Poll extends Uielement{
	
}

class MenuHolder {
	ref MenuFolder menu;
}

class MenuExtensionRef{
	ref MenuFolder extensionRef;
}


//Add FlexFields to configure styleClasses
class MenuElement extends MultiLangLabel,StyleElement,artifact.Categorized,EnabledUIItem,common.Orderable,FlexFields{
    id attr EString uid;
    attr EString name;
}


//Add FlexFields to configure styleClasses
class MenuFolder extends common.HTMLLayerHolder,EnabledUIItem,artifact.Categorized,StyleElement,MultiLangLabel,ItemIcon,FlexFields{
    id attr EString uid;
    attr EString name;
    attr EBoolean extensionPoint;
    val MenuElement[*] menuElements;
}

class MenuItem extends MenuElement,ItemIcon{
	 val Context transition;
     val AreaRef[*]  refreshAreas;	 
}


class MenuExtensionPoint extends MenuElement,MenuExtensionRef{
	
}

//Add FlexFields to configure styleClasses
class SubMenu extends MenuElement,ItemIcon,FlexFields{
}


class ToSubmenu {
    id attr EString uid;
   ref SubMenu source;
   ref MenuFolder target;
}

class MenuSeparator extends MenuElement{
}


class Tree extends SourcesPointer,MultiLangLabel{
   attr EString label;
   val Context image;
   val Column[*] cols;
}



class Controls{
    id attr EString uid;
    val Root root;
    val DataControl [*] controls;
    val Relation[*] relations;
    val Dependency[*] dependencies;
}

class Trigger extends type.MethodPointer , ContextParameters{
}

class PREFormTrigger  extends Trigger {
    id attr EString uid;
 }

class PREQueryTrigger  extends  Trigger {
   id attr EString uid;
 }

class POSTQueryTrigger   extends Trigger {
    id attr EString uid;
 }


class PREInsertTrigger   extends Trigger {
    id attr EString uid;
 }


class PREDeleteTrigger   extends Trigger {
    id attr EString uid;
 }


class POSTCreateTrigger   extends Trigger {
    id attr EString uid;
 }


class PREUpdateTrigger   extends Trigger {
    id attr EString uid;
 }



class CreateTrigger   extends Trigger {
    id attr EString uid;
 }


class InsertTrigger  extends Trigger{
    id attr EString uid;
 }


class UpdateTrigger   extends Trigger {
    id attr EString uid;
 }


class DeleteTrigger  extends Trigger{
    id attr EString uid;
 }


class SearchTrigger  extends Trigger {
    id attr EString uid;
 }



class Root{
    id attr EString uid;
   attr EString name;
   val PREFormTrigger preFormTrigger;
   val FormVariable[*] variables;
}

class FormVariable extends type.TypePointer{
    id attr EString uid;
   attr EString name;
   ref FormParameter paramRef;
}


class DataControl {
    id attr EString uid;
   attr EString name;
   val type.TypePointer baseType;
   val PREQueryTrigger preQueryTrigger;
   val POSTQueryTrigger postQueryTrigger;
   val PREInsertTrigger preInsertTrigger;
   val PREDeleteTrigger preDeleteTrigger;
   val POSTCreateTrigger postCreateTrigger;
   val PREUpdateTrigger preUpdateTrigger;
   val CreateTrigger create;
   val SearchTrigger search;
   val ArtificialField[*] artificialFields;   
   val ContextParameters defaultSearch;
   val Orders defaultOrderBy;

   val RelationMapper[*] relationMappers;
    
    
}

class RelationMapper {
    id attr EString uid;
	ref DataControl dataControlRef;
	ref type.TypeElement typeRef;
	ref type.Assosiation assosiationRef;
}



class Orders{
    id attr EString uid;
    val OrderBy[*] orderRules;
}

class OrderBy{
    id attr EString uid;
    ref EObject refObj;
    attr Order order;
}

class Relation{
    id attr EString uid;
   attr EString name;
   ref DataControl master;
   ref DataControl detail;
   attr EBoolean isTree;
   val type.Link[*] links;  
}

class InternalRelation extends Relation{
	ref type.Assosiation assosiationRef;
}


class Dependency{
    id attr EString uid;
   attr EString name;
   ref DataControl master;
   ref DataControl detail;
}



class ArtificialField extends type.TypePointer{
    id attr EString uid;
   attr EString name;
}



