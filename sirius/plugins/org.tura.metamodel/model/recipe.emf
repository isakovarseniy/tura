@namespace(uri="http://tura.org/2016/v2/recipe", prefix="tura.recipe")
package recipe;

import "platform:/resource/org.tura.metamodel/model/artifact.ecore";
import "platform:/resource/org.tura.metamodel/model/mapper.ecore";


class Recipes{
    id attr EString uid;
  attr  EString name;
  val Recipe recipe;
  val Configuration[*] configurations;
  val Infrastructure[*] infrastructures;
  val DeploymentSequence deployment;
  val ConfigExtension[*] configExtensions;
  val Recipe2Infrastructure[*] recipe2Infrastructures;
  val Infrastructure2Configuration[*] infrastructure2Configurations;

}


class Recipe extends UsingMappers{
    id attr EString uid;
  attr EString name;
  val Ingredient[*] ingredients;
  ref Infrastructure[*] infrastructures;
  ref DeploymentSequence deployment;
}

class ConfigExtension {
    id attr EString uid;
    ref Configuration source;
    ref Configuration target;
}


class Recipe2Infrastructure{
    id attr EString uid;
    ref Recipe source;
    ref Infrastructure target;
}


class Infrastructure2Configuration{
    id attr EString uid;
    ref Infrastructure source;
    ref Configuration target;
}



class DeploymentSequence{
    id attr EString uid;
   attr EString name;
   val DeploymentComponents deploymentComponents;
}

class DeploymentComponents{
    id attr EString uid;
    val DeploymentComponent[*] deplymentStep;   
    val DeploymentStarStep startSeq;
    
}

class DeploymentComponent{
    id attr EString uid;
    attr EString name;
    ref ModelMapper mapper;
    ref DeploymentComponent deploymentComponentLink;
}

class DeploymentStarStep{
    id attr EString uid;
    attr EString name;
   ref DeploymentComponent firstStep;
}



class UsingMappers{
  ref mapper.Mappers[*] mappers;
}

//Value of laers must be 2^n
enum PlatformLayers{
   ServiceLayer = 1;
   UILayer = 2;
}


class Ingredient extends UsingMappers {
  id attr EString uid;
  attr EString name;
  val Component[*] components;
  attr PlatformLayers layer;
}

class Component {
    id attr EString uid;
   attr EString name;
   val ModelMapper[*] mappers;
   attr EString componentRoot;
}

class JavaComponent extends Component{
   attr EString artifactId;
   attr EString groupId;
   attr EString version;
   attr EString basePackage;   
}


class Infrastructure{
  id attr EString uid;
  ref Recipe  recipe;
  attr EString name;
}

class Configuration{
    id attr EString uid;
   attr EString name;
   val Property[*] properties; 
   val HashProperty[*] hashProperties; 
}

class ModelMapper extends ArtifactRef{
   attr EString name;
   attr EString artifactRoot;
   val MappingTecnologiy[*] technologies;
    val Query[*] queries;
    attr EString artifactExecutionString;
}

class Property{
    id attr EString uid;
    ref artifact.ConfigVariable confVarRef;
    attr EString value;
}


class HashProperty{
    id attr EString uid;
    ref artifact.ConfigHash confHashRef;
    val KeyValuePair[*] hash;
}


class KeyValuePair{
    id attr EString uid;
    attr EString key;
    attr EString value;
}

class MappingTecnologiy{
    id attr EString uid;
   ref artifact.Technology techRef;
   ref artifact.Option valueRef;
}

class Query{
    id attr EString uid;
   attr EString name;
   ref artifact.ModelQuery queryRef;
   val QueryVariable[*] variables;
}

class QueryVariable{
    id attr EString uid;
   ref artifact.QueryParameter queryParamRef;
   attr EString value;
}

class ArtifactRef{
    id attr EString uid;
   ref artifact.Artifact artifactRef;
}

