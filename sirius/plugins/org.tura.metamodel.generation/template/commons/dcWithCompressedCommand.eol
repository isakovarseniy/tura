import "platform:/plugin/org.tura.metamodel.generation/template/commons/buildExpression.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/parametersSetup.eol";



operation comperssorComandProcessor(dc,command){

	     switch  (command.name){
	      case "Create command": createCommand(dc,command); 
	      case "Update compressor command": updateCompressorCommand(dc,command);
	      case "Insert commpressor command": insertCommpressorCommand(dc,command);
	      case "Remove compressor command": removeCompressorCommand(dc,command);
	      case "Search command": searchCommand(dc,command);
	      default : "default".println();
	     
	     }

}

operation  createCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   
   var trigger = new form::CreateTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.create = trigger;
   commonInit(dc,command,trigger,"create");
   var ctxParam = null;
   var k =0 ;
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
	   switch (i){
		      case "0" :  ctxParam =typeParam(dc.baseType.typeRef,parameter);
           }
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
}

operation  searchCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new form::SearchTrigger;
   
   trigger.uid = uuid.randomUUID().toString();
   dc.search = trigger;
   
   commonInit(dc,command,trigger,"find");
   
   var ctxParam = null;
   var k =0 ;
	var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
	   if (treedc.~treeRoot.isDefined()){
	      switch (i){
		      case "0" :  ctxParam =treeDataControl(treedc,dc,"searchCriteria","DataControlFakeAttribute",parameter);
		      case "1":   ctxParam =treeDataControl(treedc,dc,"orderCriteria","DataControlFakeAttribute",parameter);
		      case "2":   ctxParam =treeDataControl(treedc,dc,"start Index","DataControlFakeAttribute",parameter);
		      case "3":   ctxParam =treeDataControl(treedc,dc,"end Index","DataControlFakeAttribute",parameter);
		      case "4":   ctxParam =typeParam(dc.baseType.typeRef,parameter);
		  }  
	   }else{
	      switch (i){
		      case "0" :  ctxParam =simpleDataControl(dc,"searchCriteria","DataControlFakeAttribute",parameter);
		      case "1":   ctxParam =simpleDataControl(dc,"orderCriteria","DataControlFakeAttribute",parameter);
		      case "2":   ctxParam =simpleDataControl(dc,"start Index","DataControlFakeAttribute",parameter);
		      case "3":   ctxParam =simpleDataControl(dc,"end Index","DataControlFakeAttribute",parameter);
		      case "4":   ctxParam =typeParam(dc.baseType.typeRef,parameter);
	      }
	   }
       k = k + 1;
	   trigger.parameters.add(ctxParam);
	}   
}

operation  updateCompressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new form::UpdateTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.update = trigger;

   commonInit(dc,command,trigger,"update");
   var ctxParam = null;
   var parameter = trigger.methodRef.parameters.first();
    
   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
    
}

operation  insertCommpressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new form::InsertTrigger;
   
   trigger.uid = uuid.randomUUID().toString();
   dc.insert = trigger;

   commonInit(dc,command,trigger,"insert");
   var ctxParam = null;
   var parameter = trigger.methodRef.parameters.first();

   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   

}

operation  removeCompressorCommand(dc,command) { 
   var uuid := Native('java.util.UUID');
   var trigger = new form::DeleteTrigger;
   trigger.uid = uuid.randomUUID().toString();
   dc.remove = trigger;
   
   commonInit(dc,command,trigger,"remove");
   var ctxParam = null;
   var k =0 ;
   var treedc = dc.findTreeRoot();
   for ( parameter in  trigger.methodRef.parameters){
       var i = k.toString();
		if (treedc.~treeRoot.isDefined()){
		   switch (i){
			      case "0" :  ctxParam =treeDataControl(treedc,dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}else{
		   switch (i){
			      case "0" :  ctxParam =simpleDataControl(dc,"currentObject","DataControlFakeMethod",parameter);
	        }
		}
      k = k + 1;
	  trigger.parameters.add(ctxParam);
    }   
   
}
