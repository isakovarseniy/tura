operation type::TypeElement mappingType2Java( recipe:Recipe, ingredient :Ingredient) { 

    var appmappers =   new Native('java.util.ArrayList');  
    var util = new Native('org.tura.metamodel.commons.Util');

    var tp=self;
    if (self.isTypeOf(type::TypeReference)){
        tp = self.typeRef;
    }
    
    appmappers.addAll(recipe.mappers);
    appmappers.addAll(ingredient.mappers);


    for( appmapper in appmappers ){
         var selfUID = self.uid;
         tp = self;
         if (self.isTypeOf(type::TypeReference)){
             selfUID = self.typeRef.uid;
             tp = self.typeRef;
         }
          var set = appmapper.mappers.select(r|r.isKindOf(JavaMapper) and r.typeRef.uid= selfUID);
          if ( set.size() <> 0 ){
              var type =  util.mapType(set,ingredient,tp) ;
              if ( type <> null){
                 self.~mapper="Type2Java";
                 self.~class=type.mappedToClassName;
                 self.~package= type.mappedToPackageName;
                 if (type.mappedToPackageName <>'' and type.mappedToPackageName <> null)
                     self.~fullName=type.mappedToPackageName+"."+type.mappedToClassName;
                  else
                     self.~fullName=type.mappedToClassName;
                 self.~artifactId=type.artifactId;
                 self.~groupId=type.groupId;
                 self.~version= type.version;
                 if (type.libraryName <> null)
                     self.~library = type.libraryName;
                 else{
                    if ( type.artifactId<> null and type.version <> null )
                        self.~library=type.artifactId+"-"+type.version+"."+type.artifactType;
                    else
                        self.~library=null;
                 }    
              }  
          }    
     }

     if (self.~class = null and tp <> null){
	    for( appmapper in appmappers ){
	         var pkg =  self.eContainer();
	         var pkgUID = self.eContainer().uid;
	         if (self.isTypeOf(type::TypeReference)){
	             pkgUID = self.typeRef.eContainer().uid;
	             pkg =  self.typeRef.eContainer();
	         }
	         
	         var set = appmapper.mappers.select(r|r.isKindOf(mapper::JavaPackageMapper) and r.packageRef.uid= pkgUID);
             if ( set.size() <> 0 ){
              var pkgMp =  util.mapPackage(set,ingredient,pkg) ;
 
              if ( pkgMp <> null){
                 self.~mapper="Type2Java";
                 self.~class=util.mergeAndCapitalize(self.name);
                 self.~package= pkgMp.mappedToPackageName;
                 self.~fullName=pkgMp.mappedToPackageName+"."+self.~class;
                 self.~artifactId=pkgMp.artifactId;
                 self.~groupId=pkgMp.groupId;
                 self.~version= pkgMp.version;
                 if (pkgMp.libraryName <> null)
                     self.~library = pkgMp.libraryName;
                 else{
                    if ( pkgMp.artifactId<> null and pkgMp.version <> null )
                        self.~library=pkgMp.artifactId+"-"+pkgMp.version+"."+pkgMp.artifactType;
                    else
                        self.~library=null;
                 }    
              }  
             
             }
	     }
     }

     if (self.~class = null and tp <> null){
/*  Cannot throw exception */     
         var container = "Primitives";
         if ( not tp.isTypeOf(type::Primitive)){
            container = tp.eContainer().name;
         } 


         util.traceIfDebug("JavaMapper","Unable to find JavaMapper for type \"" + container+"."+tp.name+"\" on layer \"" + ingredient.layer +"\"");
         self.~mapper="Type2Java";
         self.~class="Unable to find JavaMapper for type \"" + container+"."+ tp.name +"\" on layer \"" + ingredient.layer +"\"";
         self.~package= "Unable to find JavaMapper for type \""+ container+"."+ tp.name +"\" on layer \"" + ingredient.layer +"\"";
         self.~fullName="Unable to find JavaMapper for type \"" + container+"."+ tp.name +"\" on layer \"" + ingredient.layer +"\"";
         self.~artifactId="Unable to find JavaMapper for type \""+ container+"." + tp.name +"\" on layer \"" + ingredient.layer +"\"";
         self.~groupId="Unable to find JavaMapper for type \"" + container+"."+ tp.name +"\" on layer \"" + ingredient.layer +"\"";
         self.~version= "Unable to find JavaMapper for type \"" + container+"."+ tp.name +"\" on layer \"" + ingredient.layer +"\"";
         
     }
} 


operation type::TypeElement mappingType2JavaScript( recipe:Recipe, ingredient :Ingredient) { 

    var appmappers =   new Native('java.util.ArrayList');  
    var util = new Native('org.tura.metamodel.commons.Util');
    
    appmappers.addAll(recipe.mappers);
    appmappers.addAll(ingredient.mappers);

    for( appmapper in appmappers ){
         var set = appmapper.mappers.select(r|r.isKindOf(JavaScriptMapper) and  r.typeRef.uid= self.uid);
          if ( set.size() <> 0 ){
            for( s in set){
             self.~mapper="Type2JavaScript";
             self.~url=s.libraryUrl;
             break;
             }
           }
    }
    
     if (self.~url = null ){
/*  Cannot throw exception */     
         util.traceIfDebug("Type2JavaScript","Unable to find Type2JavaScript for type \"" + self.name +"\" on layer \"" + ingredient.layer +"\"");
     }    
}



