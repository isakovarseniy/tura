<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/${Entity_implementation}.egl";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 ${percent}${end}

[%
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');

     var type;
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 


    if (alltypes.size() <> 0 ){
       for (type in alltypes){
          type.mappingType2Java(recipe,ingredient);

          var extension = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.classifiers->size() = 0 ).first();
          
          if (extension <> null){
	          var ex =  extension.target;
	          if (ex.isKindOf(type::TypeReference )){
	             ex = extension.target.typeRef;
	          }
	          ex.mappingType2Java(recipe,ingredient);
	          type.~extension = ex;
           }
           
           var skipAttributes=new Native('java.util.ArrayList');

           var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
           for (rel in assosiations){
  	          var tp =  rel.target;
	          if (tp.isKindOf(type::TypeReference )){
	             tp = tp.typeRef;
	          }
	          tp.mappingType2Java(recipe,ingredient);
           }

           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);

           for (rel in assosiations){
  	          var tp =  rel.source;
	          if (tp.isKindOf(type::TypeReference )){
	             tp = tp.typeRef;
	          }
	          tp.mappingType2Java(recipe,ingredient);
           }
           
           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and (t.type.toString() = "One2One" or t.type.toString() = "One2Many"));
           for (rel in assosiations){
                for (lnk in rel.links){
                   skipAttributes.add(lnk.detailField);
                }
           }           
           type.~skipAttributes=skipAttributes;

          var path = component.getComponentRoot+"/"+component.getArtifactId()+"/src/main/java/";  
          hash.put("type",type);
          hash.put("recipe",recipe);
          hash.put("ingredient",ingredient);
          hash.put("component",component);
          hash.put("model_mapper",model_mapper);
          hash.put("path",path);    
     
          entitygeneration(hash);
       }
    }
%]
