[%
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
%]

[% @template
operation  maven_build_runner(hash) {

    var util = new Native('org.tura.metamodel.commons.Util');
     
    var configuration = hash.get("configuration");
    var component = hash.get("component");
    var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;  
    var model_mapper = hash.get("model_mapper");
 %]
[%=mavenBuilder_mavenCleanInstall(configuration, util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId,hash)%]
[%    

    model_mapper.artifactExecutionString=  os_shell_executor()+" "+path+"/"+"builder."+os_batch_extension();
    util.saveFile( path, "builder."+os_batch_extension(),out.toString());   
}

 @template
operation  maven_builder(hash) {


    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var alltypes = hash.get("alltypes");
    var configuration = hash.get("configuration");

    var util = new Native('org.tura.metamodel.commons.Util');
    var lib = new Native("java.util.HashMap"); 

     var currentLib = component.getArtifactId()+"-"+component.getVersion()+".jar";
     for (type in alltypes){
     

        type.mappingType2Java(recipe,ingredient,'VIEW');
         
        if (type.~mapper <> null and type.~mapper.equals('NA')<>true ){
 	         var h = new Native("java.util.HashMap"); 
	         h.put("groupId",type.~groupId);
	         h.put("artifactId",type.~artifactId);
	         h.put("version",type.~version);
	         lib.put(type.~library,h);
         }
        type.mappingType2Java(recipe,ingredient,'MODEL');
        if (type.~mapper <> null and type.~mapper.equals('NA')<>true ){
	         var h = new Native("java.util.HashMap"); 
	         h.put("groupId",type.~groupId);
	         h.put("artifactId",type.~artifactId);
	         h.put("version",type.~version);
	         lib.put(type.~library,h);
         }
      }

    hash.put("lib",lib);
    

    
    util.populateTechnologies(hash,model_mapper);

  
     var builder : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/Testing/CDI/Datacontrol/MavenBuilder.egl",hash,TemplateFactory);
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
     builder.setFormatter(f);
    
     var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;  
     var buffer = builder.process();
     util.saveFile( path, "pom.xml",buffer); 
}    

 @template
operation  ant_builder(hash) {
    
 
}
%]