<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";

 ${percent}${end}
 
 [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');

     var type;
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 


     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
     var nsHash = new Native("java.util.HashMap"); 
 
      if (types <> null and types.size <> 0 ){
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper);
	    }
 
      var i = 0; 
      for(type in typeCollection){
         type.mappingType2XML(recipe,ingredient);
         if (nsHash.get(type.~namespace) == null ){
            var arr =  new Native("java.util.ArrayList");
            var col = new Native("java.util.HashMap"); 
            arr.add(col);
            arr.add(i);
            nsHash.put(type.~namespace,arr);
            i = i +1;
         }
         nsHash.get(type.~namespace).get(0).put(type.~fullname,type);
      }
 
      for( targetnamespace in nsHash.keySet()  ){
		var path = component.getComponentRoot+"/"+component.getArtifactId()+"/src/main/xsd/";  
        var returnHash = new Native('java.util.HashMap');
		hash.put("returnHash",returnHash);
		hash.put("fullCollection",typeCollection);
		hash.put("fullHash",nsHash);
		hash.put("typeCollection",nsHash.get(targetnamespace).get(0));
		hash.put("targetnamespace",targetnamespace);
		hash.put("recipe",recipe);
		hash.put("ingredient",ingredient);
		hash.put("component",component);
		hash.put("model_mapper",model_mapper);
		hash.put("path",path);    
	 
	    var xsd : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JSE/xml/xsd.egl",hash,TemplateFactory);
	    xsd.setFormatter(f);
	    var buffer = xsd.process();


		hash.put("body",buffer);
	    var xsdHeader : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JSE/xml/xsdHeader.egl",hash,TemplateFactory);
	    xsdHeader.setFormatter(f);
	    var buffer = xsdHeader.process();
	    
	    util.saveFile( path, "schema_"+nsHash.get(targetnamespace).get(1)+".xsd",buffer);   
      
      } 

   }
 
 
 operation type::TypeElement collectType(typeCollection,model_mapper){
    var tp = self;
    var util = new Native('org.tura.metamodel.commons.Util');

    if (self.isTypeOf(type::TypeReference)){
        tp = self.typeRef;
    }
    if (typeCollection.contains(tp)){
        return;
    }
    typeCollection.add(tp);
    
     var skipAttributes=new Native('java.util.ArrayList');

     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid  and t.source.uid <> t.target.uid);
     for (rel in assosiations){
         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
                continue;
         }
  	    var tp1 =  rel.target;
	    if (tp1.isKindOf(type::TypeReference )){
	        tp1 = tp1.typeRef;
	    }
	    tp1.collectType(typeCollection,model_mapper);
     }


     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid  and t.source.uid <> t.target.uid);
     for (rel in assosiations){
         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
                continue;
         }
  	    var tp1 =  rel.source;
	    if (tp1.isKindOf(type::TypeReference )){
	        tp1 = tp1.typeRef;
	    }
	    tp1.collectType(typeCollection,model_mapper);
     }

           
     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and (t.type.toString() = "One2One" or t.type.toString() = "One2Many"));
     for (rel in assosiations){
         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
                continue;
         }
         for (lnk in rel.links){
             skipAttributes.add(lnk.detailField);
         }
     }           
    self.~skipAttributes=skipAttributes;
    
    var extension = type::Generalization.allInstances()->select(t|t.source.uid = tp.uid  and t.classifiers->size() = 0 ).first();
        if (extension <> null){
	          var ex =  extension.target;
	          if (ex.isKindOf(type::TypeReference )){
	             ex = extension.target.typeRef;
	    }
	    ex.collectType(typeCollection,model_mapper);
	    tp.~extension = ex;
    }
 }
 
 
%]