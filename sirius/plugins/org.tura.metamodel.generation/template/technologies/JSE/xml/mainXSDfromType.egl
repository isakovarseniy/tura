<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";

 ${percent}${end}
 
 [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');

     var type;
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 


     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection);
	    }
 
 
		var path = component.getComponentRoot+"/"+component.getArtifactId()+"/src/main/resources/";  
		hash.put("typeCollection",typeCollection);
		hash.put("recipe",recipe);
		hash.put("ingredient",ingredient);
		hash.put("component",component);
		hash.put("model_mapper",model_mapper);
		hash.put("path",path);    
	 
	    var xsd : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JSE/xml/xsd.egl",hash,TemplateFactory);
	    xsd.setFormatter(f);
	    var buffer = xsd.process();
	    util.saveFile( path, "schema.xsd",buffer);   

      }
 
 
 operation type::TypeElement collectType(typeCollection){
    var tp = self;
    if (self.isTypeOf(type::TypeReference)){
        tp = self.typeRef;
    }
    typeCollection.add(tp);
    
    var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid and t.source.uid <> t.target.uid);
    for (rel in assosiations){
  	    var tp1 =  rel.target;
	    if (tp1.isKindOf(type::TypeReference )){
	             tp1 = tp1.typeRef;
	    }
	    tp1.collectType(typeCollection);
    }
    
    var extension = type::Generalization.allInstances()->select(t|t.source.uid = tp.uid  and t.classifiers->size() = 0 ).first();
        if (extension <> null){
	          var ex =  extension.target;
	          if (ex.isKindOf(type::TypeReference )){
	             ex = extension.target.typeRef;
	    }
	    ex.collectType(typeCollection);
	    tp.~extension = ex;
    }
 }
 
 
%]