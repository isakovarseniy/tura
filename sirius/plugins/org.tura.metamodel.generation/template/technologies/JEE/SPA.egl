[% @template
operation  entitygeneration(hash) {

   var util = new Native('org.tura.metamodel.commons.Util');
   var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
        
    var type =  hash.get("type");
    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var path = hash.get("path");
    
    util.populateTechnologies(hash,model_mapper);
    type.collectType(null);

    var entityBean : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/entity.egl",hash,TemplateFactory);
    entityBean.setFormatter(f);
    var buffer = entityBean.process();
    util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class + ".java",buffer);   

    type.collectType(null);
    if (type.~primaryKey.isDefined() and type.~primaryKey.size() >1 ){

    var entitypk : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/entitypk.egl",hash,TemplateFactory);
    entitypk.setFormatter(f);
    var buffer = entitypk.process();
    util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class + "PK.java",buffer);   
    
    }


}

 operation type::TypeElement collectType(pk){
    var tp = self;
    var primaryKey=pk;
    if (pk == null){
        primaryKey=new Native('java.util.ArrayList');
        self.~primaryKey = primaryKey;
    }

     for(field in tp.attributes){
        if (field.pk){
            primaryKey.add(field);
        }
     }

    var extension = type::Generalization.allInstances()->select(t|t.source.uid = tp.uid  and t.classifiers->size() = 0 ).first();
    if (extension <> null){
	   var ex =  extension.target;
	   if (ex.isKindOf(type::TypeReference )){
	       ex = extension.target.typeRef;
	   }
	   ex.collectType(primaryKey);
    }
}

%]