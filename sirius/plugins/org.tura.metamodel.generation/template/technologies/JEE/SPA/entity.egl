[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 
 var util = new Native('org.tura.metamodel.commons.Util');
%]
package [%=type.~package%];  

public class [%=type.~class%]  [%if (type.~extension.isDefined()){%]  extends [%=type.~extension.~fullName%]  [%}%] {


[%for ( field in type.attributes){
     if (type.~skipAttributes.contains(field) )
        continue; 
     
    field.typeRef.mappingType2Java(recipe,ingredient);

    %]
    
	private [%= field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%];
	
	public void set[%=util.mergeAndCapitalize(field.name)%](  [%= field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%]){
		this.[%=util.mergeAndUnCapitalize(field.name)%] = [%=util.mergeAndUnCapitalize(field.name)%];
	}
	public [%= field.typeRef.~fullName%] get[%=util.mergeAndCapitalize(field.name)%](){
		return [%=util.mergeAndUnCapitalize(field.name)%];
	}
	
[%}%]

	[%
	  var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
      for (rel in assosiations){
      
         var hash = rel.sourceSideNamesCalculation();
         
  	     switch  (rel.type.toString()){
         case "One2One" : %] private [%=hash.get("target").~fullName%]  [%=hash.get("sourceProperty")%];[%
         case "One2Many" : %]  private java.util.Collection<[%=hash.get("target").~fullName%]>  [%=hash.get("sourceProperty")%];[%
         case "Many2Many" : %] private java.util.Collection<[%=hash.get("target").~fullName%]>  [%=hash.get("sourceProperty")%];[%
         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] public [%=hash.get("target").~fullName%]  get[%=hash.get("sourceMethodName")%]()[%
         case "One2Many" : %] public java.util.Collection<[%=hash.get("target").~fullName%]>  get[%=hash.get("sourceMethodName")%]()[%
         case "Many2Many" : %] public java.util.Collection<[%=hash.get("target").~fullName%]>  get[%=hash.get("sourceMethodName")%]()[%
         }                
         %] { return [%=hash.get("sourceProperty")%]; } [%
         
  	     switch  (rel.type.toString()){
         case "One2One" : %] public  void set[%=hash.get("sourceMethodName")%]([%=hash.get("target").~fullName%]  [%=hash.get("sourceProperty")%])[%
         case "One2Many" : %] public  void  set[%=hash.get("sourceMethodName")%](java.util.Collection<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%])[%
         case "Many2Many" : %] public  void  set[%=hash.get("sourceMethodName")%](java.util.Collection<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%])[%
         }                
         %] { this.[%=hash.get("sourceProperty")%]=[%=hash.get("sourceProperty")%]; } [%
         
         
      }
	%]

	[%
	  var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
      for (rel in assosiations){
      
         var hash = rel.targetSideNamesCalculation();
      
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] private [%=hash.get("source").~fullName%]  [%=hash.get("targetProperty")%];[%
         case "One2Many" : %] private [%=hash.get("source").~fullName%]  [%=hash.get("targetProperty")%];[%
         case "Many2Many" : %] private java.util.Collection<[%=hash.get("source").~fullName%]>  [%=hash.get("targetProperty")%];[%
         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] public [%=hash.get("source").~fullName%]  get[%=hash.get("targetMethodName")%]()[%
         case "One2Many" : %] public [%=hash.get("source").~fullName%]  get[%=hash.get("targetMethodName")%]()[%
         case "Many2Many" : %] public java.util.Collection<[%=hash.get("source").~fullName%]>  get[%=hash.get("targetMethodName")%]()[%
         }                
         %] { return [%=hash.get("targetProperty")%]; } [%

  	     switch  (rel.type.toString()){
         case "One2One" : %] public  void  set[%=hash.get("targetMethodName")%]([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%])[%
         case "One2Many" : %] public void set[%=hash.get("targetMethodName")%]([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%])[%
         case "Many2Many" : %] public  void set[%=hash.get("targetMethodName")%](java.util.Collection<[%=hash.get("source").~fullName%]> [%=hash.get("targetProperty")%])[%
         }                
         %] { this.[%=hash.get("targetProperty")%]=[%=hash.get("targetProperty")%]; } [%


      }
	%]
}
