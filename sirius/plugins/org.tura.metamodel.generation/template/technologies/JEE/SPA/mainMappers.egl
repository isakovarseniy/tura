<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";


 ${percent}${end}
 
 
  [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var templateStore = new Native('java.util.HashMap');


     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
      
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

	    
      var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  

      for(type in typeCollection){
         type.mappingType2Java(recipe,ingredient);
         if (type.isTypeOf(type::Type)){
		     for ( field in type.attributes){
		        field.typeRef.mappingType2Java(recipe,ingredient);
		     }
         }
      }	    
 
      for(type in types){
         
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }

	    hash.put("type",type);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
		    
	    util.populateTechnologies(hash,model_mapper);
		
	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/loaderObjectCommand.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+type.~package.replaceAll("\\.","\\/")+"/commands", "Loader"+type.~class+"Command.java",buffer);   
         

	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/decouplerObjectCommand.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+type.~package.replaceAll("\\.","\\/")+"/commands", "Decoupler"+type.~class+"Command.java",buffer);   

	    if (type.~primaryKey.isDefined() and type.~primaryKey.size() >1 ){
		
		    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/loaderPKCommand.egl",hash,TemplateFactory,templateStore);
		    serializer.setFormatter(f);
		    var buffer = serializer.process();
		    util.saveFile( path+type.~package.replaceAll("\\.","\\/")+"/commands", "Loader"+type.~class+"PKCommand.java",buffer);   
	    

		    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/decouplerPKCommand.egl",hash,TemplateFactory,templateStore);
		    serializer.setFormatter(f);
		    var buffer = serializer.process();
		    util.saveFile( path+type.~package.replaceAll("\\.","\\/")+"/commands", "Decoupler"+type.~class+"PKCommand.java",buffer);   

	    
	    }
          

        var allRel = new Native('java.util.ArrayList');
 		var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
 		allRel.addAll(assosiations);
 		assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
 		allRel.addAll(assosiations);
 		
 		for ( rel in allRel  ){

	       hash.put("rel",rel);
 		
		   var rule : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/loaderObjectRule.egl",hash,TemplateFactory,templateStore);
		   rule.setFormatter(f);
		   var buffer = rule.process();
		   
		   util.saveFile( path+rel.source.~package.replaceAll("\\.","\\/")+"/rules", "Loader"+rel.source.~class + rel.type.toString() +rel.target.~class+"Rule.java",buffer);   
 		
 		}
 		
    }

	    hash.put("types",types);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
		    
	    util.populateTechnologies(hash,model_mapper);
		
	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/SPA/factory.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+"org/tura/factory", "Factory.java",buffer);   
    
   }
   
   
   
%]