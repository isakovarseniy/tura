[%
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var hash = new Native('java.util.HashMap');
     var alltypes = new Native('java.util.ArrayList');
     

      var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
      
     var types = util.runQuery(model_mapper,"Query type",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 
     types = util.runQuery(model_mapper,"Query package of types",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types);       

    var lib = new Native('java.util.HashMap');

     var currentLib = component.getArtifactId()+component.getVersion()+".jar";
     for (type in alltypes){
        type.mappingType2Java(recipe,ingredient);
        if (type.~library <> null and type.~library.equals(currentLib)<>true ){
              lib.put(type.~library,type);
        }
     }

      hash.put("lib",lib);


       hash.put("recipe",recipe);
       hash.put("ingredient",ingredient);
       hash.put("component",component);
       hash.put("model_mapper",model_mapper);
       hash.put("configuration",configuration);
       hash.put("alltypes",alltypes);

     
       util.populateTechnologies(hash,model_mapper);
       
      var path = component.getComponentRoot+"/"+component.getArtifactId;  
       
      var viewporttriggerproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/formInterfacePom-xml.egl",hash,TemplateFactory);
      viewporttriggerproducer.setFormatter(x);
      var buffer = viewporttriggerproducer.process();
      util.saveFile( path , "pom.xml",buffer);  

%]
