<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
 
 package [%=t2view.get(type).get("package")%].mapper;
 
 
 public class [%=t2view.get(type).get("class")%]Mapper implements org.tura.platform.repository.core.Mapper, org.tura.platform.repository.persistence.PersistanceMapper, org.tura.platform.repository.core.AdapterLoaderAware{
 
 
            private org.tura.platform.repository.core.AdapterLoader loader;
            
            public void setAdapterLoader(org.tura.platform.repository.core.AdapterLoader loader){
               this.loader=loader;
            }

		    public org.tura.platform.repository.core.AdapterLoader getAdapterLoader() {
		        return this.loader;
		    }
 
        	public Object getPKey(org.tura.platform.repository.core.RepoObjectKey objKey)throws org.tura.platform.repository.core.RepositoryException {
	    	try{
		      	[%=PKRepoObjectKey(type,"pk","objKey.getKey()",t2model.get(type).get("fullName"),recipe,ingredient)%]   
		      	return pk;
	    	}catch(Exception e){
	    		throw new org.tura.platform.repository.core.RepositoryException(e);
	    	}
      	
        }
 
       private Object find(String field, java.util.List<org.tura.platform.repository.core.FieldValue> list) throws Exception {
		for (org.tura.platform.repository.core.FieldValue f : list) {
			if (f.getName().equals(field)) {
				Class<?> clazz = Class.forName(f.getType());
				java.lang.reflect.Constructor<?> c = clazz.getConstructor(String.class);
				return c.newInstance(f.getValue());
			}
		}
		throw new org.tura.platform.repository.core.RepositoryException("Could not find a field " + field);
	}
 
 
 
 
      	public Object getPrimaryKey(Object persistenceObject){

	    [%=t2model.get(type).get("fullName")%] spa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
      	
      	[%=PK(type,"pk","spa",t2model.get(type).get("fullName"),recipe,ingredient)%]   
      	return pk;
      	}
      	
      	public Object getPrimaryKeyFromRepositoryObject(Object repositoryObject){

	    [%=t2view.get(type).get("fullName")%] obj = ( [%=t2view.get(type).get("fullName")%]) repositoryObject;
      	
      	[%=PK(type,"pk","obj",t2model.get(type).get("fullName"),recipe,ingredient)%]   
      	return pk;
      	}      	
      	
	    public Object copyFromPersistence2Repository(Object persistenceObject, Object repositoryObject) throws org.tura.platform.repository.core.RepositoryException{
	               java.util.Map<Object, Object> context = new java.util.HashMap<Object, Object>();
	               put(context, this.getPrimaryKey(persistenceObject ),persistenceObject );
	               return copyFromPersistence2Repository(persistenceObject,repositoryObject,context);
	               
        }      	
        
        
	    public Object copyFromPersistence2Repository(Object persistenceObject, Object repositoryObject, java.util.Map<Object, Object> context) throws org.tura.platform.repository.core.RepositoryException{
	    
	    [%=t2model.get(type).get("fullName")%] spa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    
	    

          if ( spa != null){
	    
	    [%=stringPK(type,"key","spa",t2model.get(type).get("fullName"))%]
	    
	      obj.setAttached(true);
          obj.setSerializationid(key.toString());
	    [%
	       var tp = type;
	        while  (1 == 1) {
	         %]
	          [%=serializer(tp,type.~skipAttributes,"spa","obj")%]
	          [%=saveLink(tp,type.~skipAttributes,"spa","obj")%]

	          [%
	           var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid and  t.internal );
	           for ( rel in assosiations  ){
			  	 switch  (rel.type.toString()){
			         case "One2One" :  %][%=rel.one2oneSrcPersist2Reposit(recipe,ingredient,model_mapper,"spa","obj",t2view,t2model)%][%
			         case "One2Many" : %][%=rel.one2ManySrcPersist2Reposit(recipe,ingredient,model_mapper,"spa","obj",t2view,t2model)%][%
			         case "Many2Many" : %][%
			     }
	          }
	          
	           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and  t.internal );
	           for ( rel in assosiations  ){
			  	 switch  (rel.type.toString()){
			         case "One2One" :  %][%=rel.one2oneTrgPersist2Reposit(recipe,ingredient,model_mapper,"spa","obj",t2view,t2model)%][%
			         case "One2Many" : %][%=rel.one2ManyTrgPersist2Reposit(recipe,ingredient,model_mapper,"spa","obj",t2view,t2model)%][%
			         case "Many2Many" : %][%
			     }
	          }
	          
	          
	          %]
	         [%  
	            if (tp.~extension.isDefined()){
	               tp = tp.~extension;
	            }else{
	               break;
	            }
	         }     	    
	    
	    %]
	    return obj;
	    }else{
	      return null;
	    }
	    
	    }


	    public Object copyFromRepository2Persistence( Object repositoryObject) throws org.tura.platform.repository.core.RepositoryException{
	               java.util.Map<Object, Object> context = new java.util.HashMap<Object, Object>();
	               put(context, this.getPrimaryKeyFromRepositoryObject(repositoryObject ),repositoryObject );
	               return copyFromRepository2Persistence(repositoryObject,context);
	               
        }      	
	    
	    public Object copyFromRepository2Persistence( Object repositoryObject, java.util.Map<Object, Object> context)  throws org.tura.platform.repository.core.RepositoryException {
	       [%
             if ( not type.findClassifier(util.getHint(model_mapper,"Adapter"))  ){%]
		      [%=t2model.get(type).get("fullName")%] spa = new  [%=t2model.get(type).get("fullName")%] ();
	       [%
	       }else{%]
		    [%=t2model.get(type).get("fullName")%] spa = ( [%=t2model.get(type).get("fullName")%]) loader.newAdapter( [%=t2model.get(type).get("fullName")%].class);
	       [%}
	       %]
		    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
		    if ( obj != null){
 	    [%
	       var tp = type;
	        while  (1 == 1) {
	         %]
	          [%=serializer(tp,type.~skipAttributes,"obj","spa")%]
	          [%
	           var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid and  t.internal );
	           for ( rel in assosiations  ){
			  	 switch  (rel.type.toString()){
			         case "One2One" :  %][%=rel.one2oneSrcReposit2Persist(recipe,ingredient,model_mapper,"obj","spa",t2view,t2model)%][%
			         case "One2Many" : %][%=rel.one2ManySrcReposit2Persist(recipe,ingredient,model_mapper,"obj","spa",t2view,t2model)%][%
			         case "Many2Many" : %][%
			     }
	          }

	           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and  t.internal );
	           for ( rel in assosiations  ){
			  	 switch  (rel.type.toString()){
			         case "One2One" :  %][%=rel.one2oneTrgReposit2Persist(recipe,ingredient,model_mapper,"obj","spa",t2view,t2model)%][%
			         case "One2Many" : %][%=rel.one2ManyTrgReposit2Persist(recipe,ingredient,model_mapper,"obj","spa",t2view,t2model)%][%
			         case "Many2Many" : %][%
			     }
	          }

	          %]
	         [%  
	            if (tp.~extension.isDefined()){
	               tp = tp.~extension;
	            }else{
	               break;
	            }
	         }     	    
	    
	    %]
	    return spa;
	    }else{
	      return null;
	    }


	    }
	    


    private void put( java.util.Map<Object,Object> context, Object pk, Object type ){
         String key = type.getClass().getName();
         java.util.List<Object> loadedObjects = (java.util.List<Object>) context.get(key);
		if (loadedObjects == null) {
			loadedObjects = new java.util.ArrayList<Object>();
			context.put(key, loadedObjects);
		}
		if (loadedObjects.contains(pk)) {
			return;
		} else {
			loadedObjects.add(pk);
			return;
		}
    }
    private Object get( java.util.Map<Object,Object> context, Object pk, Object type ){
         String key = type.getClass().getName();
         java.util.List<Object> loadedObjects = (java.util.List<Object>) context.get(key);
		if (loadedObjects == null) {
		   return null;
		}else{
		   if (loadedObjects.contains(pk)) {
		      return pk; 
           }else{
              return null;
           }		
		}
    }    
    
}	    
    
 [%

@template
operation type::Assosiation one2oneSrcPersist2Reposit(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.sourceSideNamesCalculation();
     %]
           org.tura.platform.repository.core.Mapper maper[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("package")%].mapper.[%=t2view.get(self.target).get("class")%]Mapper();
           [%=t2view.get(self.target).get("fullName")%] obj[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("fullName")%]();
           [%=t2model.get(self.target).get("fullName")%] spa[%=t2model.get(self.target).get("class")%] = [%=src%].get[%=hash.get("sourceMethodName")%]();
           
           if (spa[%=t2model.get(self.target).get("class")%] != null){
                Object pk[%=t2model.get(self.target).get("class")%] =  maper[%=t2view.get(self.target).get("class")%].getPrimaryKey(spa[%=t2model.get(self.target).get("class")%]);
                if ( get(context,pk[%=t2model.get(self.target).get("class")%]  , spa[%=t2model.get(self.target).get("class")%]) == null ){
                   put(context, pk[%=t2model.get(self.target).get("class")%], spa[%=t2model.get(self.target).get("class")%]);
                    
		           maper[%=t2view.get(self.target).get("class")%].copyFromPersistence2Repository(spa[%=t2model.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%],context);
		           
		           [%=trg%].set[%=hash.get("sourceMethodName")%](obj[%=t2view.get(self.target).get("class")%] );
		           obj[%=t2view.get(self.target).get("class")%] .set[%=hash.get("targetMethodName")%](obj);
	           }
           }
           
     [%
} 


@template
operation type::Assosiation one2oneTrgPersist2Reposit(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.targetSideNamesCalculation();
     %]
           org.tura.platform.repository.core.Mapper maper[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("package")%].mapper.[%=t2view.get(self.source).get("class")%]Mapper();
           [%=t2view.get(self.source).get("fullName")%] obj[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("fullName")%]();
           [%=t2model.get(self.source).get("fullName")%] spa[%=t2model.get(self.source).get("class")%] = [%=src%].get[%=hash.get("targetMethodName")%]();
           
           if (spa[%=t2model.get(self.source).get("class")%] != null){
                Object pk[%=t2model.get(self.source).get("class")%] =  maper[%=t2view.get(self.source).get("class")%].getPrimaryKey(spa[%=t2model.get(self.source).get("class")%]);
                if ( get(context,pk[%=t2model.get(self.source).get("class")%],spa[%=t2model.get(self.source).get("class")%]) == null ){
                   put(context,pk[%=t2model.get(self.source).get("class")%], spa[%=t2model.get(self.source).get("class")%]);
                    
		           maper[%=t2view.get(self.source).get("class")%].copyFromPersistence2Repository(spa[%=t2model.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%],context);
		           
		           [%=trg%].set[%=hash.get("targetMethodName")%](obj[%=t2view.get(self.source).get("class")%] );
		           obj[%=t2view.get(self.source).get("class")%] .set[%=hash.get("sourceMethodName")%](obj);
	           }
           }
           
     [%
} 



@template
operation type::Assosiation one2oneSrcReposit2Persist(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.sourceSideNamesCalculation();
     %]
           org.tura.platform.repository.persistence.PersistanceMapper maper[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("package")%].mapper.[%=t2view.get(self.target).get("class")%]Mapper();
           ((org.tura.platform.repository.core.AdapterLoaderAware) maper[%=t2view.get(self.target).get("class")%]).setAdapterLoader(loader);
           [%=t2view.get(self.target).get("fullName")%] obj[%=t2view.get(self.target).get("class")%] = [%=src%].get[%=hash.get("sourceMethodName")%]();
           
           
           if (obj[%=t2view.get(self.target).get("class")%]  != null ){
	           Object pk[%=t2view.get(self.target).get("class")%] = maper[%=t2view.get(self.target).get("class")%].getPrimaryKeyFromRepositoryObject(obj[%=t2view.get(self.target).get("class")%] );
	           if (get(context,pk[%=t2view.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%]) == null){
	               put(context,pk[%=t2view.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%]  );
	               
                   [%=t2model.get(self.target).get("fullName")%] spa[%=t2model.get(self.target).get("class")%] =( [%=t2model.get(self.target).get("fullName")%] ) maper[%=t2view.get(self.target).get("class")%].copyFromRepository2Persistence(obj[%=t2view.get(self.target).get("class")%],context);
	               
		           [%=trg%].set[%=hash.get("sourceMethodName")%](spa[%=t2model.get(self.target).get("class")%] );
		           spa[%=t2model.get(self.target).get("class")%] .set[%=hash.get("targetMethodName")%](spa);
           		}
           }
     [%
} 


@template
operation type::Assosiation one2oneTrgReposit2Persist(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.targetSideNamesCalculation();
     %]
           org.tura.platform.repository.persistence.PersistanceMapper maper[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("package")%].mapper.[%=t2view.get(self.source).get("class")%]Mapper();
           ((org.tura.platform.repository.core.AdapterLoaderAware) maper[%=t2view.get(self.source).get("class")%]).setAdapterLoader(loader);
           [%=t2view.get(self.source).get("fullName")%] obj[%=t2view.get(self.source).get("class")%] = [%=src%].get[%=hash.get("targetMethodName")%]();
           
           
           
           if (obj[%=t2view.get(self.source).get("class")%]  != null ){
	           Object pk[%=t2view.get(self.source).get("class")%] = maper[%=t2view.get(self.source).get("class")%].getPrimaryKeyFromRepositoryObject(obj[%=t2view.get(self.source).get("class")%] );
	           if (get(context,pk[%=t2view.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%]) == null){
	               put(context,pk[%=t2view.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%]  );

                   [%=t2model.get(self.source).get("fullName")%] spa[%=t2model.get(self.source).get("class")%] =( [%=t2model.get(self.source).get("fullName")%] ) maper[%=t2view.get(self.source).get("class")%].copyFromRepository2Persistence(obj[%=t2view.get(self.source).get("class")%],context);

		           [%=trg%].set[%=hash.get("targetMethodName")%](spa[%=t2model.get(self.source).get("class")%] );
		           spa[%=t2model.get(self.source).get("class")%] .set[%=hash.get("sourceMethodName")%](spa);
           		}
           }
     [%
} 


@template
operation type::Assosiation one2ManySrcPersist2Reposit(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.sourceSideNamesCalculation();
     %]
           org.tura.platform.repository.core.Mapper maper[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("package")%].mapper.[%=t2view.get(self.target).get("class")%]Mapper();
           java.util.Collection<[%=t2model.get(self.target).get("fullName")%]> spa[%=t2model.get(self.target).get("class")%]List = [%=src%].get[%=hash.get("sourceMethodName")%]();

           if (spa[%=t2model.get(self.target).get("class")%]List != null ){
	           for (   [%=t2model.get(self.target).get("fullName")%]  spa[%=t2model.get(self.target).get("class")%] : spa[%=t2model.get(self.target).get("class")%]List ){
	           
	              Object pk[%=t2model.get(self.target).get("class")%] =  maper[%=t2view.get(self.target).get("class")%].getPrimaryKey(spa[%=t2model.get(self.target).get("class")%]);
                if ( get(context,pk[%=t2model.get(self.target).get("class")%], spa[%=t2model.get(self.target).get("class")%]) == null ){
                      put(context,pk[%=t2model.get(self.target).get("class")%], spa[%=t2model.get(self.target).get("class")%]);
	
		              [%=t2view.get(self.target).get("fullName")%] obj[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("fullName")%]();
		              maper[%=t2view.get(self.target).get("class")%].copyFromPersistence2Repository(spa[%=t2model.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%],context);
		              [%=trg%].get[%=hash.get("sourceMethodName")%]().add(obj[%=t2view.get(self.target).get("class")%] );
		              obj[%=t2view.get(self.target).get("class")%] .set[%=hash.get("targetMethodName")%](obj);
	              }
	           }
           }
     [%
           }


@template
operation type::Assosiation one2ManyTrgPersist2Reposit(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.targetSideNamesCalculation();
     %]
           org.tura.platform.repository.core.Mapper maper[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("package")%].mapper.[%=t2view.get(self.source).get("class")%]Mapper();
           [%=t2view.get(self.source).get("fullName")%] obj[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("fullName")%]();
           [%=t2model.get(self.source).get("fullName")%] spa[%=t2model.get(self.source).get("class")%] = [%=src%].get[%=hash.get("targetMethodName")%]();
           
           if (spa[%=t2model.get(self.source).get("class")%] != null){
                Object pk[%=t2model.get(self.source).get("class")%] =  maper[%=t2view.get(self.source).get("class")%].getPrimaryKey(spa[%=t2model.get(self.source).get("class")%]);
                if ( get(context,pk[%=t2model.get(self.source).get("class")%], spa[%=t2model.get(self.source).get("class")%]) == null ){
                   put(context,pk[%=t2model.get(self.source).get("class")%], spa[%=t2model.get(self.source).get("class")%]);
                    
		           maper[%=t2view.get(self.source).get("class")%].copyFromPersistence2Repository(spa[%=t2model.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%],context);
		           
		           [%=trg%].set[%=hash.get("targetMethodName")%](obj[%=t2view.get(self.source).get("class")%] );
		           obj[%=t2view.get(self.source).get("class")%] .get[%=hash.get("sourceMethodName")%]().add(obj);
	           }
           }
           
     [%
} 



@template
operation type::Assosiation one2ManySrcReposit2Persist(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     %]
           org.tura.platform.repository.persistence.PersistanceMapper maper[%=t2view.get(self.target).get("class")%] = new [%=t2view.get(self.target).get("package")%].mapper.[%=t2view.get(self.target).get("class")%]Mapper();
           ((org.tura.platform.repository.core.AdapterLoaderAware) maper[%=t2view.get(self.target).get("class")%]).setAdapterLoader(loader);
           java.util.Collection<[%=t2view.get(self.target).get("fullName")%]> obj[%=t2view.get(self.target).get("class")%]List = [%=src%].get[%=hash.get("sourceMethodName")%]();

           if( obj[%=t2view.get(self.target).get("class")%]List != null ){
	           for (   [%=t2view.get(self.target).get("fullName")%]  obj[%=t2view.get(self.target).get("class")%] : obj[%=t2view.get(self.target).get("class")%]List ){
		           Object pk[%=t2view.get(self.target).get("class")%] = maper[%=t2view.get(self.target).get("class")%].getPrimaryKeyFromRepositoryObject(obj[%=t2view.get(self.target).get("class")%] );
		           if (get(context,pk[%=t2view.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%] ) == null){
		               put(context,pk[%=t2view.get(self.target).get("class")%],obj[%=t2view.get(self.target).get("class")%] );
	
	              [%=t2model.get(self.target).get("fullName")%] spa[%=t2view.get(self.target).get("class")%] = ([%=t2model.get(self.target).get("fullName")%])maper[%=t2view.get(self.target).get("class")%].copyFromRepository2Persistence(obj[%=t2view.get(self.target).get("class")%],context);
	             
	              [%  if ( not self.source.findClassifier(util.getHint(model_mapper,"Adapter"))  ){ %] 
	               if ([%=trg%].get[%=hash.get("sourceMethodName")%]() == null){
	                  [%=trg%].set[%=hash.get("sourceMethodName")%]( new java.util.ArrayList<[%=t2model.get(self.target).get("fullName")%]>());
	               }  
	             
	             [%}%]
	              [%=trg%].get[%=hash.get("sourceMethodName")%]().add(spa[%=t2view.get(self.target).get("class")%] );
	              [%
                   if ( self.findClassifier(util.getHint(model_mapper,"OneWayAssociation"))  ){
                   %]       
	                    spa[%=t2view.get(self.target).get("class")%] .set[%=hash.get("targetMethodName")%](spa);
                    [%
	                }
	              %]
	              }
	           }
           }
     [%
} 

@template
operation type::Assosiation one2ManyTrgReposit2Persist(recipe,ingredient,model_mapper,src,trg,t2view,t2model){
     var hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     %]
           org.tura.platform.repository.persistence.PersistanceMapper maper[%=t2view.get(self.source).get("class")%] = new [%=t2view.get(self.source).get("package")%].mapper.[%=t2view.get(self.source).get("class")%]Mapper();
           ((org.tura.platform.repository.core.AdapterLoaderAware) maper[%=t2view.get(self.source).get("class")%]).setAdapterLoader(loader);
           [%=t2view.get(self.source).get("fullName")%] obj[%=t2view.get(self.source).get("class")%] = [%=src%].get[%=hash.get("targetMethodName")%]();
           
           
           if (obj[%=t2view.get(self.source).get("class")%] != null ){
	           Object pk[%=t2view.get(self.source).get("class")%] = maper[%=t2view.get(self.source).get("class")%].getPrimaryKeyFromRepositoryObject(obj[%=t2view.get(self.source).get("class")%] );
	           if (get(context,pk[%=t2view.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%]) == null){
	               put(context,pk[%=t2view.get(self.source).get("class")%],obj[%=t2view.get(self.source).get("class")%] );

                   [%=t2model.get(self.source).get("fullName")%] spa[%=t2model.get(self.source).get("class")%] =( [%=t2model.get(self.source).get("fullName")%] ) maper[%=t2view.get(self.source).get("class")%].copyFromRepository2Persistence(obj[%=t2view.get(self.source).get("class")%],context);

		           [%=trg%].set[%=hash.get("targetMethodName")%](spa[%=t2model.get(self.source).get("class")%] );
	           
		           [%  if ( not self.source.findClassifier(util.getHint(model_mapper,"Adapter"))  ){   %]
		           if (spa[%=t2model.get(self.source).get("class")%] .get[%=hash.get("sourceMethodName")%]() == null){
		               spa[%=t2model.get(self.source).get("class")%] .set[%=hash.get("sourceMethodName")%]( new java.util.ArrayList<[%=t2model.get(self.target).get("fullName")%]>());
		           }
		           [%  } %]
		           spa[%=t2model.get(self.source).get("class")%] .get[%=hash.get("sourceMethodName")%]().add(spa);
           		}
           }
     [%
} 




 %]