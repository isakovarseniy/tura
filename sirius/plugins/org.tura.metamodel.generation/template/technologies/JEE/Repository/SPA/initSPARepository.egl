<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
 
 package [%=savepackage%];
 
 import org.tura.platform.repository.core.Registry;
 import org.tura.platform.repository.spa.SpaObjectRegistry;
 
 public class InitSPARepository{
 
     org.tura.platform.repository.spa.SpaRepository repository;
     private Registry registry;
     private SpaObjectRegistry spaRegistry;;
     
     public InitSPARepository(SpaRepository repository){
         this.repository = repository;
         this.repository.setRegistry("[%=component.artifactId%]");
         registry = Registry.getInstance();
         spaRegistry= SpaObjectRegistry.getInstance();
     }
 
    public void initProvider(){
    
       [%
         for(type in typeCollection){
		       if (not  type.findClassifier(util.getHint(model_mapper,"Domain Object")) ){
		           continue;
		        }
       %] 
        registry.addProvider("[%=t2model.get(type).get("fullName")%]",repository);
       [%
       }
       %] 
    }
 
     public void initClassMapping() throws Exception{
    
       [%
         for(type in typeCollection){
		       if (not  type.findClassifier(util.getHint(model_mapper,"Domain Object")) ){
		           continue;
		        }
       %] 
        registry.addClassMapping( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]");
        registry.addMapper( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]", new [%=t2view.get(type).get("package")%].mapper.[%=t2view.get(type).get("class")%]Mapper() );
        spaRegistry.getRegistry("[%=component.artifactId%]").addSpaClass("[%=t2model.get(type).get("fullName")%]");
        spaRegistry.getRegistry("[%=component.artifactId%]").addMapper( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]", new [%=t2view.get(type).get("package")%].mapper.[%=t2view.get(type).get("class")%]Mapper() );
        
       [%
       
          var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
	      for (rel in assosiations){
	         if ( rel.internal  ){
	               continue;
	         }%]
             spaRegistry.getRegistry("[%=component.artifactId%]").addTrigger([%=t2model.get(rel.source).get("fullName")%].class, new org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger());
	         [%
          }
	     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
	      for (rel in assosiations){
	         if ( rel.internal  ){
	               continue;
	         }%]
             spaRegistry.getRegistry("[%=component.artifactId%]").addTrigger([%=t2model.get(rel.target).get("fullName")%].class, new org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger());
	         [%
          }
       }
       %] 
    
    }

     public void initCommandProducer(){
        registry.addCommandProducer(repository,new org.tura.platform.repository.spa.operation.SpaCommandProducer("[%=component.artifactId%]"));
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(new org.tura.platform.repository.spa.operation.SpaExternalConnectDetailToMasterOperation());
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(new org.tura.platform.repository.spa.operation.SpaExternalConnectMasterToDetailOperation());
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(new org.tura.platform.repository.spa.operation.SpaExternalDisconnectDetailFromMasterOperation());
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(new org.tura.platform.repository.spa.operation.SpaExternalDisconnectMasterFromDetailOperation());
        
     }
 
  
 
 
 }
 