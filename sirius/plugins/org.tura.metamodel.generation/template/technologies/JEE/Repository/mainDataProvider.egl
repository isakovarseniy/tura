<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/AddObjectCommand.egl";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/RemoveObjectCommand.egl";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";


 ${percent}${end}
 
 
  [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var t2view = new Native("java.util.HashMap"); 
     var t2model = new Native("java.util.HashMap"); 

     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     
     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
      
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

      for(type in typeCollection){
         type.mappingType2Java(recipe,ingredient,'MODEL');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2model.put(type,h);
         
         type.mappingType2Java(recipe,ingredient,'VIEW');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2view.put(type,h);
      }	    
 
	    hash.put("t2model",t2model);
	    hash.put("t2view",t2view);

	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
 
 
      var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
         
      if (t2model.size() <> 0){
          var list = model_mapper.findAllClassifiers( util.getHint(model_mapper,"DataProvider") );
          var dataprovider = "Default";
          if (list.size() <> 0 ){
            dataprovider = list.get(0).details;
          }
          list = model_mapper.findAllClassifiers(util.getHint(model_mapper,"DataProviderPackage"));
          var dataproviderPackage = "org.tura.provider";
          if (list.size() <> 0 ){
            dataproviderPackage = list.get(0).details;
          }
          
          hash.put("dataprovider",dataprovider);
          hash.put("dataproviderPackage",dataproviderPackage);
          
	 	  var mapper : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/dataProvider.egl",hash,TemplateFactory);
		  mapper.setFormatter(f);
		  var buffer = mapper.process();
			   
		  util.saveFile( path+dataproviderPackage.replaceAll("\\.","\\/"),dataprovider+"DataProvider.java",buffer);   
     }
 
   }
%]