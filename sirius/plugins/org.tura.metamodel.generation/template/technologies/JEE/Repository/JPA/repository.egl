<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";


 ${percent}${end}
 
 
  [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var t2view = new Native("java.util.HashMap"); 
     var t2model = new Native("java.util.HashMap"); 
     var templateStore = new Native('java.util.HashMap');


     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 

     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
      
        var resourcePath = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/resources/";  

	    var beansxml : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/CDI/datacontrol/beans-xml.egl",hash,TemplateFactory);
	    beansxml.setFormatter(x);
	    var buffer = beansxml.process();
	    util.saveFile( resourcePath+"/META-INF/"  , "beans.xml",buffer);   
      
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

	  var savepackage = null;
	    
      for(type in typeCollection){
         type.mappingType2Java(recipe,ingredient,'MODEL');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2model.put(type,h);
         
         type.mappingType2Java(recipe,ingredient,'VIEW');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2view.put(type,h);
      }	    
 
      var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
      for(type in t2model.keySet()){
         
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
       if (not  type.findClassifier(util.getHint(model_mapper,"Entity Object")) ){
           continue;
        }
        
	    hash.put("t2model",t2model);
	    hash.put("t2view",t2view);

	    hash.put("type",type);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
		    
	    util.populateTechnologies(hash,model_mapper);
		
		
	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/JPA/mapperClass.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/mapper", t2view.get(type).get("class")+"Mapper.java",buffer);   
 		
 		savepackage = t2view.get(type).get("package");

   }
     if (savepackage <> null){   
     	hash.put("savepackage",savepackage);
     	hash.put("typeCollection",typeCollection);
	    var init : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/JPA/initJPARepository.egl",hash,TemplateFactory,templateStore);
	    init.setFormatter(f);
	    var buffer = init.process();
	    util.saveFile( path+savepackage.replaceAll("\\.","\\/"), "InitJPARepository.java",buffer);   
     }
   
 }  
%]