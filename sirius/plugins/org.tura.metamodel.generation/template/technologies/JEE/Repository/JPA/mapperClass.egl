<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
 
 package [%=t2view.get(type).get("package")%].mapper;
 
 
 public class [%=t2view.get(type).get("class")%]Mapper implements org.tura.platform.repository.core.Mapper, org.tura.platform.repository.persistence.PersistanceMapper{
 
 
       	public Object getPKey(org.tura.platform.repository.core.RepoKeyPath pkpath)throws RepositoryException {
	    	try{
	    	   org.tura.platform.repository.core.RepoObjectKey objKey = pkpath.getPath().get(0);
	    	
		      	[%=PKRepoObjectKey(type,"pk","objKey.getKey()",t2model.get(type).get("fullName"),recipe,ingredient)%]   
		      	return pk;
	    	}catch(Exception e){
	    		throw new RepositoryException(e);
	    	}
      	
        }
 
 
 
       private Object find(String field, java.util.List<FieldValue> list) throws Exception {
		for (org.tura.platform.repository.core.FieldValue f : list) {
			if (f.getName().equals(field)) {
				Class<?> clazz = Class.forName(f.getType());
				java.lang.reflect.Constructor<?> c = clazz.getConstructor(String.class);
				return c.newInstance(f.getValue());
			}
		}
		throw new org.tura.platform.repository.core.RepositoryException("Could not find a field " + field);
	}
        
 
      	public Object getPrimaryKey(Object persistenceObject){

	    [%=t2model.get(type).get("fullName")%] jpa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
      	
      	[%=PK(type,"pk","jpa",t2model.get(type).get("fullName"),recipe,ingredient)%]   
      	return pk;
      	}
	    public Object copyFromPersistence2Repository(Object persistenceObject, Object repositoryObject){
	    
	    [%=t2model.get(type).get("fullName")%] jpa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    
	    [%=stringPK(type,"key","jpa",t2model.get(type).get("fullName"))%]
	    
	      obj.setAttached(true);
          obj.setSerializationid(key.toString());
	    [%
	       var tp = type;
	        while  (1 == 1) {
	         %]
	          [%=serializer(tp,type.~skipAttributes,"jpa","obj")%]
	         [%  
	            if (tp.~extension.isDefined()){
	               tp = tp.~extension;
	            }else{
	               break;
	            }
	         }     	    
	    
	    %]
	    return obj;
	    
	    }
	    
	    
	    	    public Object copyFromRepository2Persistence( Object repositoryObject){
	    
	    [%=t2model.get(type).get("fullName")%] jpa = new  [%=t2model.get(type).get("fullName")%] ();
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    
	    [%
	       var tp = type;
	        while  (1 == 1) {
	         %]
	          [%=serializer(tp,type.~skipAttributes,"obj","jpa")%]
	         [%  
	            if (tp.~extension.isDefined()){
	               tp = tp.~extension;
	            }else{
	               break;
	            }
	         }     	    
	    
	    %]
	    return jpa;
	    
	    }
 
	    
 
 }