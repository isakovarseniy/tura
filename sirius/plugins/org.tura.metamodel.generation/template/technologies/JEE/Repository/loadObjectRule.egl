[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(rel.source).get("package")%].rules;  

public class Load[%=t2view.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2view.get(rel.target).get("class")%]Rule implements org.tura.platform.repository.core.Rule {

      private [%=t2view.get(rel.source).get("fullName")%] source;
      private [%=t2view.get(rel.target).get("fullName")%] target;
      
      public void setSource([%=t2view.get(rel.source).get("fullName")%] source){
         this.source = source;
      }

      public void setTarget([%=t2view.get(rel.target).get("fullName")%] target){
         this.target = target;
      }
      
      public String getKey(){
		  StringBuffer key = new StringBuffer();
		  [%for ( field in rel.source.~primaryKey){%]
		   key.append(source.get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}%]
		  key.append("[%=t2view.get(rel.source).get("fullName")%]");

		  [%for ( field in rel.target.~primaryKey){%]
		   key.append(target.get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}%]
		  key.append("[%=t2view.get(rel.target).get("fullName")%]");
		  
		  return key.toString();
      }

      public void execute(){
      [%
      
                 var hash = rel.sourceSideNamesCalculation();
      
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]     source.set[%=hash.get("sourceMethodName")%](target);[%
		         case "One2Many" : %]   source.get[%=hash.get("sourceMethodName")%]().add(target);[%
		         case "Many2Many" : %] source.get[%=hash.get("sourceMethodName")%]().add(target);[%
		         }           
		         

	                var hash = rel.targetSideNamesCalculation();
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  target.set[%=hash.get("targetMethodName")%](source);[%
			         case "One2Many" : %] target.set[%=hash.get("targetMethodName")%](source);[%
			         case "Many2Many" : %] target.get[%=hash.get("targetMethodName")%]().add(source);[%
		         }                
		              
      %]
      }



}
 