<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/pit/mvc/model/datacontrolUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";

 ${percent}${end}
    [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var hash = new Native('java.util.HashMap');
     
 %]
 
 
 package [%=util.mergeAndUnCapitalize(application.name)%].[%=util.mergeAndUnCapitalize(uipackage.name)%];
 
 public class [%=util.mergeAndCapitalize(form.name)%]Profile  extends org.tura.platform.repository.core.ObjectGraphProfile {
 
    private java.util.ArrayList<String> profile = new java.util.ArrayList<String>();
 
 	public boolean skipRelation(Object repositoryObject, java.lang.reflect.Method method) {
 	  String key = repositoryObject.getClass().getName()+"."+method.getName();
 	    if (profile.contains(key)){
		    return false;
 	    }else{
 	       return true;
 	    }
	}
 
 	public String getProfileName(){
		return "[%=util.mergeAndUnCapitalize(application.name)%].[%=util.mergeAndUnCapitalize(uipackage.name)%].[%=util.mergeAndCapitalize(form.name)%]";
	}
 
 
   public [%=util.mergeAndCapitalize(form.name)%]Profile(){
   [%
            if (form.datacontrols <> null   and  form.datacontrols.controls <> null ){
            
               for (  dc in form.datacontrols.controls){
                   dc.definePager(recipe,ingredient,model_mapper, hash);

                   if (dc.~pagerType.equals("internalPager")){
                   
                   var type = dc.~parenType.typeRef;
	               type.mappingType2Java(recipe,ingredient,'MODEL');
                   
                   %]
                   
                   profile.add("[%=type.~fullName%].get[%=dc.~property%]");
                      [% 
                    var relSet = dc.eContainer().relations->select(r|r.isTypeOf(form::InternalRelation) and r.detail=dc and r.master=dc  );
                    if (relSet.size() <> 0){
                         var rel =relSet.iterator().next();
                    
				         var assossiations = type::Assosiation.allInstances()->select(t|t.source.uid = rel.master.baseType.typeRef.uid  and t.target.uid = rel.detail.baseType.typeRef.uid);
				         if (assossiations.size() == 0){
				             assossiations = type::Assosiation.allInstances()->select(t|t.target.uid = rel.master.baseType.typeRef.uid  and t.source.uid = rel.detail.baseType.typeRef.uid);
				         }
				         
				        var  assossiation = assossiations.iterator().next();
				        var hash = assossiation.findTypeOfAssosiation(model_mapper); 
	                    var type = rel.master.baseType.typeRef;
		                type.mappingType2Java(recipe,ingredient,'MODEL');
                   %]
                   profile.add("[%=type.~fullName%].get[%=dc.~property%]");
                      [% 
                    
                    }  
                      
                   }
               }
            }
%]          

   }
}      