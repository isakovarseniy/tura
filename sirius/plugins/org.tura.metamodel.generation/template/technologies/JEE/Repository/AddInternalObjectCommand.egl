[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 var tp = type;
 %]
package [%=t2view.get(type).get("package")%].commands;  

public class InternalAdd[%=t2view.get(type).get("class")%]Command{

         org.tura.platform.repository.core.PersistenceProvider pp;
	     public void setPersistenceProvider(org.tura.platform.repository.core.PersistenceProvider pp){
	           this.pp=pp;
	     }

        public void  insert([%=t2view.get(tp).get("fullName")%] obj,java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules){
        
          [%=t2model.get(tp).get("fullName")%] jpa = new [%=t2model.get(tp).get("fullName")%]();
          [%=PK(tp,"pk","obj",t2model.get(tp).get("fullName"),recipe,ingredient)%]   
          
		         [% 
		         while  (1 == 1) {%]
		          [%=serializer(tp,type.~skipAttributes,"obj","jpa")%]
		         [%  
		            if (tp.~extension.isDefined()){
		               tp = tp.~extension;
		            }else{
		               break;
		            }
		         }%]  
		   pp.persist(jpa);
         [%
           var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
        %]
          [%=add(recipe,ingredient,t2model,t2view,model_mapper,assosiations,tp)%]

         [%
           assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.target.uid <> t.source.uid);
        %]
          [%=add(recipe,ingredient,t2model,t2view,model_mapper,assosiations,tp)%]
        
        }
}
[%

@template
operation add(recipe,ingredient,t2model,t2view,model_mapper,assosiations,type){
     for (rel in assosiations){
        var hash = rel.findTypeOfAssosiation(model_mapper);
        var masterType =   hash.get("masterType");
        var detailType = hash.get("detailType");
        var property =  hash.get("property");
        
	    var suffix="";
	    if (masterType.~class == detailType.~class ){
	        suffix="Detail";
	    }
        
        if (hash.get("noAssosiation")){
           %][%=addNoAssosiationtRelation ( recipe,ingredient,t2view,t2model,rel,type,model_mapper,masterType)%][%
        }else{
	        if (hash.get("containment") and masterType.uid = type.uid){
              %][%=addContaintmentRelation(recipe,ingredient,t2view,t2model,rel,type,masterType)%][%
	        }else{
             %][%=addNonContaintmentRelation ( recipe,ingredient,t2view,t2model,rel,type,masterType)%][%
	        }
        }
     }
}

@template
 operation addContaintmentRelation ( recipe,ingredient,t2view,t2model,rel,type,masterType){
 
          var util = new Native('org.tura.metamodel.commons.Util');
          if (masterType.uid.equals( rel.source.uid) and  masterType.uid.equals( type.uid)){
%]
/*CD [%=rel.source.~class%]/[%=rel.target.~class%]  master [%=masterType.~class%]  */ 
[%		         

                 var hash = rel.sourceSideNamesCalculation();
                 var suffix =hash.get("sourceMethodName");
                 var serializer = t2view.get(rel.target).get("package")+".commands.InternalAdd"+ t2view.get(rel.target).get("class")+"Command" ;
                 
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("target")).get("fullName")%]  target[%=suffix%] =  obj.get[%=hash.get("sourceMethodName")%]();  if ( target[%=suffix%] != null ) { [%
		         case "One2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%]  != null){ [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%](); if (targets[%=hash.get("sourceMethodName")%]  != null){  [%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         }         
		                
                 %] 
                
                 
                 [%=serializer%] cmd[%=suffix%]  = new [%=serializer%] ();
                 cmd[%=suffix%].setPersistenceProvider(pp); 
                 cmd[%=suffix%].insert(target[%=suffix%],rules); 
 
                 [%=PK(rel.target,"pk"+suffix,"target"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   

                [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule rule[%=suffix%] = new [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule();
                rule[%=suffix%].setPersistenceProvider(pp);
                rule[%=suffix%].setSourcePk(pk);
                rule[%=suffix%].setTargetPk(pk[%=suffix%]);
                rules.put(rule[%=suffix%].getKey(), rule[%=suffix%]);

                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
         
         }
         if (masterType.uid.equals( rel.target.uid) and  masterType.uid.equals( type.uid)){
                var hash = rel.targetSideNamesCalculation();
%]
/*CO [%=rel.source.~class%]/[%=rel.target.~class%]  master [%=masterType.~class%]*/ 
[%		         
		         
                 var suffix=hash.get("targetMethodName");
                 var serializer = t2view.get(rel.source).get("package")+".commands.InternalAdd"+ t2view.get(rel.source).get("class")+"Command" ;
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "One2Many" : %] [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%]= obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("source")).get("fullName")%]> sources[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (sources[%=suffix%] != null ) {[%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=suffix%]) {[%
		         }         
		                
                 %] 
                
                 
                  [%=serializer%] cmd[%=suffix%]  = new [%=serializer%] ();
                  cmd[%=suffix%].setPersistenceProvider(pp); 
                  cmd[%=suffix%].insert(source[%=suffix%],rules); 

                 [%=PK(rel.source,"pk"+suffix,"source"+suffix,t2model.get(rel.source).get("fullName"),recipe,ingredient)%]   

                [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule rule[%=suffix%] = new [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule();

                rule[%=suffix%].setPersistenceProvider(pp);
                rule[%=suffix%].setSourcePk(pk[%=suffix%]);
                rule[%=suffix%].setTargetPk(pk);
                rules.put(rule[%=suffix%].getKey(), rule[%=suffix%]);


                 [%
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
         }
}

@template
 operation addNonContaintmentRelation ( recipe,ingredient,t2view,t2model,rel,type,masterType){
          var util = new Native('org.tura.metamodel.commons.Util');
          if (masterType.uid.equals( rel.source.uid)  and  masterType.uid.equals( type.uid) ){
%]
/*NCD [%=rel.source.~class%]/[%=rel.target.~class%] master [%=masterType.~class%]*/     
[%
                 var hash = rel.sourceSideNamesCalculation();
                 var suffix =hash.get("sourceMethodName");
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("target")).get("fullName")%]  target[%=suffix%] =  obj.get[%=hash.get("sourceMethodName")%]();  if ( target[%=suffix%] != null ) { [%
		         case "One2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%]  != null){ [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%](); if (targets[%=hash.get("sourceMethodName")%]  != null){  [%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         }         
		                
%]
                 [%=PK(rel.target,"pk"+suffix,"target"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   

                [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule rule[%=suffix%] = new [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule();
                rule[%=suffix%].setPersistenceProvider(pp);
                rule[%=suffix%].setSourcePk(pk);
                rule[%=suffix%].setTargetPk(pk[%=suffix%]);
                rules.put(rule[%=suffix%].getKey(), rule[%=suffix%]);
[%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
         
         }
         
         if (masterType.uid.equals( rel.target.uid)  and  masterType.uid.equals( type.uid) ){
                var hash = rel.targetSideNamesCalculation();
%]
/*NCO [%=rel.source.~class%]/[%=rel.target.~class%]  master [%=masterType.~class%]*/ 
[%		         
                 var suffix=hash.get("targetMethodName");
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "One2Many" : %] [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%]= obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("source")).get("fullName")%]> sources[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (sources[%=suffix%] != null ) {[%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=suffix%]) {[%
		         }         
		                
%]
                 
                 [%=PK(rel.source,"pk"+suffix,"source"+suffix,t2model.get(rel.source).get("fullName"),recipe,ingredient)%]   

                [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule rule[%=suffix%] = new [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule();

                rule[%=suffix%].setPersistenceProvider(pp);
                rule[%=suffix%].setSourcePk(pk[%=suffix%]);
                rule[%=suffix%].setTargetPk(pk);
                rules.put(rule[%=suffix%].getKey(), rule[%=suffix%]);

[%
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
         
         
         }
 
 
 
}

@template
 operation addNoAssosiationtRelation ( recipe,ingredient,t2view,t2model,rel,type,model_mapper,masterType){
          var util = new Native('org.tura.metamodel.commons.Util');
          var hash = rel.findTypeOfAssosiation(model_mapper);
          var masterType =   hash.get("masterType");
          var detailType = hash.get("detailType");
          var property =  hash.get("property");
          var containment = hash.get("containment");
          
          
         if (type.uid == detailType.uid and rel.type.toString <> "Many2Many"){
%]
/*NA DETAIL [%=rel.source.~class%]/[%=rel.target.~class%]*/     
[%
                 var suffix = masterType.~class;
		         
%]
                [%=PKDetails(masterType,"pk"+suffix,"obj",t2model.get(rel.source).get("fullName"),recipe,ingredient,rel)%]   
[%
                if (masterType.~primaryKey.size()>1){
                %]if ( ! pk[%=suffix%].isNull() ){  [%
                }else{
                %]if ( pk[%=suffix%] !=  null ){  [%
                }
%]                
                

                [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule rule[%=suffix%] = new [%=t2model.get(rel.source).get("package")%].rules.Add[%=t2model.get(rel.source).get("class")%][%=rel.type%][%=t2model.get(rel.target).get("class")%]JpaRule();

                rule[%=suffix%].setPersistenceProvider(pp);
                rule[%=suffix%].setSourcePk(pk[%=suffix%]);
                rule[%=suffix%].setTargetPk(pk);
                rules.put(rule[%=suffix%].getKey(), rule[%=suffix%]);
                
             }
[%		         
         } 
 
}

%]
