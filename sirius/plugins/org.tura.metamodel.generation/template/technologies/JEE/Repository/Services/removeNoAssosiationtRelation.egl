<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";


 ${percent}${end}
 
 

[%
      var util = new Native('org.tura.metamodel.commons.Util');
%]

     package [%=t2view.get(masterType).get("package")%].commands;  
      
      
      public class Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command implements org.tura.platform.repository.core.Command {
         org.tura.platform.repository.core.PersistenceProvider pp;
	     public void setPersistenceProvider(org.tura.platform.repository.core.PersistenceProvider pp){
	           this.pp=pp;
	     }
	     
	     
	     public Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(org.tura.platform.repository.core.PersistenceProvider pp){
	        this.pp=pp;
	     }
	     
        public Object execute( Object obj ){
           [%=t2view.get(masterType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data data = ([%=t2view.get(masterType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data) obj;

           [%=PK(masterType,"pkMaster","data",t2model.get(masterType).get("fullName"),recipe,ingredient,util.mergeAndCapitalize(masterType.name))%]
           [%=PK(detailType,"pkDetail","data",t2model.get(detailType).get("fullName"),recipe,ingredient,util.mergeAndCapitalize(detailType.name))%]
           
      [%
                  var source = util.mergeAndUnCapitalize(t2model.get(masterType).get("fullName"));
                  var sourcePk="pkMaster";
                  var target = util.mergeAndUnCapitalize(t2model.get(detailType).get("fullName"));
                  var targetPk = "pkDetail";
                  if (masterType == rel.target){
                     target = util.mergeAndUnCapitalize(t2model.get(masterType).get("fullName"));
                     targetPk = "pkMaster";
                     source = util.mergeAndUnCapitalize(t2model.get(detailType).get("fullName"));
                     sourcePk="pkDetail";
                  }
                 var hashSrc = rel.sourceSideNamesCalculation();
	             var hashTrg = rel.targetSideNamesCalculation();
      %]
      
        pp.disconnect([%=sourcePk%],"[%=hash.get("sourceMethodName")%]",[%=source%].class,[%=targetPk%],"[%=hash.get("targetMethodName")%]",[%=target%].class);

           return null;
        }
        
   }     