[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/Repository/repositoryCommon.egl";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  

public class [%=dataprovider%]DataProvider implements org.tura.platform.repository.core.DataProvider{

    private org.tura.platform.repository.core.Repository repository;
    private org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy;
    private java.util.HashMap<String,Class<?>> classLoader = new java.util.HashMap<String,Class<?>>();
    private java.util.HashMap<String,String> classMapper = new java.util.HashMap<String,String>();
    private java.util.HashMap<String,org.tura.platform.repository.core.Triggers> extTriggerHash = new java.util.HashMap<String,org.tura.platform.repository.core.Triggers>();
     private org.tura.platform.repository.core.PersistenceProvider pp;

     public void setPersistenceProvider(org.tura.platform.repository.core.PersistenceProvider pp){
           this.pp=pp;
     }
    
     public org.tura.platform.repository.core.PersistenceProvider getPersistenceProvider(){
           return this.pp;
     }
     
     public void setPkStrategy(org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy){
          this.pkStrategy=pkStrategy;
     }
     
     public [%=dataprovider%]DataProvider(){
     }
     
     public [%=dataprovider%]DataProvider(org.tura.platform.repository.core.Repository repository,org.tura.platform.repository.core.PersistenceProvider pp){
        this.repository=repository;
        this.pp=pp;
     }


	public void setRepository(org.tura.platform.repository.core.Repository repository) {
        this.repository=repository;
	}
     
     public void init(){
     [%
     for (tp in t2view.keySet()){
        if (not tp.~primaryKey.isDefined()  ){
           continue;
        }
     %]repository.addProvider(this,  [%=t2view.get(tp).get("fullName")%].class.getName());[%
     

		%]repository.addCommand(  this, [%=tp.~package%].Update[%=tp.~class%]Data.class.getName());[%
		%]classLoader.put(   [%=tp.~package%].Update[%=tp.~class%]Data.class.getName() , [%=tp.~package%].commands.Update[%=tp.~class%]Command.class);[%

     %]
         classLoader.put( [%=t2view.get(tp).get("fullName")%].class.getName(), [%=t2view.get(tp).get("package")%].commands.Load[%=t2view.get(tp).get("class")%]Command.class  );
         classMapper.put( [%=t2view.get(tp).get("fullName")%].class.getName(),[%=t2model.get(tp).get("fullName")%].class.getName()  );
     [%
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
            var containment = hash.get("containment");
     
        if (detailType.uid == tp.uid  and not hash.get("noAssosiation") and  rel.type.toString() <> "Many2Many"  and containment){
           topObject = false;
        }
        
        if (hash.get("noAssosiation")){
              %]
              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);

              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);
              [%
        }else{
	        if (hash.get("containment")){
              %]
              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(   [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);


              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(    [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);

              [%
	        }else{
              %]
              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(    [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);



              repository.addCommand(  this,  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              classLoader.put(    [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName(), [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command.class);
              [%
	        }
        }
     }
     if (topObject ){
         %]
         repository.addCommand(  this,  [%=t2view.get(tp).get("package")%].AddTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         classLoader.put(    [%=t2view.get(tp).get("package")%].AddTop[%=t2view.get(tp).get("class")%]Data.class.getName(), [%=t2view.get(tp).get("package")%].commands.AddTop[%=t2view.get(tp).get("class")%]Command.class);


         repository.addCommand(  this,  [%=t2view.get(tp).get("package")%].RemoveTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         classLoader.put(    [%=t2view.get(tp).get("package")%].RemoveTop[%=t2view.get(tp).get("class")%]Data.class.getName(), [%=t2view.get(tp).get("package")%].commands.RemoveTop[%=t2view.get(tp).get("class")%]Command.class);
         [%
     }
     %]
     [%
     }
     %]
     }


	@Override
	public org.tura.platform.repository.core.Command getCommand(String name) throws Exception{
		Class<?> clazz =  classLoader.get(name);
		java.lang.reflect.Constructor<?> c = clazz.getConstructor(org.tura.platform.repository.core.PersistenceProvider.class);
		return (Command) c.newInstance(pp);
	}
	
	
	private org.tura.platform.repository.core.Command findLoader(String name) throws Exception{
		Class<?> clazz =  classLoader.get(name);
		java.lang.reflect.Constructor<?> c = clazz.getConstructor(Repository.class );
		return (Command) c.newInstance(repository);
	}




	private String findPersistanceClass(String name) {
		return classMapper.get(name);
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			Object obj = Class.forName(objectClass).newInstance();
            if (pkStrategy != null){
            	pkStrategy.generatePk(obj);
            }
			return obj;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}
     

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public org.tura.platform.repository.core.SearchResult find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			String persistentClass = findPersistanceClass(objectClass);

    	    org.tura.platform.repository.core.Triggers triggers = extTriggerHash.get(persistentClass+".triggers."+"default");
			
			if (triggers != null ){
			    triggers.preQueryTrigger(searchCriteria, orderCriteria);
			}
			
			long numberOfRows = pp.findNumberOfRowsQuery(searchCriteria, orderCriteria, persistentClass);

			java.util.List list = (java.util.List<?>) pp.findObjectsQuery(searchCriteria, orderCriteria, startIndex, new Long(numberOfRows).intValue(),
					persistentClass);


			org.tura.platform.repository.core.Command cmd = findLoader(objectClass);
			for (int i = 0; i < list.size(); i++) {
				Object obj = cmd.execute(list.get(i));
			    if (triggers != null) {
			       triggers.postQueryTrigger(obj);
			    }
				list.set(i, obj);
			}
            return new org.tura.platform.repository.core.SearchResult(list, numberOfRows);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}


	
	@Override
	public void setTriggers(org.tura.platform.repository.core.Triggers  triggers) {
	   if (classMapper.values().contains(triggers.getCalssName())) {
		    extTriggerHash.put(triggers.getCalssName()+".triggers."+triggers.getQueryName(), triggers);
	   }
	}




}
