<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
package [%=tp.~package%];


public class  [%=tp.~class%]Proxy extends [%=tp.~fullName%]  implements org.tura.platform.repository.core.ObjectControl {

    private [%=tp.~fullName%] object;
    private java.util.Map <String,Object> attributes = new java.util.HashMap<String,Object>();

	private org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider;

    public  [%=tp.~class%]Proxy([%=tp.~fullName%] object, org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider){
    	this.object = object;
    	this.stackProvider = stackProvider;
    }
    
    public [%=tp.~fullName%] getWrappedObject(){
        return object;
    }
    
    public java.util.Map<String,Object> getAttributes(){
          return attributes;
    }
    
    @Override
    public boolean equals(Object o){
      if (o instanceof [%=tp.~package%].[%=tp.~class%]Proxy){
          return object.equals(  (([%=tp.~package%].[%=tp.~class%]Proxy)o).getWrappedObject()  );
     }else{
       return false;
     }  
    }
    
       public String getKey(){
		  StringBuffer key = new StringBuffer();
		  [%for ( field in tp.~primaryKey){%]
		   key.append(object.get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}%]
		  key.append("[%=tp.~fullName%]");

		  return key.toString();
      }
    
    
    
    
    [%
    
    var type = tp;
    while (1 == 1){
    
		for ( field in type.attributes){
		     if (type.~skipAttributes.contains(field) ){
		        continue; 
		     }   
		    field.typeRef.mappingType2Java(recipe,ingredient);
		    if (field.pk){
%]
	      @Override
		  public  [%=field.typeRef.~fullName%]   get[%=util.mergeAndCapitalize(field.name)%](){
		       return object.get[%=util.mergeAndCapitalize(field.name)%]();
          }

	      @Override
		  public  void set[%=util.mergeAndCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
	    	if ( object.getAttached() == null || !object.getAttached()){
			       object.set[%=util.mergeAndCapitalize(field.name)%]([%=util.mergeAndUnCapitalize(field.name)%]);
	    	}else{
	    		throw new RuntimeException("Could  not modify primary key on attached object");
	    	}
          }
[%		    
		    }else{
%]
	      @Override
		  public  [%=field.typeRef.~fullName%]   get[%=util.mergeAndCapitalize(field.name)%](){
		       return object.get[%=util.mergeAndCapitalize(field.name)%]();
          }

	      @Override
		  public  void set[%=util.mergeAndCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
			  try{
			    	if ( object.getAttached() == null || !object.getAttached()){
					     object.set[%=util.mergeAndCapitalize(field.name)%]([%=util.mergeAndUnCapitalize(field.name)%]);
			            return;
			    	}
			    	[%=tp.~package%].proxy.commands.Update[%=tp.~class%]On[%=util.mergeAndCapitalize(field.name)%]Command command = new [%=tp.~package%].proxy.commands.Update[%=tp.~class%]On[%=util.mergeAndCapitalize(field.name)%]Command();
			
			        command.set[%=tp.~class%](object);
			        command.setNew[%=util.mergeAndCapitalize(field.name)%]Value([%=util.mergeAndUnCapitalize(field.name)%]);
			        command.setOld[%=util.mergeAndCapitalize(field.name)%]Value(object.get[%=util.mergeAndCapitalize(field.name)%]());
			        command.setStackProvider(stackProvider);
			        if (command.prepare()){
			            object.set[%=util.mergeAndCapitalize(field.name)%]([%=util.mergeAndUnCapitalize(field.name)%]);
			        }
		          }catch(Exception e){
		            throw new RuntimeException(e);
		          }
	          }
[%		    
		    }
		}
		
	var domainConnectors = type::DomainConnector.allInstances()->select(t|t.source.uid = type.uid);
 	for (connector in domainConnectors){
 	  %][%=connector.domainObjectConnection(recipe,ingredient,model_mapper)%][%
 	}
		
 	 var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
 	 for ( rel in assosiations  ){
	  	 switch  (rel.type.toString()){
	         case "One2One" :  %][%=rel.one2oneSrc(recipe,ingredient,model_mapper)%][%
	         case "One2Many" : %][%=rel.one2manySrc(recipe,ingredient,model_mapper)%][%
	         case "Many2Many" : %][%=rel.many2manySrc(recipe,ingredient,model_mapper)%][%
	     }
         
     }			
	  var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
      for (rel in assosiations){
	  	 switch  (rel.type.toString()){
	         case "One2One" :  %][%=rel.one2oneTrg(recipe,ingredient,model_mapper)%][%
	         case "One2Many" : %][%=rel.one2manyTrg(recipe,ingredient,model_mapper)%][%
	         case "Many2Many" : %][%=rel.many2manyTrg(recipe,ingredient,model_mapper)%][%
	     }
      }		
      
    if (type.~extension.isDefined()){
       type = type.~extension;
    }else{
       break;
    }
      
}		    
%]
}        
      
[%

@template
operation type::DomainConnector domainObjectConnection(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
      self.target.mappingType2Java(recipe,ingredient);
%]
      @Override
      public java.util.List<[%=self.target.~fullName%]> get[%=self.target.~class%](){
    	return new java.util.AbstractList<[%=self.target.~fullName%]>() {

    		@Override
    		public void add(int i , [%=self.target.~fullName%] [%=util.mergeAndUnCapitalize(self.target.~class)%]){
		     [%
 		         for (lnk in self.links){
 		      %]
 		        [%=util.mergeAndUnCapitalize(self.target.~class)%].set[%=util.mergeAndCapitalize(lnk.detailField.name)%](object.get[%=util.mergeAndCapitalize(lnk.masterField.name)%]());     
     		[%
     		}
     		%]
     		 object.get[%=self.target.~class%]().add(i,[%=util.mergeAndUnCapitalize(self.target.~class)%]);
            }
            
       		@Override
       	    public  [%=self.target.~fullName%]  remove(int index) {
       	      [%=self.target.~fullName%] [%=util.mergeAndUnCapitalize(self.target.~class)%] = object.get[%=self.target.~class%]().remove(index);
		     [%
 		         for (lnk in self.links){
 		      %]
 		        [%=util.mergeAndUnCapitalize(self.target.~class)%].set[%=util.mergeAndCapitalize(lnk.detailField.name)%](null);     
     		[%
     		}
     		%]
       	      return [%=util.mergeAndUnCapitalize(self.target.~class)%];
       	    }

			@Override
			public [%=self.target.~fullName%] get(int index) {
				[%=self.target.~fullName%]  [%=util.mergeAndUnCapitalize(self.target.~class)%] = object.get[%=self.target.~class%]().get(index);
				if ([%=util.mergeAndUnCapitalize(self.target.~class)%] instanceof [%=self.target.~fullName%]Proxy){
					return  [%=util.mergeAndUnCapitalize(self.target.~class)%];
				}else{
				   return new [%=self.target.~fullName%]Proxy(object.get[%=self.target.~class%]().get(index),stackProvider);
				}
			}

			@Override
			public int size() {
				return object.get[%=self.target.~class%]().size();
			}
    	};
      }
[%
}


@template
operation type::Assosiation one2oneSrc(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.one2oneSrcNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.one2oneSrcRel(recipe,ingredient,model_mapper)%][%
     }

} 

@template
operation type::Assosiation one2manySrc(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.one2manySrcNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.one2manySrcRel(recipe,ingredient,model_mapper)%][%
     }
} 

@template
operation type::Assosiation many2manySrc(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.many2manySrcNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.many2manySrcRel(recipe,ingredient,model_mapper)%][%
     }
} 

operation type::Assosiation one2oneTrg(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.one2oneTrgNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.one2oneTrgRel(recipe,ingredient,model_mapper)%][%
     }

} 

@template
operation type::Assosiation one2manyTrg(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.one2manyTrgNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.one2manyTrgRel(recipe,ingredient,model_mapper)%][%
     }
} 

@template
operation type::Assosiation many2manyTrg(recipe,ingredient,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
     if ( self.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
          %][%=self.many2manyTrgNo(recipe,ingredient,model_mapper)%][%
     }else{
          %][%=self.many2manyTrgRel(recipe,ingredient,model_mapper)%][%
     }
} 


@template
operation type::Assosiation one2oneSrcNo(recipe,ingredient,model_mapper){
}

@template
operation type::Assosiation one2oneSrcRel(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     %]
     @Override
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%](){
        if (object.get[%=hash.get("sourceMethodName")%]() == null){
            return null;
        }
        return new [%=hash.get("target").~fullName%]Proxy(object.get[%=hash.get("sourceMethodName")%](),stackProvider);
     }
     
     @Override
     public void set[%=hash.get("sourceMethodName")%] ([%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
     [%
        if (masterType.uid == self.source.uid ){
        %]
       try{
		   if ( object.getAttached() == null || !object.getAttached()){
		        if ([%=hash.get("sourceProperty")%] != null){
	               object.set[%=hash.get("sourceMethodName")%]((([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
	               (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().set[%=hash.get("targetMethodName")%](object);
	             }else{
	               object.set[%=hash.get("sourceMethodName")%](null);
	             }
	            return;
	   	    }
	   	    
	    	[%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	
	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object.get[%=hash.get("sourceMethodName")%]());
		    command.setStackProvider(stackProvider);
	        command.prepare();
	        
	          if ([%=hash.get("sourceProperty")%] != null){
		    	[%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command2 = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
		
		    	command2.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
		        command2.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]((([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
		        command2.setStackProvider(stackProvider);
		
		        if (command2.prepare()){
		            object.set[%=hash.get("sourceMethodName")%]((([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
		            (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().set[%=hash.get("targetMethodName")%](object);
		        }
		     }
	     }catch(Exception e){
            throw new RuntimeException(e);
          }
	     
        [%
        }else{
        %]
            	throw new UnsupportedOperationException();
        [%
        
        }
     
     %]
     }
     [%  
}


@template
operation type::Assosiation one2manySrcRel(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.source.uid ){

     %]
     @Override
     public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
    	return new java.util.AbstractList<[%=hash.get("target").~fullName%]>() {
    		
    		@Override
    		public void add(int i , [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
    		try{
		    	  if ( object.getAttached() == null || !object.getAttached()){
	    	            object.get[%=hash.get("sourceMethodName")%]().add(i,(([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
	    	            (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().set[%=hash.get("targetMethodName")%](object);
	    	            return;
	    	    	}
	    	    	
	                [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
	    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]((([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
		            command.setStackProvider(stackProvider);
	
	    	        if (command.prepare()){
	    	            object.get[%=hash.get("sourceMethodName")%]().add(i,(([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
	    	            (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().set[%=hash.get("targetMethodName")%](object);
	    	        }
	          }catch(Exception e){
	            throw new RuntimeException(e);
	          }
    		}

       		@Override
       	    public [%=hash.get("target").~fullName%] remove(int index) {
       	    try{
		    	if ( object.getAttached() == null || !object.getAttached()){
	    	    		object.get[%=hash.get("sourceMethodName")%]().get(index).set[%=hash.get("targetMethodName")%](null);
	    	            return object.get[%=hash.get("sourceMethodName")%]().remove(index);
	    	    	}
	    	    	
	    	      [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	
	    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
	    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object.get[%=hash.get("sourceMethodName")%]().get(index));
		            command.setStackProvider(stackProvider);
	
	    	        if (command.prepare()){
	    	    		object.get[%=hash.get("sourceMethodName")%]().get(index).set[%=hash.get("targetMethodName")%](null);
	    	            return object.get[%=hash.get("sourceMethodName")%]().remove(index);
	    	        }
	    	        return null;
		          }catch(Exception e){
		            throw new RuntimeException(e);
		          }
    	    }

    		
			@Override
			public [%=hash.get("target").~fullName%] get(int index) {
				[%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%] = object.get[%=hash.get("sourceMethodName")%]().get(index);
				if ([%=hash.get("sourceProperty")%] instanceof [%=hash.get("target").~fullName%]Proxy){
					return [%=hash.get("sourceProperty")%];
				}else{
				   return new [%=hash.get("target").~fullName%]Proxy(object.get[%=hash.get("sourceMethodName")%]().get(index),stackProvider);
				}
			}

			@Override
			public int size() {
				return object.get[%=hash.get("sourceMethodName")%]().size();
			}
    		
		};
     }
     [%
     }else{
     %]
     @Override
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%](){
         return new [%=hash.get("target").~fullName%]Proxy(object.get[%=hash.get("sourceMethodName")%](),stackProvider);
     }

     @Override
     public void  set[%=hash.get("sourceMethodName")%]( [%=hash.get("target").~fullName%]  [%=hash.get("targetPropertyt")%]){
          throw new UnsupportedOperationException();
     }
     [%
     }
}

@template
operation type::Assosiation one2manySrcNo(recipe,ingredient,model_mapper){


}

@template
operation type::Assosiation many2manySrcNo(recipe,ingredient,model_mapper){
}

@template
operation type::Assosiation many2manySrcRel(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.source.uid ){

     %]
     @Override
     public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
    	return new java.util.AbstractList<[%=hash.get("target").~fullName%]>() {
    		
    		@Override
    		public void add(int i , [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
    		try{
		    	if ( object.getAttached() == null || !object.getAttached()){
	    	            object.get[%=hash.get("sourceMethodName")%]().add(i,(([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
	    	            (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().get[%=hash.get("targetMethodName")%]().add(object);
	    	            return;
	    	    	}
	    	    	
	                [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
	    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]((([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
		            command.setStackProvider(stackProvider);
	 
	    	        if (command.prepare()){
	    	            object.get[%=hash.get("sourceMethodName")%]().add(i,(([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject());
	    	            (([%=hash.get("target").~fullName%]Proxy)[%=hash.get("sourceProperty")%]).getWrappedObject().get[%=hash.get("targetMethodName")%]().add(object);
	    	        }
	          }catch(Exception e){
	            throw new RuntimeException(e);
	          }
    		}

       		@Override
       	    public [%=hash.get("target").~fullName%] remove(int index) {
       	    try{
		    	if ( object.getAttached() == null || !object.getAttached()){
	    	    		[%=detailType.~fullName%] m=  object.get[%=hash.get("sourceMethodName")%]().remove(index);
	    	    		m.get[%=hash.get("targetMethodName")%]().remove(object);
	    	            return m;
	    	    	}
	    	    	
	    	      [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	
	    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
	    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object.get[%=hash.get("sourceMethodName")%]().get(index));
		            command.setStackProvider(stackProvider);
	
	    	        if (command.prepare()){
	    	    		[%=detailType.~fullName%] m=  object.get[%=hash.get("sourceMethodName")%]().remove(index);
	    	    		m.get[%=hash.get("targetMethodName")%]().remove(object);
	    	            return m;
	    	        }
	    	        return null;
	          }catch(Exception e){
	            throw new RuntimeException(e);
	          }
    	        
    	    }

    		
			@Override
			public [%=hash.get("target").~fullName%] get(int index) {
				[%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%] = object.get[%=hash.get("sourceMethodName")%]().get(index);
				if ([%=hash.get("sourceProperty")%] instanceof [%=hash.get("target").~fullName%]Proxy){
					return [%=hash.get("sourceProperty")%];
				}else{
				   return new [%=hash.get("target").~fullName%]Proxy(object.get[%=hash.get("sourceMethodName")%]().get(index),stackProvider);
				}
			}

			@Override
			public int size() {
				return object.get[%=hash.get("sourceMethodName")%]().size();
			}
    		
		};
     }
     [%
     }else{
     %]
     [%
     }
}


@template
operation type::Assosiation one2oneTrgNo(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     masterType.mappingType2Java(recipe,ingredient);
     detailType.mappingType2Java(recipe,ingredient);

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (detailType.uid == self.target.uid ){
         for (lnk in self.links){
            lnk.detailField.typeRef.mappingType2Java(recipe,ingredient);
         %]
         
         private boolean is[%=util.mergeAndCapitalize(lnk.detailField.name)%] = false;
			@Override
			public [%=lnk.detailField.typeRef.~fullName%] get[%=util.mergeAndCapitalize(lnk.detailField.name)%](){
			   return object.get[%=util.mergeAndCapitalize(lnk.detailField.name)%]();
			}
         
			@Override
			public void set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=lnk.detailField.typeRef.~fullName%] [%=util.mergeAndUnCapitalize(lnk.detailField.name)%] ){
			try{
		    	if ( object.getAttached() == null || !object.getAttached()){
	 				   object.set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=util.mergeAndUnCapitalize(lnk.detailField.name)%]);
	    	           return ;
	    	    	}
	
	
	                is[%=util.mergeAndCapitalize(lnk.detailField.name)%] = true;
			        boolean b=
			      [%
			      var i = 0;
	               for (nk in self.links){
			          if(i<>0){%]&[%}%]
			    	is[%=util.mergeAndCapitalize(nk.detailField.name)%]
	              [%
	              i = 1;
	              }
	              %];
	                if (b){
				      [%
		               for (nk in self.links){%]
				    	is[%=util.mergeAndCapitalize(nk.detailField.name)%] = false;
		              [%}%]
	
				      [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
				      [%
		               for (nk in self.links){
				      %]
				    	command.set[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(nk.masterField.name)%](object.get[%=util.mergeAndCapitalize(nk.detailField.name)%]());
		              [%
		              }
		              %]
				        command.set[%=util.mergeAndCapitalize(detailType.~class)%](object);
				        command.setStackProvider(stackProvider);
				        command.prepare();
				        
				        if ([%=util.mergeAndUnCapitalize(lnk.detailField.name)%] != null){
	
					      [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command2 = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	                      command2.setStackProvider(stackProvider);
					      [%
			               for (nk in self.links){
					      %]
					    	command2.set[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(nk.masterField.name)%]([%=util.mergeAndUnCapitalize(nk.detailField.name)%]);
			              [%
			              }
			              %]
					        command2.set[%=util.mergeAndCapitalize(detailType.~class)%](object);
				
					        if (command2.prepare()){
					            object.set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=util.mergeAndUnCapitalize(lnk.detailField.name)%]);
					        }
			           } 
			       }
			  }catch(Exception e){
	            throw new RuntimeException(e);
	          }
			       
			}
         [%
         }
     }

}

@template
operation type::Assosiation one2oneTrgRel(recipe,ingredient,model_mapper){

     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     %]
     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%](){
        if (object.get[%=hash.get("targetMethodName")%]() == null){
            return null;
        }
     
        return new [%=hash.get("source").~fullName%]Proxy(object.get[%=hash.get("targetMethodName")%](),stackProvider);
     }
     
     @Override
     public void set[%=hash.get("targetMethodName")%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
     [%
        if (masterType.uid == self.target.uid ){
        %]
        try{
			   if ( object.getAttached() == null || !object.getAttached()){
			     if ([%=hash.get("targetProperty")%] != null){
		            object.set[%=hash.get("targetMethodName")%](  (([%=hash.get("source").~fullName%]Proxy)[%=hash.get("targetProperty")%]).getWrappedObject());
		            (([%=hash.get("source").~fullName%]Proxy)[%=hash.get("targetProperty")%]).getWrappedObject().set[%=hash.get("sourceMethodName")%](object);
		           }else{
		              object.set[%=hash.get("targetMethodName")%](  null );
		           }
		            return;
		   	    }
		   	    
		    	[%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
		
		    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
		        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object.get[%=hash.get("targetMethodName")%]());
			    command.setStackProvider(stackProvider);
		        command.prepare();
		
		           if ([%=hash.get("targetProperty")%] != null){
			    	[%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command2 = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
			
			    	command2.set[%=util.mergeAndCapitalize(masterType.~class)%](object);
			        command2.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]((([%=hash.get("source").~fullName%]Proxy)[%=hash.get("targetProperty")%]).getWrappedObject());
			        command2.setStackProvider(stackProvider);
			
			        if (command2.prepare()){
			            object.set[%=hash.get("targetMethodName")%]((([%=hash.get("source").~fullName%]Proxy)[%=hash.get("targetProperty")%]).getWrappedObject());
			            (([%=hash.get("source").~fullName%]Proxy)[%=hash.get("targetProperty")%]).getWrappedObject().set[%=hash.get("sourceMethodName")%](object);
			        }
			       }
          }catch(Exception e){
            throw new RuntimeException(e);
          }
        [%
        }else{
        %]
            	throw new UnsupportedOperationException();
        [%
        
        }
     
     %]
     
     }
     [%  
}


@template
operation type::Assosiation one2manyTrgNo(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     masterType.mappingType2Java(recipe,ingredient);
     detailType.mappingType2Java(recipe,ingredient);

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (detailType.uid == self.target.uid ){
         for (lnk in self.links){
            lnk.detailField.typeRef.mappingType2Java(recipe,ingredient);
         %]
         
         private boolean is[%=util.mergeAndCapitalize(lnk.detailField.name)%] = false;
			@Override
			public [%=lnk.detailField.typeRef.~fullName%] get[%=util.mergeAndCapitalize(lnk.detailField.name)%](){
			   return object.get[%=util.mergeAndCapitalize(lnk.detailField.name)%]();
			}
         
			@Override
			public void set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=lnk.detailField.typeRef.~fullName%] [%=util.mergeAndUnCapitalize(lnk.detailField.name)%] ){
			   try{ 
	    	    if ( object.getAttached() == null || !object.getAttached()){
				   object.set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=util.mergeAndUnCapitalize(lnk.detailField.name)%]);
    	           return ;
    	    	}


                is[%=util.mergeAndCapitalize(lnk.detailField.name)%] = true;
		        boolean b=
		      [%
		      var i = 0;
               for (nk in self.links){
		          if(i<>0){%]&[%}%]
		    	is[%=util.mergeAndCapitalize(nk.detailField.name)%]
              [%
              i = 1;
              }
              %];
                if (b){
			      [%
	               for (nk in self.links){%]
			    	is[%=util.mergeAndCapitalize(nk.detailField.name)%] = false;
	              [%}%]

			      [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
			      [%
	               for (nk in self.links){
			      %]
			    	command.set[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(nk.masterField.name)%]([%=util.mergeAndUnCapitalize(nk.detailField.name)%]);
	              [%
	              }
	              %]
			        command.set[%=util.mergeAndCapitalize(detailType.~class)%](object);
			        command.setStackProvider(stackProvider);
			        command.prepare();

				      [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command2 = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
			          command2.setStackProvider(stackProvider);
				      [%
		               for (nk in self.links){
				      %]
				    	command2.set[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(nk.masterField.name)%]([%=util.mergeAndUnCapitalize(nk.detailField.name)%]);
		              [%
		              }
		              %]
				        command2.set[%=util.mergeAndCapitalize(detailType.~class)%](object);
			
				        if (command2.prepare()){
				            object.set[%=util.mergeAndCapitalize(lnk.detailField.name)%]([%=util.mergeAndUnCapitalize(lnk.detailField.name)%]);
				        }
		           }
		          }catch(Exception e){
		            throw new RuntimeException(e);
		          }
		       }
		        
         [%
         }
     }

}

@template
operation type::Assosiation one2manyTrgRel(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.target.uid ){
     %]   Should not have this !!!!  [%
     }else{
     %]
     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%](){
         return new [%=hash.get("source").~fullName%]Proxy(object.get[%=hash.get("targetMethodName")%](),stackProvider);
     }

     @Override
     public void set[%=hash.get("targetMethodName")%]( [%=hash.get("source").~fullName%]  [%=hash.get("sourceProperty")%]){
          throw new UnsupportedOperationException();
     }
     [%
     }
}

@template
operation type::Assosiation many2manyTrgNo(recipe,ingredient,model_mapper){
}

@template
operation type::Assosiation many2manyTrgRel(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.target.uid ){
     %]
     [%
     }else{
     %]
     @Override
     public java.util.List<[%=hash.get("source").~fullName%]> get[%=hash.get("targetMethodName")%](){
    	return new java.util.AbstractList<[%=hash.get("source").~fullName%]>() {
    		
    		@Override
    		public void add(int i , [%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
    		   try{
			    	if ( object.getAttached() == null || !object.getAttached()){
		    	            object.get[%=hash.get("targetMethodName")%]().add(i,[%=hash.get("targetProperty")%]);
		    	            [%=hash.get("targetProperty")%].get[%=hash.get("sourceMethodName")%]().add(object);
		    	            return;
		    	    	}
		    	    	
		                [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Add[%=util.mergeAndCapitalize(detailType.~class )%]2[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
		    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%]([%=hash.get("targetProperty")%]);
		    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object);
			            command.setStackProvider(stackProvider);
		
		    	        if (command.prepare()){
		    	            object.get[%=hash.get("targetMethodName")%]().add(i,[%=hash.get("targetProperty")%]);
		    	            [%=hash.get("targetProperty")%].get[%=hash.get("sourceMethodName")%]().add(object);
		    	        }
		          }catch(Exception e){
		            throw new RuntimeException(e);
		          }
    		}

       		@Override
       	    public [%=hash.get("source").~fullName%] remove(int index) {
       	     try{
		    	  if ( object.getAttached() == null || !object.getAttached()){
	    	    		[%=masterType.~fullName%] m = object.get[%=hash.get("targetMethodName")%]().get(index);
	    	    		m.get[%=hash.get("sourceMethodName")%]().remove(m);
	    	            return m;
	    	    	}
	    	    	
	    	      [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command command = new [%=masterType.~package%].proxy.commands.Remove[%=util.mergeAndCapitalize(detailType.~class )%]From[%=util.mergeAndCapitalize(masterType.~class )%]On[%=util.mergeAndCapitalize(property)%]Command();
	
	    	    	command.set[%=util.mergeAndCapitalize(masterType.~class)%](object.get[%=hash.get("targetMethodName")%]().get(index));
	    	        command.set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](object);
		            command.setStackProvider(stackProvider);
	
	    	        if (command.prepare()){
	    	    		[%=masterType.~fullName%] m = object.get[%=hash.get("targetMethodName")%]().get(index);
	    	    		m.get[%=hash.get("sourceMethodName")%]().remove(m);
	    	            return m;
	    	        }
	    	        return null;
		          }catch(Exception e){
		            throw new RuntimeException(e);
		          }
    	    }

    		
			@Override
			public [%=hash.get("source").~fullName%] get(int index) {
				[%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%] = object.get[%=hash.get("targetMethodName")%]().get(index);
				if ([%=hash.get("targetProperty")%] instanceof [%=hash.get("source").~fullName%]Proxy){
					return [%=hash.get("targetProperty")%];
				}else{
				   return new [%=hash.get("source").~fullName%]Proxy(object.get[%=hash.get("targetMethodName")%]().get(index),stackProvider);
				}
			}

			@Override
			public int size() {
				return object.get[%=hash.get("targetMethodName")%]().size();
			}
    		
		};
     }
     [%
     }
}
%]