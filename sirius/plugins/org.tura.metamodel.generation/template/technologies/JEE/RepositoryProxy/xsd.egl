<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
      for(type in typeCollection.values()){
         %]<xs:complexType name="[%=type.~class%]">
          <xs:annotation>[%
          var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid and t.internal);
	      if (assosiations.size() <> 0){
	      %]
			 <xs:appinfo>
				<annox:annotate>@org.tura.platform.repository.core.annotation.InternalClass</annox:annotate>
			</xs:appinfo>
	      [%
	      
	      }
          %]
			 <xs:appinfo>
				<annox:annotate>@com.fasterxml.jackson.annotation.JsonIdentityInfo(generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class, property = "serializationid")</annox:annotate>
			</xs:appinfo>
		</xs:annotation>
		[%
           %]<xs:sequence>[%
              %]<xs:element name="attached" type="xs:boolean"/>[%
              %]<xs:element name="serializationid" type="xs:string"/>[%

          var tp = type;
          while (1 == 1){
          
		for ( field in tp.attributes){
		     if (type.~skipAttributes.contains(field) and not type.~bindedAttribute.contains(field)){
		        continue; 
		     }   
		    field.typeRef.mappingType2XML(recipe,ingredient);
		    %] <xs:element name="[%=util.mergeAndUnCapitalize(field.name)%]"  type=  "[%=getNamespace(field.typeRef.~namespace,targetnamespace,fullHash,returnHash)%][%=field.typeRef.~class%]"/>
		    [%
			}
			
		  var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
	      for (rel in assosiations){


            var hash = rel.sourceSideNamesCalculation();
            
            var annotation = "Association";
            if (rel.internal){
              annotation = "Internal";
	         }
	  	     switch  (rel.type.toString()){
	         case "One2One" : %]    <xs:element name="[%=hash.get("sourceProperty")%]"  type=  "[%=getNamespace(hash.get("target").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("target").~class%]">[%
	         case "One2Many" : %]  <xs:element name="[%=hash.get("sourceProperty")%]"  type=  "[%=getNamespace(hash.get("target").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("target").~class%]"   maxOccurs="unbounded"> [%
	         case "Many2Many" : %]  <xs:element name="[%=hash.get("sourceProperty")%]"  type=  "[%=getNamespace(hash.get("target").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("target").~class%]"   maxOccurs="unbounded"> [%
	         }
            %]
	          <xs:annotation>
				 <xs:appinfo>
					<annox:annotate>@org.tura.platform.repository.core.annotation.[%=annotation%](mappedBy=[%=hash.get("target").~class%].class, property="[%=hash.get("targetProperty")%]", containment=[%=hash.get("containment")%], type="[%=rel.type.toString()%]" )</annox:annotate>
				</xs:appinfo>
			  </xs:annotation>
	         </xs:element>
            [%
	      }

	  var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
      for (rel in assosiations){
         var hash = rel.targetSideNamesCalculation();
            var annotation = "Association";
            if (rel.internal){
              annotation = "Internal";
	         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %]     <xs:element name="[%=hash.get("targetProperty")%]" type="[%=getNamespace(hash.get("source").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("source").~class%]" >[%
         case "One2Many" : %]   <xs:element name="[%=hash.get("targetProperty")%]" type="[%=getNamespace(hash.get("source").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("source").~class%]" >[%
         case "Many2Many" : %] <xs:element name="[%=hash.get("targetProperty")%]" type="[%=getNamespace(hash.get("source").~namespace,targetnamespace,fullHash,returnHash)%][%=hash.get("source").~class%]"  maxOccurs="unbounded">[%
         }
            %]
          <xs:annotation>
			 <xs:appinfo>
				<annox:annotate>@org.tura.platform.repository.core.annotation.[%=annotation%](mappedBy=[%=hash.get("source").~class%].class, property="[%=hash.get("sourceProperty")%]" , containment=[%=hash.get("containment")%], type="[%=rel.type.toString()%]" )</annox:annotate>
			</xs:appinfo>
		  </xs:annotation>
	     </xs:element>
            [%
         
                         

      }
	    if (tp.~extension.isDefined()){
	       tp = tp.~extension;
	    }else{
	       break;
	    }
      
    }
          %]</xs:sequence>[%
	     %]</xs:complexType>[%

 		var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
 		for ( rel in assosiations  ){

	       if ( rel.type.toString()<>"Many2Many"   ){
	              continue;
           }
           var hash = rel.sourceSideNamesCalculation();
           
          %]<xs:complexType name="[%=rel.source.~class%]Many2Many[%=rel.target.~class%]Relation">
          <xs:sequence>
          [%
               for (lnk in rel.links){
                  lnk.masterField.typeRef.mappingType2XML(recipe,ingredient);
                  var master = util.mergeAndUnCapitalize(lnk.masterField.name);
		          lnk.detailField.typeRef.mappingType2XML(recipe,ingredient);
		          var detail = util.mergeAndUnCapitalize(lnk.detailField.name);
                  %]
                  <xs:element name="[%=hash.get("targetMethodName").toLowerCase()%]_[%=master%]"   type="[%=getNamespace(lnk.masterField.typeRef.~namespace,targetnamespace,fullHash,returnHash)%][%=lnk.masterField.typeRef.~class%]"/> 
                  <xs:element name="[%=hash.get("sourceMethodName").toLowerCase()%]_[%=detail%]"   type="[%=getNamespace(lnk.detailField.typeRef.~namespace,targetnamespace,fullHash,returnHash)%][%=lnk.detailField.typeRef.~class%]"/> 
                  [%
                  
              }
  	       %]
  	       </xs:sequence>
  	       </xs:complexType>[%
       }
      }
      

operation getNamespace(namespace,targetNamespace,fullHash,returnHash){
  var util = new Native('org.tura.metamodel.commons.Util');
  if ("http://www.w3.org/2001/XMLSchema".equals(namespace)){
     return "xs:";
  }
  if ("extension.simpletype.tura.org".equals(namespace)){
     return "ex:";
  }
  
  if(namespace.equals(targetNamespace)){
      return "";
  }else{
     if (fullHash.get(namespace) <> null){
           returnHash.put("ns"+fullHash.get(namespace).get(1),namespace);
           return "ns"+fullHash.get(namespace).get(1)+":";
      }else{
           util.traceIfDebug("Error","Undefined namespace : "+namespace);
           return "Error !!!!";
      }
  } 
}
%]