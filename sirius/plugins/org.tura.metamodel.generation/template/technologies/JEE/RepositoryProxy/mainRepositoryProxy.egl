<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 
 
  [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

      var path = component.getComponentRoot+"/"+component.getArtifactId()+"/src/main/java/";  

      for(type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }

         type.mappingType2Java(recipe,ingredient);

	    hash.put("type",type);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
		    
	    util.populateTechnologies(hash,model_mapper);
		
	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/RepositoryProxy/proxyClass.egl",hash,TemplateFactory);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class+"Proxy.java",buffer);   
         
      }
      
      
    }
  %]  