[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
  
%]
package [%=typeCollection.get(0).~package%];

public abstract class ProxyRepository implements org.tura.platform.repository.core.Repository{
	
	private org.tura.platform.repository.core.Repository transport;
	
	public ProxyRepository(org.tura.platform.repository.core.Repository transport){
	   this.transport = transport;
	}

    @SuppressWarnings("rawtypes")
    public abstract List getCommandStack();


	@Override
	public void addProvider(org.tura.platform.repository.core.DataProvider provider, String objectClass) {
			throw new UnsupportedOperationException();
	}

	@Override
	public void addCommand(org.tura.platform.repository.core.Command command, String dataClass) {
		throw new UnsupportedOperationException();
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
        return factory( transport.create(objectClass),objectClass);
	}

	@Override
	public void insert(Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
	switch (objectClass){
	
[%	
     for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
     
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
     
        if (detailType.uid == type.uid  and not hash.get("noAssosiation") and  rel.type.toString() <> "Many2Many"){
           topObject = false;
        }
     }
     if (topObject ){
         %]
         case "[%=type.~fullName%]": { [%=type.~package%].commands.AddTop[%=type.~class%]Command cmd = new [%=type.~package%].commands.AddTop[%=type.~class%]Command();
               cmd.set[%=type.~class%](([%=type.~fullName%]) obj);
               cmd.setCommandStack(getCommandStack());
               cmd.prepare();
               break;}
         [%
     }
     %]
     [%
     }
     %]
		}
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
		
	}

	@Override
	public void remove(Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
	
	switch (objectClass){
	
[%	
     for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
     
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
     
        if (detailType.uid == type.uid  and not hash.get("noAssosiation") and  rel.type.toString() <> "Many2Many"){
           topObject = false;
        }
     }
     if (topObject ){
         %]
         case "[%=type.~fullName%]": { [%=type.~package%].commands.RemoveTop[%=type.~class%]Command cmd = new [%=type.~package%].commands.RemoveTop[%=type.~class%]Command();
               cmd.set[%=type.~class%](([%=type.~fullName%]) obj);
               cmd.setCommandStack(getCommandStack());
               cmd.prepare();
               break;}
         [%
     }
     %]
     [%
     }
     %]
		}
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
		
	}



    @SuppressWarnings("unchecked")
	@Override
    public org.tura.platform.repository.core.SearchResult  find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria,
        java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
        Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
    	
    	org.tura.platform.repository.core.SearchResult  result =  transport.find(searchCriteria, orderCriteria, startIndex,endIndex, objectClass);
    	
    	@SuppressWarnings("rawtypes")
		java.util.List  list = new java.util.ArrayList();
    	for (Object obj : result.getSearchResult()){
    		list.add(factory(obj,objectClass));
    	}
        return new org.tura.platform.repository.core.SearchResult (list,result.getNumberOfRows());
    }
	@Override
    @SuppressWarnings("rawtypes")
	public void applyChanges(java.util.List changes) throws org.tura.platform.repository.core.RepositoryException {
		transport.applyChanges(getCommandStack());
	}
	
	
	private Object factory( Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException{
	
	switch (objectClass){
	
[%
	for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
	
%] 
case "[%=type.~fullName%]": return new [%=type.~fullName%]Proxy(([%=type.~fullName%])obj,getCommandStack());
[%	
	}
%]	
	
	}
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
	
	}
	

}
