<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
 
 %]
 package [%=type.~package%].proxy.commands;
 public class Update[%=type.~class%]Command implements org.tura.platform.repository.proxy.ProxyRepositoryCommand {
 
 
	private org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider;
  	private [%=type.~package%].[%=type.~class%]Proxy [%=util.mergeAndUnCapitalize(type.~class)%];
	private	[%=type.~package%].Update[%=type.~class%]Data data = new [%=type.~package%].Update[%=type.~class%]Data();


  	public [%=type.~fullName%] get[%=type.~class%]() {
		return [%=util.mergeAndUnCapitalize(type.~class)%];
	}
 
 	public void set[%=type.~class%]([%=type.~package%].[%=type.~class%]Proxy [%=util.mergeAndUnCapitalize(type.~class)%]) {
		this.[%=util.mergeAndUnCapitalize(type.~class)%] = [%=util.mergeAndUnCapitalize(type.~class)%];
	}
 
 	public org.tura.platform.repository.proxy.ProxyCommadStackProvider getStackProvider() {
		return stackProvider;
	}


	public void setStackProvider(org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider) {
		this.stackProvider = stackProvider;
	}
 
  	public boolean prepare() throws Exception{
  	   boolean isUpdated = false;
  	
[%
        var tp = type;
        while  (1 == 1) {
	         for (field in tp.attributes){
	            if (field.pk){
	               continue;
	            }
		        if (tp.~skipAttributes.contains(field) or  tp.~bindedAttribute.contains(field)){
			        continue; 
			     }
%]
  	     isUpdated = isUpdated | prepare[%=util.mergeAndCapitalize(field.name)%]();
[%
			}
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
        }
%]	  	
  	  if (isUpdated){
	    data.set[%=util.mergeAndCapitalize(type.~class)%]Pk ([%=util.mergeAndUnCapitalize(type.~class)%].getPath());
		stackProvider.addCommand(data);
  	  }
  	  return isUpdated;
    }
 
 
 [%
        var tp = type;
        while  (1 == 1) {
	         for (field in tp.attributes){
	            if (field.pk){
	               continue;
	            }
		        if (tp.~skipAttributes.contains(field) or  tp.~bindedAttribute.contains(field)){
			        continue; 
			     }
             field.typeRef.mappingType2Java(recipe,ingredient);
 
 %]
 
	private [%=field.typeRef.~fullName%] new[%=util.mergeAndCapitalize(field.name)%]Value;
	private [%=field.typeRef.~fullName%] old[%=util.mergeAndCapitalize(field.name)%]Value;

	public [%=field.typeRef.~fullName%] getNew[%=util.mergeAndCapitalize(field.name)%]Value() {
		return new[%=util.mergeAndCapitalize(field.name)%]Value;
	}

	public void setNew[%=util.mergeAndCapitalize(field.name)%]Value([%=field.typeRef.~fullName%] new[%=util.mergeAndCapitalize(field.name)%]Value) {
		this.new[%=util.mergeAndCapitalize(field.name)%]Value = new[%=util.mergeAndCapitalize(field.name)%]Value;
	}


	public [%=field.typeRef.~fullName%] getOld[%=util.mergeAndCapitalize(field.name)%]Value() {
		return old[%=util.mergeAndCapitalize(field.name)%]Value;
	}


	public void setOld[%=util.mergeAndCapitalize(field.name)%]Value([%=field.typeRef.~fullName%] old[%=util.mergeAndCapitalize(field.name)%]Value) {
		this.old[%=util.mergeAndCapitalize(field.name)%]Value = old[%=util.mergeAndCapitalize(field.name)%]Value;
	}


 
 	public boolean prepare[%=util.mergeAndCapitalize(field.name)%]() throws Exception{
		
		if ((old[%=util.mergeAndCapitalize(field.name)%]Value != null) && (old[%=util.mergeAndCapitalize(field.name)%]Value.equals(""))){
			old[%=util.mergeAndCapitalize(field.name)%]Value = null;
		}

		if ((new[%=util.mergeAndCapitalize(field.name)%]Value != null) && (new[%=util.mergeAndCapitalize(field.name)%]Value.equals(""))){
			new[%=util.mergeAndCapitalize(field.name)%]Value = null;
		}
		
		if ((new[%=util.mergeAndCapitalize(field.name)%]Value == null) && (old[%=util.mergeAndCapitalize(field.name)%]Value == null)){
			return false;
		}
		
		if ((new[%=util.mergeAndCapitalize(field.name)%]Value != null) && (old[%=util.mergeAndCapitalize(field.name)%]Value == null) || (new[%=util.mergeAndCapitalize(field.name)%]Value == null) && (old[%=util.mergeAndCapitalize(field.name)%]Value != null)) {
			add[%=util.mergeAndCapitalize(field.name)%]( );
			return true;

		} else {
			if (!new[%=util.mergeAndCapitalize(field.name)%]Value.equals(old[%=util.mergeAndCapitalize(field.name)%]Value)) {

				add[%=util.mergeAndCapitalize(field.name)%]();
				return true;
			}
			return false;
		}
		
	}
 
	private void add[%=util.mergeAndCapitalize(field.name)%]() throws Exception{
		data.set[%=util.mergeAndCapitalize(field.name)%](new[%=util.mergeAndCapitalize(field.name)%]Value);
		data.setIsUpdated[%=util.mergeAndCapitalize(field.name)%](true);
	}
[%
			}
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
        }

%]	
 }
 
 
 