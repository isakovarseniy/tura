<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 
 [%
 
     var util = new Native('org.tura.metamodel.commons.Util');
     masterType.mappingType2Java(recipe,ingredient);
     detailType.mappingType2Java(recipe,ingredient);
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     
%]
package [%=masterType.~package%].proxy.commands;

public class [%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Command implements org.tura.platform.repository.proxy.ProxyRepositoryCommand{

 	private [%=detailType.~fullName%] [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];

	private org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider;
	
	
	private Object deepClone(Object t){
	    com.rits.cloning.Cloner c = new com.rits.cloning.Cloner();
		return c.deepClone(t);
	}

[%
        if (noAssosiation){
	        for ( lnk in rel.links){
	            var attr = lnk.masterField;
			    attr.typeRef.mappingType2Java(recipe,ingredient);
			%]
			private [%=attr.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(attr.name)%];
			public [%=attr.typeRef.~fullName%]  get[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(attr.name)%](){
			    return [%=util.mergeAndUnCapitalize(attr.name)%];
			}
			
			public void set[%=util.mergeAndCapitalize(masterType.~class)%][%=util.mergeAndCapitalize(attr.name)%]( [%=attr.typeRef.~fullName%]   [%=util.mergeAndUnCapitalize(attr.name)%]){
			    this.[%=util.mergeAndUnCapitalize(attr.name)%]=[%=util.mergeAndUnCapitalize(attr.name)%];
			}
			[%    
        }
        }else{
   %]
 	private [%=masterType.~fullName%] [%=util.mergeAndUnCapitalize(masterType.~class)%];

    public void set[%=util.mergeAndCapitalize(masterType.~class)%]([%=masterType.~fullName%] [%=util.mergeAndUnCapitalize(masterType.~class)%]){
       this.[%=util.mergeAndUnCapitalize(masterType.~class)%] = [%=util.mergeAndUnCapitalize(masterType.~class)%];
    }
   
    public [%=masterType.~fullName%] get[%=util.mergeAndCapitalize(masterType.~class)%](){
        return [%=util.mergeAndUnCapitalize(masterType.~class)%];
    }
   [%     
        }
%]
    public void set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]([%=detailType.~fullName%] [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%]){
       this.[%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%] = [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];
    }
   
    public [%=detailType.~fullName%] get[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](){
        return [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];
    }

	public org.tura.platform.repository.proxy.ProxyCommadStackProvider  getStackProvider() {
		return stackProvider;
	}


	public void setStackProvider(org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider) {
		this.stackProvider = stackProvider;
	}
 
 	public boolean prepare() throws Exception{
[%

        if (not noAssosiation){

%]
 	   if ([%=util.mergeAndUnCapitalize(masterType.~class)%] == null ){
 	     return false;
 	   }
 	   
 	   if ([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%] == null ){
 	     return false;
 	   }

[%}else{
           %] boolean b = true;  [%
	        for ( lnk in rel.links){
	            var attr = lnk.masterField;
			%]
			b = b& ([%=util.mergeAndUnCapitalize(attr.name)%] == null);
			[%    
        }

%]
 	   if (b ){
 	     return false;
 	   }
 	   
 	   if ([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%] == null ){
 	     return false;
 	   }

[%
}
%] 	   
 	   

       [%=cmdtype.toLowerCase()%]();
       return true;

    }

   public void [%=cmdtype.toLowerCase()%]() throws Exception{
   
[%
        if (noAssosiation){
           %][%=noAssosiationtRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,rel,hyphen)%][%
        }else{
	        if (containment){
             %][%=containtmentRelation( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen)%][%
	        }else{
              %][%=nonContaintmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen)%][%
	        }
        }
%]   
   
   
   }
}   
  
[%
@template
operation  containtmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen){
      var util = new Native('org.tura.metamodel.commons.Util');
      %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data();
          [%
	      for (pk in masterType.~primaryKey){ 
		    pk.typeRef.mappingType2Java(recipe,ingredient);
		    %] 
		    data.set[%=util.mergeAndCapitalize(pk.name)%]([%=util.mergeAndUnCapitalize(masterType.~class)%].get[%=util.mergeAndCapitalize(pk.name)%]());
	      [%}%]
		 [%=detailType.~fullName%] cloned = ([%=detailType.~fullName%] )deepClone([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%]);
         data.set[%=util.mergeAndCapitalize(detailType.name)%][%=suffix%](cloned);
         
		stackProvider.addCommand(data);
		
		[%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].setAttached(true);
         
         
[%}

@template
operation  nonContaintmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen){
     var util = new Native('org.tura.metamodel.commons.Util');
    %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data();
           [%
	      for (pk in masterType.~primaryKey){ 
		    pk.typeRef.mappingType2Java(recipe,ingredient);
		    %] 
		    data.set[%=util.mergeAndCapitalize(masterType.name)%][%=util.mergeAndCapitalize(pk.name)%]([%=util.mergeAndUnCapitalize(masterType.~class)%].get[%=util.mergeAndCapitalize(pk.name)%]());
	      [%}%]
 
           [%
	      for (pk in detailType.~primaryKey){ 
		    pk.typeRef.mappingType2Java(recipe,ingredient);
		    %] 
		    data.set[%=util.mergeAndCapitalize(detailType.name)%][%=util.mergeAndCapitalize(pk.name)%]([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].get[%=util.mergeAndCapitalize(pk.name)%]());
	      [%}%]
 
		stackProvider.addCommand(data);
     
 [%    
 }


@template
operation noAssosiationtRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,rel,hyphen){
     var util = new Native('org.tura.metamodel.commons.Util');
    %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data();
           [%
	        for ( lnk in rel.links){
		    %] 
		    data.set[%=util.mergeAndCapitalize(masterType.name)%][%=util.mergeAndCapitalize(lnk.masterField.name)%]([%=util.mergeAndUnCapitalize(lnk.masterField.name)%]);
	      [%}%]
 
           [%
	      for (pk in detailType.~primaryKey){ 
		    pk.typeRef.mappingType2Java(recipe,ingredient);
		    %] 
		    data.set[%=util.mergeAndCapitalize(detailType.name)%][%=util.mergeAndCapitalize(pk.name)%]([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].get[%=util.mergeAndCapitalize(pk.name)%]());
	      [%}%]
 
		stackProvider.addCommand(data);
		
 [%    
}
%]
