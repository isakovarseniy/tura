<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 
 [%
 
     var util = new Native('org.tura.metamodel.commons.Util');
     masterType.mappingType2Java(recipe,ingredient);
     detailType.mappingType2Java(recipe,ingredient);
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     
%]
package [%=masterType.~package%].proxy.commands;

public class [%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Command implements org.tura.platform.repository.proxy.ProxyRepositoryCommand{

 	private [%=masterType.~package%].[%=masterType.~class%]Proxy   [%=util.mergeAndUnCapitalize(masterType.~class)%];
 	private [%=detailType.~package%].[%=detailType.~class%]Proxy [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];

	private org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider;

    public void set[%=util.mergeAndCapitalize(masterType.~class)%]([%=masterType.~package%].[%=masterType.~class%]Proxy [%=util.mergeAndUnCapitalize(masterType.~class)%]){
       this.[%=util.mergeAndUnCapitalize(masterType.~class)%] = [%=util.mergeAndUnCapitalize(masterType.~class)%];
    }
   
    public [%=masterType.~package%].[%=masterType.~class%]Proxy get[%=util.mergeAndCapitalize(masterType.~class)%](){
        return [%=util.mergeAndUnCapitalize(masterType.~class)%];
    }


    public void set[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%]([%=detailType.~package%].[%=detailType.~class%]Proxy [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%]){
       this.[%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%] = [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];
    }
   
    public [%=detailType.~package%].[%=detailType.~class%]Proxy get[%=util.mergeAndCapitalize(detailType.~class)%][%=suffix%](){
        return [%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%];
    }

	public org.tura.platform.repository.proxy.ProxyCommadStackProvider  getStackProvider() {
		return stackProvider;
	}


	public void setStackProvider(org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider) {
		this.stackProvider = stackProvider;
	}
 
 	public boolean prepare() throws Exception{
       [%=cmdtype.toLowerCase()%]();
       return true;

    }

   public void [%=cmdtype.toLowerCase()%]() throws Exception{
   
[%
        if (noAssosiation){
           %][%=noAssosiationtRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,rel,hyphen)%][%
        }else{
	        if (containment){
             %][%=containtmentRelation( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen)%][%
	        }else{
              %][%=nonContaintmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen)%][%
	        }
        }
%]   
   
   
   }
}   
  
[%
@template
operation  containtmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen){
      var util = new Native('org.tura.metamodel.commons.Util');
      %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data();

		 data.set[%=util.mergeAndCapitalize(masterType.~class)%]Pk([%=util.mergeAndUnCapitalize(masterType.~class)%].getPath());


	     com.rits.cloning.Cloner c = new com.rits.cloning.Cloner();
		 [%=detailType.~fullName%] cloned = c.deepClone([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].getWrappedObject());
         data.set[%=util.mergeAndCapitalize(detailType.name)%][%=suffix%](cloned);
         
		stackProvider.addCommand(data);
		
		[%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].setAttached(true);
         
         
[%}

@template
operation  nonContaintmentRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,hyphen){
     var util = new Native('org.tura.metamodel.commons.Util');
    %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]On[%=util.mergeAndCapitalize(property)%]Data();
		    data.set[%=util.mergeAndCapitalize(masterType.~class)%]Pk([%=util.mergeAndUnCapitalize(masterType.~class)%].getPath());
 
		    data.set[%=util.mergeAndCapitalize(detailType.name)%][%=suffix%]Pk([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].getPath());
 
		stackProvider.addCommand(data);
     
 [%    
 }


@template
operation noAssosiationtRelation ( masterType, detailType,property,recipe,ingredient,suffix,cmdtype,rel,hyphen){
     var util = new Native('org.tura.metamodel.commons.Util');
    %]
      [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data data = new [%=masterType.~package%].[%=cmdtype%][%=detailType.~class%][%=hyphen%][%=masterType.~class%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data();
		    data.set[%=util.mergeAndCapitalize(masterType.name)%]Pk([%=util.mergeAndUnCapitalize(masterType.~class)%].getPath());
 
		    data.set[%=util.mergeAndCapitalize(detailType.name)%][%=suffix%]Pk([%=util.mergeAndUnCapitalize(detailType.~class)%][%=suffix%].getPath());
 
		stackProvider.addCommand(data);
		
 [%    
}
%]
