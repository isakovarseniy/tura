<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
      var hash = new Native('java.util.HashMap');
 
        var tp = type;
        while  (1 == 1) {
	         for (field in tp.attributes){
	            if (field.pk){
	               continue;
	            }
		        if (tp.~skipAttributes.contains(field) or  tp.~bindedAttribute.contains(field)){
			        continue; 
			     }

			    hash.put("type",type);
			    hash.put("primaryKey",type.~primaryKey);
			    hash.put("field",field);
			    hash.put("recipe",recipe);
			    hash.put("ingredient",ingredient);
			    hash.put("component",component);
			    hash.put("model_mapper",model_mapper);
			    hash.put("path",path);
				    
			   var cmd : Template =   util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/RepositoryProxy/updatePropertyCommand.egl",hash,TemplateFactory);
		       cmd.setFormatter(f);
		       var buffer = cmd.process();
               util.saveFile( path+type.~package.replaceAll("\\.","\\/")+"/commands", "Update"+type.~class +"On"+util.mergeAndCapitalize(field.name)+ "Command.java",buffer);   
			     
			}
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
        }
 
 %]