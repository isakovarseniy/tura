[%
operation  viewgeneration(hash) {
      var form = hash.get("form");   
      var  javaPath =  hash.get("javaPath");  
      var webapp = hash.get("webapp");
      var util = new Native('org.tura.metamodel.commons.Util');
      var allPorts = new Native('java.util.ArrayList'); 
      var actionTriggers = new Native('java.util.ArrayList'); 
      var scriptTriggers = new Native('java.util.ArrayList'); 
      var menuReferences = new Native('java.util.ArrayList'); 
      
      var uipackage = hash.get("uipackage");

      hash.put("actionTriggers",actionTriggers);
      hash.put("scriptTriggers",scriptTriggers);
      hash.put("menuReferences",menuReferences);
      
      if (form.view = null or form.view = null)
         return;   
      for (canvas in form.view.canvases){
         if (not canvas.isKindOf(form::Window) ){
              if (not canvas.isKindOf(form::TabCanvas) ){
                  var ports = canvas.viewElement->select(p|p.isKindOf(form::ViewPort)); 
                   allPorts.addAll(ports);
              }
              canvas.draw(hash);   
         }     
      }

//Process all canvases first to collect all js libraries

      for (canvas in form.view.canvases){
         if ( canvas.isKindOf(form::Window) ){
              if (not canvas.isKindOf(form::TabCanvas) ){
                  var ports = canvas.viewElement->select(p|p.isKindOf(form::ViewPort)); 
                   allPorts.addAll(ports);
              }
              canvas.draw(hash);   
         }     
      }

 
      hash.put("allPorts",allPorts);
      var f = new Native("org.tura.metamodel.generation.JavaFormatter");
      var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
             
      var viewportclass : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JSF/viewPortHolderClass.egl",hash,TemplateFactory);
      viewportclass.setFormatter(f);
      var buffer = viewportclass.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/"  , "ViewPortHolder.java",buffer);  
      
      var viewportclass : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JSF/modelWrapper.egl",hash,TemplateFactory);
      viewportclass.setFormatter(f);
      var buffer = viewportclass.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/commons/viewmodel/"  , "ViewModelWrapper.java",buffer);  
      
      
      var expproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JSF/expressionsProducer.egl",hash,TemplateFactory);
      expproducer.setFormatter(f);
      var buffer = expproducer.process();
      util.saveFile( javaPath+"/commons/producer/"  , "ExpressionsProducer.java",buffer);  
      
      var viewporttriggerproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JSF/viewPortTriggerProducer.egl",hash,TemplateFactory);
      viewporttriggerproducer.setFormatter(f);
      var buffer = viewporttriggerproducer.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "ViewPortTriggerProducer.java",buffer);  


      var menutriggerproducer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JSF/menuPostProcessorProducer.egl",hash,TemplateFactory);
      menutriggerproducer.setFormatter(f);
      var buffer = menutriggerproducer.process();
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "MenuPostProcessorProducer.java",buffer);  


      menuGenerator(hash);
      menuProvider(hash);
      actionExecutor(hash);
      scriptGenerator(hash);
}

@template
operation form::Uielement  uiElementAttributes(hash){
%][%=self.styleAttributes(hash)%]  [%=self.rendered(hash)%]  [%=self.enabled(hash)%] [%=self.required(hash)%] [%if (hash.get("readonly") <> null){%] readonly="[%=hash.get("readonly")%]"[%}else{%][%=self.readonly(hash)%][%}%]
[%}


@template
operation form::StyleElement  styleAttributes(hash){
     %]style="[%=self.style(hash)%]"[%
     if (self.isKindOf(form::FlexField) ){
     %] styleClass="[%=self.styleClass(hash)%]"[%
     }
}

operation form::StyleElement  style(hash) : String{
      var hints = new Native('java.util.HashMap');
 
     if (self.style <> null  and  self.style.value <> null  ){
         return buildExpression(self.style,hints,hash);
     }
     return "";
}

operation form::FlexFields  styleClass(hash) : String{
    var util = new Native('org.tura.metamodel.commons.Util');
    var model_mapper = hash.get('model_mapper');
    var classifierUUID = util.getHint(model_mapper,"styleClass");
    return self.styleClassByClassifier(classifierUUID);
}



operation form::FlexFields  styleClassByClassifier( classifierUUID : String):String{
      var util = new Native('org.tura.metamodel.commons.Util');
      var hints = new Native('java.util.HashMap');
      var hash = new Native('java.util.HashMap');
      
      var value = "";
     if (self.fields <> null  and self.fields.size() <> 0 ){
      var first = 0;
      for (field in self.fields ){ 
         if (field.classifiers <> null and field.findClassifier(classifierUUID)){
             if ( first <> 0){value = value+",";}
             value = value + buildExpression(field,hints,hash);
             first=1;
           }
         } 
     }
     return value;
}

@template
operation form::Uielement  validator(hash){
   var util = new Native('org.tura.metamodel.commons.Util');
   var model_mapper = hash.get('model_mapper');
   var classifierUUID = util.getHint(model_mapper,"validator");

    if (self.findClassifier(classifierUUID))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation form::Uielement  convertor(hash){
   var util = new Native('org.tura.metamodel.commons.Util');
   var model_mapper = hash.get('model_mapper');
   var classifierUUID = util.getHint(model_mapper,"converter");

    if (self.findClassifier(classifierUUID))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation form::Uielement  readOnlyConverter(hash){
   var util = new Native('org.tura.metamodel.commons.Util');
   var model_mapper = hash.get('model_mapper');
   var classifierUUID = util.getHint(model_mapper,"readOnlyConverter");

    if (self.findClassifier(classifierUUID))%]
    [%=self.~hintDetails%]  
[%
}

@template
operation form::Uielement  enabled(hash){
      var hints = new Native('java.util.HashMap');
     %]disabled="[%=buildExpression(self.enabled,hints,hash)%]"[%
}


@template
operation form::Uielement  rendered(hash){
      var hints = new Native('java.util.HashMap');
      var value = constructExpression(self,'rendered',hints,hash);
      if (value <> null and value <> ""){
     %]rendered="[%=value%]"[%
     }
}


@template
operation form::Uielement  required(hash){
      var hints = new Native('java.util.HashMap');
     if (self.required <> null  and self.required.value <> null){
         var value = buildExpression(self.required,hints,hash);
            
     %]required="[%=value%]"[%}
}

@template
operation form::Uielement  readonly(hash){
      var hints = new Native('java.util.HashMap');
     if (self.readOnly <> null  and self.readOnly.value <> null){
          var value = buildExpression(self.readOnly,hints,hash);
            
     %]readonly="[%=value%]"[%}
}


@template
operation form::Uielement  draw(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var value;

     util.traceIfDebug("UI element",  self.eClass().name +" start: " +self.uid);     

     if (hash.get("context") == null ){
         value = buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(),self.valuePointer),hints,hash);
      %] [%=self.noContext(hash,value)%] [%           
      }
     else{
          var pointer = self.eContainer().eContainer();
          hints.put("noCurlyBracket","true");
          value = buildExpression(util.createArtificialContextValue(pointer.sourcePointer,pointer.sourcePointer.findTreeRoot(),self.valuePointer),hints,hash);

          if (hash.get("context").equals("table") ){
               value =  "#{row."+value+"}";
               %] [%=self.tableContext(hash,value)%] [%           
           }  
          if (hash.get("context").equals("tree") ){
               value =  "#{row[1]."+value+"}";
               %] [%=self.treeContext(hash,value)%] [%           
          }     
     }

     util.traceIfDebug("UI element",  self.eClass().name +" end: " +self.uid);     
     
}


@template
operation form::Uielement  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}

@template
operation form::CanvasFrame  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}

@template
operation form::ViewPort  mkUIDBinding(){
%]id="[%=self.mkuid()%]" binding="#{[%=self.mkuid()%]}"[%
}


operation constructExpression( fields : form::FlexFields, classifier : String , hints, hash) {
   var util = new Native('org.tura.metamodel.commons.Util');
   var model_mapper = hash.get('model_mapper');
   var classifierUUID = util.getHint(model_mapper,classifier);

   var field = fields.findClassifiedField(classifierUUID);
   if (field <> null and field.value <> null)
         return  buildExpression(field,hints,hash);
   else
        return "";      
}

operation form::FlexFields findClassifiedField( classifierUUID: String) {
       for (field in self.fields){
          if (field.findClassifier(classifierUUID)){
             return field;
          }
       }
       return null;
}


%]