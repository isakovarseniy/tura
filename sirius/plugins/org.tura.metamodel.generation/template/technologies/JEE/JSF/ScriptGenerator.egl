[%@template
operation   scriptGenerator(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var recipe = hash.get("recipe");
     var ingredient = hash.get("ingredient");
     var component = hash.get("component");
     var form = hash.get("form");
     var scriptTriggers = hash.get("scriptTriggers");
     var  javaPath =  hash.get("javaPath");
     var uipackage = hash.get("uipackage");
     var hints = new Native('java.util.HashMap');
     
 %]

package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].action;

@javax.inject.Named("scriptGenerator[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%]")
public class ScriptGenerator{

	private  java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ScriptGenerator.class.getName());;

	@javax.inject.Inject
	private org.tura.platform.datacontrol.ELResolver elResolver;
    
    private java.util.HashMap<String,Object> hash = new  java.util.HashMap<String,Object>();
[%
     var map = new Native('java.util.HashMap'); 

     for( trigger in  scriptTriggers ){
          var action = trigger.expression.get( trigger.expression.size()-1);
          var method = action.objRef;
          var type = null;
          if (method <> null)
             type = action.objRef.eContainer();
     
         if (type <> null ){
             type.mappingType2JavaScript(recipe,ingredient);
         }
     }
%]

     public ScriptGenerator(){
[%      
      for( trigger in  scriptTriggers ){
      
        var action = trigger.expression.get( trigger.expression.size()-1);
        var method = action.objRef;
        var type = null;
        if (method <> null)
           type = action.objRef.eContainer();
      
       if (type <> null  and  type.~mapper.isDefined() and "Type2JavaScript".equals(type.~mapper)){  
%]
      hash.put("[%=trigger.mkuid()%]",new Object[]{
            new Object[]{[%
           if (trigger.parameters <> null and trigger.parameters.size() <> 0 ){
              var i = 0;
               for (parameter  in trigger.parameters){
                  if ( i <> 0)
                     %],[%
                  %]"[%=buildExpression(parameter.value,hints,hash)%]"[%
                  i = 1;
               }
           }
            %]},
            "[%=util.mergeAndUnCapitalize(method.name)%]"
         }
      );
[%     
      }
    }      
%]
   }
   
    public String scriptBuilder(String clientId) {
        String result = "";
        try {
            Object[] array = (Object[]) hash.get(clientId);

            result = (String) array[1] + "(";
            int i = 0;
            for (Object element : (Object[]) array[0]) {
                if (i != 0) {
                    result = result + ",";
                }
                i++;
                Object obj = element;
                String expression = (String) element;
                if ("#{".equals(expression.substring(0, 2))) {
                    obj = "'" + (elResolver.getValue(expression)).toString() +
                        "'";
                } else {
                    if ("##".equals(expression.substring(0, 2))) {
                        obj = expression.substring(2);
                    } else {
                        obj = "'" + expression + "'";
                    }
                }
                result = result + obj;
            }
            result = result + ")";
        } catch (Exception e) {
            logger.log(java.util.logging.Level.INFO, e.getMessage(), e);
        }
        return result;
    }
   
}
[%
      var f = new Native("org.tura.metamodel.generation.JavaFormatter");
      out.formatWith(f);
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/action/"  , "ScriptGenerator.java",out.toString());  
}
%]