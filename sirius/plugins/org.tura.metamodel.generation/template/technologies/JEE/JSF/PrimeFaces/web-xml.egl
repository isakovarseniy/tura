[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/roleElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";

operation  web_xml(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');
     var component = hash.get("component");
     var configuration = hash.get("configuration");
     var webapp =  util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/webapp/WEB-INF";
     var configuration = hash.get("configuration");
     var realms = hash.get("realms");
     var windows = hash.get("windows");
     var recipe = hash.get("recipe");
     var ingredient = hash.get("ingredient");
     var model_mapper = hash.get('model_mapper');
     
     
%]
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

     <filter>
         <filter-name>PrimeFaces FileUpload Filter</filter-name> 
         <filter-class>org.primefaces.webapp.filter.FileUploadFilter </filter-class>
        <init-param> 
            <param-name>thresholdSize</param-name>
            <param-value>51200</param-value>
         </init-param>
     </filter>

  <session-config>
    <session-timeout>
      [%=configuration.get("Session timeout")%]
    </session-timeout>
  </session-config>

  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.xhtml</url-pattern>
  </servlet-mapping>

  <context-param>
    <param-name>javax.faces.PROJECT_STAGE</param-name>
    <param-value>Development</param-value>
  </context-param>
  <context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>server</param-value>
  </context-param>
  
  
  <context-param>
     <param-name>org.omnifaces.CDN_RESOURCE_HANDLER_URLS</param-name>
     <param-value>
     js:*=[%=configuration.get("Resource library location")%]/js/*,
     images:*=[%=configuration.get("Resource library location")%]/images/*,
     css:*=[%=configuration.get("Resource library location")%]/css/*     
     </param-value>
 </context-param>  
 
 [%
   if (realms <> null){
//Unclear why should I do like this   
     for ( ls in realms){
      for(realm in ls){
      for (rolepkg in realm.roles){ 
      for(role in rolepkg.roles){
       role.mappingRole2Role(recipe, ingredient);      
      %]
   <security-role>
    <role-name>[%=role.~localRoleName%]</role-name>
   </security-role>        
    [%  
        }
       }
      }
      }
   }
  if (windows <> null){
    for (window in windows){
      var isNotConfidential = window.findClassifier(util.getHint(model_mapper,"NotConfidential")); 
    
      for (gr  in window.grants){
         for(grant in gr){
          var form =  window.eContainer().eContainer();
          var pkg = form.eContainer();
          var role = grant.securityEntity;
          role.mappingRole2Role(recipe, ingredient);
  %]
<security-constraint>
    <web-resource-collection>
        <web-resource-name>[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(window.name)+".xhtml"%]</web-resource-name>
        <url-pattern>/[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(window.name)+".xhtml"%]</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>[%=role.~localRoleName%]</role-name>
    </auth-constraint>
    [%
      if (not  isNotConfidential ){
      %]
    <user-data-constraint>
        <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
      [%
      
      }
    %]
</security-constraint>      
[%
       }
     }
   }
    var login = false;
    var error = false ;
    var loginWin = null;
    var errorWin = null;
    var exceptionTypeHandler = new Native('java.util.HashMap');
    var exceptionCodeHandler = new Native('java.util.HashMap');
    
    for (window in windows){
    
        var list = window.findAllClassifiers(util.getHint(model_mapper,"exception.type.handler"));
       
        if (list.size <> 0  )
           exceptionTypeHandler.put(window, list);

        var list = window.findAllClassifiers(util.getHint(model_mapper,"exception.code.handler"));
       
        if (list.size <> 0  )
           exceptionCodeHandler.put(window, list);


       
        if (window.findClassifier(util.getHint(model_mapper,"login.page")) and login == false  ){
          login = true;
          loginWin = window;
        }
        if (window.findClassifier(util.getHint(model_mapper,"error.page")) and error == false){
          error = true;
          errorWin = window;
        }
    }
    if (loginWin <> null ){
      var form =  loginWin.eContainer().eContainer();
      var pkg = form.eContainer();

%]    

<login-config>
    <auth-method>FORM</auth-method>
    <realm-name>file</realm-name>
    <form-login-config>
        <form-login-page>/[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(loginWin.name)+".xhtml"%]</form-login-page>
[%
     if (errorWin <> null) {
      var form =  errorWin.eContainer().eContainer();
      var pkg = form.eContainer();
%]        
        <form-error-page>/[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(errorWin.name)+".xhtml"%]</form-error-page>
[%
  }
%]        
    </form-login-config>
</login-config>      

[%
    }
   for(window in exceptionTypeHandler.keySet()){
       var list = exceptionTypeHandler.get(window);
        for(hint in  list){
          var form =  window.eContainer().eContainer();
          var pkg = form.eContainer();        
        %]
 <error-page>
     <exception-type>[%=hint.details%]</exception-type>
     <location>/[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(window.name)+".xhtml"%]</location>
 </error-page>   
 [%     
        } 
   
   } 
    
    for(window in exceptionCodeHandler.keySet()){
       var list = exceptionCodeHandler.get(window);
        for(hint in  list){
          var form =  window.eContainer().eContainer();
          var pkg = form.eContainer();        
        %]
 <error-page>
     <error-code>[%=hint.details%]</error-code>
     <location>/[%=util.mergeAndCapitalize(pkg.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=util.mergeAndCapitalize(window.name)+".xhtml"%]</location>
 </error-page>   
 [%     
        } 
   
   }    
    
    
  }
 %]
 
 
  
  
</web-app>
[%
     util.saveFile( webapp,"web.xml",out.toString());   
}     
%]