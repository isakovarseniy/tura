[%@template
operation form::RadioSelection draw(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var value;

     util.traceIfDebug("DropDownSelection",  self.eClass().name +" start: " +self.uid);     

     if (hash.get("context") == null ){
          hints.put("noCurlyBracket","true");
         value = buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(),self.valuePointer),hints,hash);
      %] [%=self.noContext(hash,value)%] [%           
      }
     else{
          hints.put("noCurlyBracket","true");
          var pointer = self.eContainer().eContainer();
          value = buildExpression(util.createArtificialContextValue(pointer.sourcePointer,pointer.sourcePointer.findTreeRoot(),self.valuePointer),hints,hash);
     
          if (hash.get("context").equals("table") ){
               value =  "row[2]."+value;
               %] [%=self.tableContext(hash,value)%] [%           
           }  
          if (hash.get("context").equals("tree") ){
               value =  "row[1]."+value;
               %] [%=self.treeContext(hash,value)%] [%           
          }     
     }

     util.traceIfDebug("DropDownSelection",  self.eClass().name +" end: " +self.uid);     
  
}

@template
operation form::RadioSelection treeContext(hash,value) { 
%]
<p:inplace editor="true" event="dblclick">
   [%=self.rw(hash,value)%]
</p:inplace>      
[%
}

@template
operation form::RadioSelection tableContext(hash,value) { 
%]
<p:cellEditor>
  <f:facet name="output">
     <span style="display: inline-block; width: 100%; height: 100%">
      [%=self.ro(hash,value)%]
     </span>
  </f:facet>
  <f:facet name="input">
     [%=self.rw(hash,value)%]
  </f:facet>
</p:cellEditor>  
[%   
}

@template
operation form::RadioSelection noContext(hash,value) { 
%]
   [%=self.rw(hash,value)%]
[%   
}

@template
operation form::RadioSelection rw(hash,value) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var emptyhints = new Native('java.util.HashMap');
     var form = hash.get("form");   
     
     hints.put("noCurlyBracket",true);
     
     var columns = "";
     if ( self.columns <> 0){
       columns = "columns=\""+self.columns+"\"";
     
     }
     
     
%]
<p:selectOneRadio  layout="[%=self.layout%]" [%=columns%]  [%=self.mkUIDBinding()%] [%=self.uiElementAttributes(hash)%] value="#{[%=value%]}">
    [%if (self.initialOptionMessage <> null and self.initialOptionMessage.value <> null ){%]
    <f:selectItem itemLabel="[%=buildExpression(self.initialOptionMessage,emptyhints,hash)%]" itemValue="[%=self.initialOptionValue%]" />
    [%}
    %]
    <f:selectItems  var="options"  itemValue="#{options[1]}" itemLabel="#{options[0]}" value="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','options', [%=buildExpression(util.createArtificialContextValue(self.optionPointer,self.optionPointer.findTreeRoot(),null),hints,hash)%]).setLabel('get[%=util.mergeAndCapitalize(self.selection.displayOptionPointer.name)%]').setValue('get[%=util.mergeAndCapitalize(self.selection.valueOptionPointer.name)%]').getOptions()}"/>
    [%if (self.isRefreshArias()){
        var action = null;
        for ( field in  self.fields){
          if (field.classifiers.size() <> 0 ){
            continue;
          }
           action = buildExpression(field,hints,hash);
           break; 
      }
    %]
    
    <p:ajax [%=self.refreshArias()%]  listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','options', [%=buildExpression(util.createArtificialContextValue(self.optionPointer,self.optionPointer.findTreeRoot(),null),hints,hash)%]).setSelectOption('[%=util.unEscapeString(value)%]')[% if (action <> null){%].setAction('[%=util.unEscapeString(action)%]')[%}%].changeValueListener}" />
    [%}%]
</p:selectOneRadio>
[%
}

@template
operation form::RadioSelection ro(hash,value) { 
%]
<h:outputText value="#{[%=value%]}">
   [%=self.readOnlyConverter(hash)%]
</h:outputText>
[%
}
%]