[%@template
operation  form::LayerHolder  draw(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     util.traceIfDebug("UI element","LayerHolder start: "+self.uid);
        
     var model_mapper = hash.get('model_mapper');
     var hints = new Native('java.util.HashMap');

     var responsive = "tabular";  
     var ignore = false;
     var columns=self.columns;      
     if (self.findClassifier(util.getHint(model_mapper,"responsive.grid"))){
        responsive="grid";
     }
     var expression = constructExpression(self,'layerholder.columns',hints, hash);
     if (expression <> ""){
       columns = expression;
     }
     
     
     if (self.findClassifier(util.getHint(model_mapper,"layerholder.ignore"))){
     %]
       [%=self.generateBody(hash)%]     
       [%
     }else{
%]
     <p:panelGrid  layout="[%=responsive%]" [%=self.mkUIDBinding()%] columns="[%=columns%]"  [%=self.styleAttributes(hash)%]   [%=self.rendered(hash)%]   styleClass="[%=self.styleClassByClassifier(util.getHint(model_mapper,"styleClass")).replace(","," ")%]"  columnClasses="[%=self.styleClassByClassifier(util.getHint(model_mapper,"panel.columns.class"))%]">
     [%=self.generateBody(hash)%]     
     </p:panelGrid>
[%
}
    util.traceIfDebug("UI element","LayerHolder end: "+self.uid);     
}

@template
operation form::LayerHolder  generateBody(hash){
                for (element in self.children.sortBy(q|q.order)){
%]                
                    [%=element.draw(hash)%]
[%
                }  
}
%]