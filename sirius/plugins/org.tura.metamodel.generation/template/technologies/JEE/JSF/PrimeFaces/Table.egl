[%@template
operation form::Table draw(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.put("context","table");
     util.traceIfDebug("UI element","Table start: "+self.uid);     
     
%]
     [%=self.generateBody(hash)%]     
[%
     hash.put("context",null);
     util.traceIfDebug("UI element","Table end: "+self.uid);     
}


@template
operation form::Table generateBody(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     var hints = new Native('java.util.HashMap');
     var model_mapper = hash.get('model_mapper');
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     
     
     var selector = "\"5,10,15\"";
     if (self.findClassifier(util.getHint(model_mapper,"row number selector"))){
        selector = self.~hintDetails;
     }
     var selectionMode = 'selectionMode="single"';
     if ( "Multiple".equals( self.selectionMode.toString())){
        selectionMode = "";
     } 
     var sortableCol =  self.cols->select(r|r.sortable.toString()<> "Not" );
     
     var gridType = "gridSingleSelect";
     if ("Multiple".equals(self.selectionMode.toString())){
        gridType = "gridMultiSelect";
     }
     
     
     hints.put("noCurlyBracket",true);
%]
    <p:dataTable [%=self.mkUIDBinding()%] [%=self.styleAttributes(hash)%] [%=self.enabled(hash)%] var="row" 
        value="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).getLazyModel()}"
        lazy="true"
        [% if (self.scrollable){  %]
		scrollRows="[%=self.rowNumber%]"
		virtualScroll = "true"
		scrollHeight="[%=self.scrollHeight%]"
		scrollable = "true"
        paginator="false" 
        [%}else { %]
        rows="[%=self.rowNumber%]"         
        paginator="true" 
        paginatorTemplate="{RowsPerPageDropdown}  {PreviousPageLink}  {NextPageLink}"
        paginatorPosition="bottom"
        rowsPerPageTemplate=[%=selector%]
        [%}%]
         [%=selectionMode%] 
        rowKey="#{row.viewModelId1}" editable="true" 
        selection="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).selected}"
        >
        
[%
     if ("Single".equals(self.selectionMode.toString())){
%]                    
        <p:ajax event="rowSelect" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxSelected}" [%=self.refreshArias()%]/>
        <p:ajax event="contextMenu" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxSelected}" [%=self.refreshArias()%]/>
       [%
      }else{
%]                    
      <p:column selectionMode="multiple" style="width:16px;text-align:center"/>      
      <p:ajax event="rowSelectCheckbox" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxSelected}" [%=self.refreshArias()%]/>
      <p:ajax event="rowUnselectCheckbox" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxUnSelected}" [%=self.refreshArias()%]/>
      <p:ajax event="toggleSelect" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxToggleSelect}" [%=self.refreshArias()%]/>
      <p:ajax event="contextMenu" listener="#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','[%=gridType%]', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).ajaxSelected}" [%=self.refreshArias()%]/>
[%
      }
      
       
      if (sortableCol.size() <> 0){
       %]
        <p:ajax event="sort"  [%=self.refreshArias()%]/>
            [%
       } 
      %]        
        
[%
                for (element in self.cols.sortBy(q|q.order)){
%]                
                    [%=element.draw(hash)%]
[%
                }  
%]                
        
        </p:dataTable>    
[%
 if(self.menu <> null ){
     hash.get("menuReferences").add(self);
 %]
    <p:contextMenu  for="#{viewIdentificator.getClientId([%=self.mkuid()%])}" model="#{menuProvider[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]')}"  [%=self.uiElementAttributes(hash)%]/>    
 [%
 
 }


}
%]