[%
operation  message_library_generation(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');

     var library = hash.get("library");    
     var resourcePath = hash.get("resourcePath");   
     var javaPath = hash.get("javaPath");
     var application = library.eContainer().parent.parent.parent;
     var component = hash.get("component"); 
     
     for (  lang in library.libLanguages){
     message_content(lang, library,resourcePath,application);
     message_bundl_provider( library,javaPath,application,component);
     }
 }
 
@template
operation  message_content(lang, library,resourcePath,application) {
     var util = new Native('org.tura.metamodel.commons.Util');
      for (  message in library.messages){
      
      var translation = message.translatioins->select(t|t.lang = lang)->collect(t|t.translation);
      if (translation.size() <> 0 ){
%][%=message.name.replaceAll(" ","")%]=[%=translation.get(0)%]
[%
        }     
      }
    var encoding = "UTF-8";
    if (library.findClassifier (util.getHint(model_mapper,"encoding"))){
       encoding = library.~hintDetails;
    }
     
    util.saveFile( resourcePath+"/"+util.mergeAndCapitalize(application.name).toLowerCase(), util.mergeAndCapitalize(library.name)+"_"+lang.lang.code+".properties",out.toString(),encoding);   
 }
 
@template
operation  message_bundl_provider( library,javaPath,application,component) {
    var util = new Native('org.tura.metamodel.commons.Util');
    var encoding = "UTF-8";
    if (library.findClassifier (util.getHint(model_mapper,"encoding"))){
       encoding = library.~hintDetails;
    }
%]
package  [%=component.basePackage%].commons.resourcebundle;  

public class [%=util.mergeAndCapitalize(library.name)%]Bundle extends java.util.ResourceBundle {

    protected static final String BUNDLE_NAME = "[%=util.mergeAndCapitalize(application.name).toLowerCase()%].[%=util.mergeAndCapitalize(library.name)%]";
    protected static final String BUNDLE_EXTENSION = "properties";
    protected static final Control CHARSET_CONTROL = new CharSetControl();

    public [%=util.mergeAndCapitalize(library.name)%]Bundle() {
        setParent(java.util.ResourceBundle.getBundle(BUNDLE_NAME, 
            javax.faces.context.FacesContext.getCurrentInstance().getViewRoot().getLocale(), CHARSET_CONTROL));
    }

    @Override
    protected Object handleGetObject(String key) {
        return parent.getObject(key);
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    @Override
    public java.util.Enumeration getKeys() {
        return parent.getKeys();
    }

    protected static class CharSetControl extends Control {
        public java.util.ResourceBundle newBundle
            (String baseName, java.util.Locale locale, String format, ClassLoader loader, boolean reload)
                throws IllegalAccessException, InstantiationException, java.io.IOException
        {
            String bundleName = toBundleName(baseName, locale);
            String resourceName = toResourceName(bundleName, BUNDLE_EXTENSION);
            java.util.ResourceBundle bundle = null;
            java.io.InputStream stream = null;
            if (reload) {
                java.net.URL url = loader.getResource(resourceName);
                if (url != null) {
                    java.net.URLConnection connection = url.openConnection();
                    if (connection != null) {
                        connection.setUseCaches(false);
                        stream = connection.getInputStream();
                    }
                }
            } else {
                stream = loader.getResourceAsStream(resourceName);
            }
            if (stream != null) {
                try {
                    bundle = new java.util.PropertyResourceBundle(new java.io.InputStreamReader(stream, "[%=encoding%]"));
                } finally {
                    stream.close();
                }
            }
            return bundle;
        }
    }

}
[%
    util.saveFile( javaPath+"/commons/resourcebundle/"  , util.mergeAndCapitalize(library.name)+"Bundle.java",out.toString());   
} 
%]