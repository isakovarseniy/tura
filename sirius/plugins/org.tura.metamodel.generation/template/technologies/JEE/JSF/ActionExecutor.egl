[%@template
operation   actionExecutor(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var recipe = hash.get("recipe");
     var ingredient = hash.get("ingredient");
     var component = hash.get("component");
     var form = hash.get("form");
     var actionTriggers = hash.get("actionTriggers");
     var  javaPath =  hash.get("javaPath");  
     var uipackage = hash.get("uipackage");
 %]

package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].action;

import org.tura.platform.datacontrol.ELResolver;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.lang.reflect.Constructor;
import java.util.logging.Level;
import org.primefaces.event.FileUploadEvent;
import org.tura.platform.primefaces.lib.FileUploadEventAccessor;

import javax.faces.event.ActionEvent;

import javax.inject.Inject;

@javax.inject.Named("actionExecutor[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%]")
public class ActionExecutor  implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private  java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ActionExecutor.class.getName());;

	@Inject
	private ELResolver elResolver;
    
    private java.util.HashMap<String,Object> hash = new  java.util.HashMap<String,Object>();
    
    public String src;
    
    
[%
     var map = new Native('java.util.HashMap'); 
     var hints = new Native('java.util.HashMap');

     var counter = 0;
     for( trigger in  actionTriggers ){
       var action = trigger.expression.get( trigger.expression.size()-1);
       var method = action.objRef;
       var type = null;
       if (method <> null)
           type = action.objRef.eContainer();
       
     
         if (type <> null ){
           type.mappingType2Java(recipe,ingredient);
           if (type.~mapper.isDefined() and "Type2Java".equals(type.~mapper)) {
                 type.~counter = counter;
                 counter = counter+1;
                 map.put(type.~fullName,type);
            }     
         }
     }
     
     for ( type in map.values()){
%]
	@javax.inject.Inject
	private transient javax.enterprise.inject.Instance<[%=type.~fullName%]> exec_[%=type.~counter%];
[%         
      }
%]
	@javax.annotation.PostConstruct
	public void init() {
[%      
        for( trigger in  actionTriggers ){
          var action = trigger.expression.get( trigger.expression.size()-1);
          var method = action.objRef;
          var type = null;
          if (method <> null)
             type = action.objRef.eContainer();
       
         if (type <> null and type.~fullName.isDefined()){
%]
      hash.put("[%=trigger.mkuid()%]",new Object[]{
            new Class[]{[%
           if (trigger.parameters <> null and trigger.parameters.size() <> 0 ){
              var i = 0;
               for (parameter  in method.parameters){
                  var type = parameter.typeRef;
                  type.mappingType2Java(recipe,ingredient);
                  if ( i <> 0)
                     %],[%
                  %][%=type.~fullName%].class[%
                  i = 1;
               }
           }
            %]},
            new Object[]{[%
           if (trigger.parameters <> null and trigger.parameters.size() <> 0 ){
              var i = 0;
               for (parameter  in trigger.parameters){
                  if ( i <> 0)
                     %],[%
                  %]"[%=buildExpression(parameter.value,hints,hash)%]"[%
                  i = 1;
               }
           }
            %]},
            exec_[%=map.get(type.~fullName).~counter%].get(),
            "[%=util.mergeAndUnCapitalize(method.name)%]"
         }
      );
[%     
       }
     } 
      
%]
   }
   
    public Object setSource(String src) {
        this.src=src;
        return this;
    }
   
   
    @SuppressWarnings("unchecked")
    public Object getAction() {
        try {
            Object[] array = (Object[]) hash.get(src);

            Method method =
                array[2].getClass()
                        .getMethod((String) (array[3]), (Class[]) array[0]);
            @SuppressWarnings("rawtypes")
            ArrayList objects = new ArrayList();
            int i=0;
            for (Object exp : (Object[]) array[1]) {
                Object obj = null;
                String expression = (String) exp;
                if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    obj = elResolver.getValue(expression);
                }else{
                	Class<?> clazz = ((Class[]) array[0])[i];
					 java.lang.reflect.Constructor<?> cnt =  clazz.getDeclaredConstructor(String.class);
					obj = cnt.newInstance(expression);
                }
                i++;
                objects.add(obj);
            }
            return method.invoke(array[2], objects.toArray());
        } catch (Exception e) {
            logger.log(java.util.logging.Level.INFO, e.getMessage(), e);
        }
        return null;
    }

    public void action() {
    	  getAction();
    }

    @SuppressWarnings("unchecked")
    public Object action(javax.faces.event.AjaxBehaviorEvent event) {
        try {
            Object[] array = (Object[]) hash.get(src);

            Method method =
                array[2].getClass()
                        .getMethod((String) (array[3]), (Class[]) array[0]);
            @SuppressWarnings("rawtypes")
            ArrayList objects = new ArrayList();
            int i = 0;
            for (Object exp : (Object[]) array[1]) {
                Object obj = null;
                String expression = (String) exp;
                if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    obj = elResolver.getValue(expression);
                } else {
                    Class<?> clazz = ((Class[]) array[0])[i];
                    Constructor<?> cnt =
                        clazz.getDeclaredConstructor(String.class);
                    obj = cnt.newInstance(expression);
                }
                i++;
                objects.add(obj);
            }
            return method.invoke(array[2], objects.toArray());
        } catch (Exception e) {
            logger.log(Level.INFO, e.getMessage(), e);
        }
        return null;
    }


   
   
    @SuppressWarnings("unchecked")
    public void eventListener(ActionEvent event) {
        try {

            Object[] array = (Object[]) hash.get(src);

            Method method =
                array[2].getClass()
                        .getMethod((String) (array[3]), (Class[]) array[0]);
            @SuppressWarnings("rawtypes")
            ArrayList objects = new ArrayList();
            for (Object exp : (Object[]) array[1]) {
                Object obj = exp;
                String expression = (String) exp;
                if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    obj = elResolver.getValue(expression);
                }
                objects.add(obj);
            }
            if (array[2] instanceof org.tura.platform.primefaces.lib.EventAccessor)
             ((org.tura.platform.primefaces.lib.EventAccessor)array[2]).setEvent(event);
            method.invoke(array[2], objects.toArray());
        } catch (Exception e) {
            logger.log(java.util.logging.Level.INFO, e.getMessage(),e);
        }
    }
    
    @SuppressWarnings("unchecked")
    public void eventListener(FileUploadEvent event) {
        try {
            Object[] array = (Object[]) hash.get(src);

            Method method =
                array[2].getClass()
                        .getMethod((String) (array[3]), (Class[]) array[0]);
            @SuppressWarnings("rawtypes")
            ArrayList objects = new ArrayList();
            for (Object exp : (Object[]) array[1]) {
                Object obj = exp;
                String expression = (String) exp;
                if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    obj = elResolver.getValue(expression);
                }
                objects.add(obj);
            }
            if (array[2] instanceof FileUploadEventAccessor) {
                ((FileUploadEventAccessor) array[2]).setEvent(event);
            }
            method.invoke(array[2], objects.toArray());
        } catch (Exception e) {
            logger.log(java.util.logging.Level.INFO, e.getMessage(), e);
        }
    }
        
    
}  
[%
      var f = new Native("org.tura.metamodel.generation.JavaFormatter");
      out.formatWith(f);
      util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/action/"  , "ActionExecutor.java",out.toString());  
}
%]
