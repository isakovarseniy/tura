[%
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
     var util = new Native('org.tura.metamodel.commons.Util');

%]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].producer;  


@javax.enterprise.inject.Alternative
@javax.annotation.Priority(0)
public class [%=util.mergeAndCapitalize(control.name)%]ParameterProducer {

 	@javax.enterprise.inject.Produces @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")   @org.tura.platform.datacontrol.annotations.CreateTrigger("[%=util.mergeAndUnCapitalize(control.name)%]")
	public org.tura.platform.datacontrol.command.base.CreateObjectParameters getCreateCommand( javax.enterprise.inject.spi.InjectionPoint injectionPoint) throws NoSuchMethodException, SecurityException,
			InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException{
		org.tura.platform.datacontrol.annotations.Create annotation = injectionPoint.getAnnotated().getAnnotation(
				org.tura.platform.datacontrol.annotations.Create.class);

		org.tura.platform.datacontrol.annotations.Parameters parameters = annotation.parameters();
		org.tura.platform.datacontrol.annotations.Parameter prm = parameters.value()[0];

		org.tura.platform.datacontrol.command.base.CallParameter p = parametersBuilder(prm);
		
		org.tura.platform.datacontrol.command.base.CreateObjectParameters cop = new org.tura.platform.datacontrol.command.base.CreateObjectParameters();
		cop.setObjectType(p);

		return cop;


	}


	@javax.enterprise.inject.Produces @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")  @org.tura.platform.datacontrol.annotations.SearchTrigger("[%=util.mergeAndUnCapitalize(control.name)%]")
	public org.tura.platform.datacontrol.command.base.SearchObjectParameters getSearchCommand(javax.enterprise.inject.spi.InjectionPoint injectionPoint) throws NoSuchMethodException, SecurityException,
			InstantiationException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException{
		org.tura.platform.datacontrol.annotations.Search annotation = injectionPoint.getAnnotated().getAnnotation(
				org.tura.platform.datacontrol.annotations.Search.class);

		org.tura.platform.datacontrol.command.base.SearchObjectParameters cop = new org.tura.platform.datacontrol.command.base.SearchObjectParameters();

		org.tura.platform.datacontrol.annotations.Parameters parameters = annotation.parameters();

		org.tura.platform.datacontrol.annotations.Parameter prm = parameters.value()[0];
		org.tura.platform.datacontrol.command.base.CallParameter p = parametersBuilder(prm);
		cop.setSearchCriteria(p);

		prm = parameters.value()[1];
		p = parametersBuilder(prm);
		cop.setOrderByCriteria(p);
		
		prm = parameters.value()[2];
		p = parametersBuilder(prm);
		cop.setStartIndex(p);
		
		prm = parameters.value()[3];
		p = parametersBuilder(prm);
		cop.setEndIndex(p);

		prm = parameters.value()[4];
		p = parametersBuilder(prm);
		cop.setObjectType(p);

		return cop;

	}


	private org.tura.platform.datacontrol.command.base.CallParameter parametersBuilder(org.tura.platform.datacontrol.annotations.Parameter prm)
			throws NoSuchMethodException, SecurityException,
			InstantiationException, IllegalAccessException,
			IllegalArgumentException, java.lang.reflect.InvocationTargetException {


			org.tura.platform.datacontrol.command.base.CallParameter cp = new org.tura.platform.datacontrol.command.base.CallParameter();
			cp.setClazz(prm.type());
			if (!prm.expression().equals("null")){
				cp.setExpression(prm.expression());
			}
			cp.setName(prm.name());
			if (!"".equals(prm.value())) {
				java.lang.reflect.Constructor<?> constructor = prm.type().getConstructor(
						String.class);
				cp.setValue(constructor.newInstance(prm.value()));
			}
			return cp;
	}

	
}
