<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/${Environment}.egl";
${percent}${end}
[%
     var util = new Native('org.tura.metamodel.commons.Util');
%]
package  [%=component.basePackage%].commons.datacontrol;  

import java.lang.annotation.Annotation;

import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.CDI;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;

import org.tura.platform.datacontrol.annotations.AfterPhase;
import org.tura.platform.datacontrol.annotations.BeforePhase;

public class CDIPhaseBridge implements PhaseListener {

	private static final long serialVersionUID = -2462960457042476479L;

	@Override
	public void afterPhase(PhaseEvent event) {
		fireEvent(event, beforePhaseType());
	}

	@Override
	public void beforePhase(PhaseEvent event) {
		fireEvent(event, afterPhaseType());
	}

	private BeforePhase beforePhaseType() {
		return new BeforePhase() {
			@Override
			public Class<? extends Annotation> annotationType() {
				return BeforePhase.class;
			}
		};
	}

	private AfterPhase afterPhaseType() {
		return new AfterPhase() {
			@Override
			public Class<? extends Annotation> annotationType() {
				return AfterPhase.class;
			}
		};
	}

	@Override
	public PhaseId getPhaseId() {
		return PhaseId.ANY_PHASE;
	}

	private void fireEvent(PhaseEvent event, Annotation annotation) {
		BeanManager bm = CDI.current().getBeanManager();
		bm.fireEvent(event, annotation);
	}

}
