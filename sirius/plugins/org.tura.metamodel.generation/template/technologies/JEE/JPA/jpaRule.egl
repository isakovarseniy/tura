[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2model.get(rel.source).get("package")%];  

public class [%=t2model.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%][%=rule%]JpaRule implements org.tura.platform.repository.core.Rule {

      private [%=PK(rel.source,"sourcePk", t2model.get(rel.source).get("fullName"),recipe,ingredient)%]; 
      private [%=PK(rel.target,"targetPk", t2model.get(rel.target).get("fullName"),recipe,ingredient)%] ;
      private javax.persistence.EntityManager em;

     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }
      
      public void setSourcePk([%=PK(rel.source,"sourcePk", t2model.get(rel.source).get("fullName"),recipe,ingredient)%] ){
         this.sourcePk = sourcePk;
      }

      public void setTarget([%=PK(rel.target,"targetPk", t2model.get(rel.target).get("fullName"),recipe,ingredient)%]){
         this.targetPk = targetPk;
      }
      
      public String getKey(){
		  StringBuffer key = new StringBuffer();
		   key.append(sourcePk.toString());
		   key.append("[%=t2model.get(rel.source).get("fullName")%]");
		   key.append(targetPk.toString());
		   key.append("[%=t2model.get(rel.target).get("fullName")%]");
		  return key.toString();
      }

      public void execute(){
      
                 [%=t2model.get(rel.source).get("fullName")%] source = em.find([%=t2model.get(rel.source).get("fullName")%] ,sourcePk);  
                 [%=t2model.get(rel.target).get("fullName")%] target = em.find([%=t2model.get(rel.target).get("fullName")%] ,targetPk);  
                 
      [%
      
                if (rule == "Insert" ){ 
                     var hash = rel.sourceSideNamesCalculation();

			  	     switch  (rel.type.toString()){
			         case "One2One" : %]     source.set[%=hash.get("sourceMethodName")%](target);[%
			         case "One2Many" : %]   source.get[%=hash.get("sourceMethodName")%]().add(target);[%
			         case "Many2Many" : %] source.get[%=hash.get("sourceMethodName")%]().add(target);[%
			         }           
			         
	
	                var hash = rel.targetSideNamesCalculation();
			         
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  target.se[%=hash.get("targetMethodName")%](source);[%
			         case "One2Many" : %] target.set[%=hash.get("targetMethodName")%](source);[%
			         case "Many2Many" : %] target.get[%=hash.get("targetMethodName")%]().add(source);[%
			         }                
		         }

                if (rule == "Remove" ){ 
                     var hash = rel.sourceSideNamesCalculation();

			  	     switch  (rel.type.toString()){
			         case "One2One" : %]     source.set[%=hash.get("sourceMethodName")%](null);[%
			         case "One2Many" : %]   source.get[%=hash.get("sourceMethodName")%]().remove(target);[%
			         case "Many2Many" : %] source.get[%=hash.get("sourceMethodName")%]().remove(target);[%
			         }           
			         
	
	                var hash = rel.targetSideNamesCalculation();
			         
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  target.se[%=hash.get("targetMethodName")%](null);[%
			         case "One2Many" : %] target.set[%=hash.get("targetMethodName")%](null);[%
			         case "Many2Many" : %] target.get[%=hash.get("targetMethodName")%]().remove(source);[%
			         }                
		         }
      %]
      }



}
[%
@template
 operation PK (type,name,objFullName,recipe,ingredient){
       var util = new Native('org.tura.metamodel.commons.Util');
       if (type.~primaryKey.size()>1){%]
         [%=objFullName%]PK [%=name%]
		   [%
       }else{
          var field = type.~primaryKey.get(0);
          field.typeRef.mappingType2Java(recipe,ingredient);
       %]
        [%=field.typeRef.~fullName%]   [%=name%]
       [%}
}

%]