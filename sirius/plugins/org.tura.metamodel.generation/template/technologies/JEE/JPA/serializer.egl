[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=package%];  

public class [%=class%]Serializer {
       [% 
         var tp = type;
         tp.mappingType2Java(recipe,ingredient,"VIEW");
       %]
       public [%=tp.~fullName%]  load([%=fullName%] jpa, java.util.HashMap<String,Object> context,java.util.HashMap<String,org.tura.platform.repository.core.Rule> connections){
		  StringBuffer key = new StringBuffer();
		  [%for ( field in tp.~primaryKey){%]
		   key.append(jpa.get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}%]
		  key.append("[%=fullName%]");
       
        [%=tp.~fullName%] obj = new [%=tp.~fullName%]();
        context.put(key.toString(),obj);
        [%
         while  (1 == 1) {
         %]
          [%=serializer(tp,type.~skipAttributes,"jpa","obj")%]
         [%  
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
                rel.target.mappingType2Java(recipe,ingredient,"VIEW");

                var hash = rel.sourceSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=hash.get("target").~fullName%]  target[%=hash.get("sourceMethodName")%] =  jpa.get[%=hash.get("sourceMethodName")%]();[%
		         case "One2Many" : %] java.util.Collection<[%=hash.get("target").~fullName%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%]();[%
		         case "Many2Many" : %] java.util.Collection<[%=hash.get("target").~fullName%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%]();[%
		         }                

                 var suffix="";
                 var r = rel.source.~class+rel.type.toString()+rel.target.~class;
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : suffix =hash.get("sourceMethodName");%] [%
		         case "One2Many" : %] for ([%=hash.get("target").~fullName%] target : targets[%=hash.get("sourceMethodName")%]) {[%
		         case "Many2Many" : %] for ([%=hash.get("target").~fullName%] target : targets[%=hash.get("sourceMethodName")%]) {[%
		         }         
		                
                 %] 
				  StringBuffer key[%=hash.get("sourceMethodName")%] = new StringBuffer();
				  [%for ( field in hash.get("target").~primaryKey){%]
				   key[%=hash.get("sourceMethodName")%].append(target[%=suffix%].get[%=util.mergeAndCapitalize(field.name)%]());
				   [%}%]
				  key[%=hash.get("sourceMethodName")%].append("[%=hash.get("target").~fullName%]");
				  [%=hash.get("target").~fullName%] obj[%=suffix%] = context.get(key[%=hash.get("sourceMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 obj[%=suffix%] = new [%=hash.get("target").~fullName%]Serializer().load(target[%=suffix%],context,connections);
                 context.put(key[%=hash.get("sourceMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=rel.source.~fullName%][%=rel.type.toString()%][%=rel.target.~class%]SerializerRule   [%=r%] = new [%=rel.source.~fullName%][%=rel.type.toString()%][%=rel.target.~class%]SerializerRule();
                 [%=r%].setSource(obj);
                 [%=r%].setTarget(obj[%=suffix%]);
                 connections.put([%=r%] .getKey(),[%=r%] );
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] }[%
		         case "Many2Many" : %]}[%
		         }         
		         
		     }    
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
		         
                rel.source.mappingType2Java(recipe,ingredient,"VIEW");

                var hash = rel.targetSideNamesCalculation();
		         
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=hash.get("source").~fullName%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();[%
		         case "One2Many" : %] [%=hash.get("source").~fullName%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();[%
		         case "Many2Many" : %] java.util.Collection<[%=hash.get("source").~fullName%]> sources = jpa.get[%=hash.get("targetMethodName")%]();[%
		         }                

                 var suffix=hash.get("targetMethodName");
                 var r = rel.source.~class+rel.type.toString()+rel.target.~class;
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : suffix ="";%] for ([%=hash.get("source").~fullName%] source : sources[%=hash.get("targetMethodName")%]) {[%
		         }         
		                
                 %] 
				  StringBuffer key[%=hash.get("targetMethodName")%] = new StringBuffer();
				  [%for ( field in hash.get("target").~primaryKey){%]
				   key[%=hash.get("targetMethodName")%].append(source[%=suffix%].get[%=util.mergeAndCapitalize(field.name)%]());
				   [%}%]
				  key[%=hash.get("targetMethodName")%].append("[%=hash.get("source").~fullName%]");
				  [%=hash.get("source").~fullName%] obj[%=suffix%] = context.get(key[%=hash.get("targetMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 obj[%=suffix%] = new [%=hash.get("source").~fullName%]Serializer().load(source[%=suffix%],context);
                 context.put(key[%=hash.get("targetMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=rel.source.~fullName%][%=rel.type.toString()%][%=rel.target.~class%]SerializerRule   [%=r%] = new [%=rel.source.~fullName%][%=rel.type.toString()%][%=rel.target.~class%]SerializerRule();
                 [%=r%].setSource(obj[%=suffix%]);
                 [%=r%].setTarget(obj);
                 connections.put([%=r%].getKey(),[%=r%]);
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %]}[%
		         }         
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }%]  
         return obj;
       }

       public void  save(){
         [% 
         var tp = type;
         while  (1 == 1) {%]
          [%=serializer(tp,type.~skipAttributes,"obj","jpa")%]
         [%  
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }%]  
        }
   }    
   
[%
@template
 operation serializer (type,skipAttributes, inObj, outObj){
        var util = new Native('org.tura.metamodel.commons.Util');
		for ( field in type.attributes){
		     if (skipAttributes.contains(field) ){
		        continue; 
		     }   
        	%][%=outObj%].set[%=util.mergeAndCapitalize(field.name)%](  [%=inObj%].get[%=util.mergeAndCapitalize(field.name)%]()  );
 			[%}
 }

%]