[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  


public class [%=dataprovider%]DataProvider implements org.tura.platform.repository.DataProvider{

     private java.util.HashMap<String,string> classMapper;
     private java.util.HashMap<String,org.tura.platform.repository.core.ObjectLiveCycle> objectLiveCycle;
     
     public [%=dataprovider%]DataProvider(){
     }
     
     public [%=dataprovider%]DataProvider(org.tura.platform.repository.Repository repository){
        init(repository);
     }


	public void setRepository(org.tura.platform.repository.Repository repository) {
		init(repository);
	}
     
     private init(org.tura.platform.repository.Repository repository){
     [%
     for (tp in t2view.keySet()){%]
     	repository.addProvider(this,  [%=t2view.get(tp).get("fullName")%].class.getName());
     [%
     }


     for (tp in t2view.keySet()){%]
        classMapper.put([%=t2view.get(tp).get("fullName")%].class.getName(), [%=t2model.get(tp).get("fullName")%].class.getName());
     [%
     }
     for (tp in t2view.keySet()){%]
        objectLiveCycle.put([%=t2view.get(tp).get("fullName")%].class.getName(), new [%=t2view.get(tp).get("fullName")%]Serializer());
     [%
     }
     %]
     }

	private org.tura.platform.repository.core.ObjectLiveCycle findLiveCycle(String name) {
		return objectLiveCycle.get(name);
	}

	private String findPersistenseObject(String name) {
		return classMapper.get(name);
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			Object obj = Class.forName(objectClass).newInstance();
			return obj;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}
     
	@Override
	public void update(Object request, String objectClass) throws RepositoryException {
		try {
			ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
			liveCycle.save(request);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	public void insert(Object request, String objectClass) throws RepositoryException {
		try {
			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
			liveCycle.save(request);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	public void update(Object request, String objectClass) throws RepositoryException {
		try {
			ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
			liveCycle.save(request);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public java.util.List<?> find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			String persistentClass = findPersistenseObject(objectClass);
			long numberOfRows = findNumberOfRows(searchCriteria, orderCriteria, persistentClass);

			java.util.List list = (java.util.List<?>) find(searchCriteria, orderCriteria, startIndex, new Long(numberOfRows).intValue(),
					persistentClass);


			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
			for (int i = 0; i < list.size(); i++) {
				Object obj = liveCycle.load(list.get(i));
				list.set(i, obj);
			}
			org.tura.platform.datacontrol.commons.LazyList lazyList = new LazyList<>(list, numberOfRows, startIndex);

			return lazyList;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	public List<?> find(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws Exception {

		Class<?> clazz = (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql(), clazz);
		query.setFirstResult(startIndex);
		query.setMaxResults(endIndex - startIndex);
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}

		return query.getResultList();
	}

	public long findNumberOfRows(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria,String objectClass) throws Exception {

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		dslQuery.getColumns()[0] = c("count(*)");
		dslQuery.getOrderBy().clear();

		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql());
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}
		return (long) query.getSingleResult();
	}



}
