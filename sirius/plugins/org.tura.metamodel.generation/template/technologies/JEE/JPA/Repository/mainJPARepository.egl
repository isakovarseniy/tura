<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/AddObjectCommand.egl";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/RemoveObjectCommand.egl";
import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/repositoryCommon.egl";


 ${percent}${end}
 
 
  [%
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var t2view = new Native("java.util.HashMap"); 
     var t2model = new Native("java.util.HashMap"); 
     var templateStore = new Native('java.util.HashMap');


     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 

     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);
 
      if (types <> null and types.size <> 0 ){
      
        var resourcePath = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/resources/";  

	    var beansxml : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/CDI/datacontrol/beans-xml.egl",hash,TemplateFactory);
	    beansxml.setFormatter(x);
	    var buffer = beansxml.process();
	    util.saveFile( resourcePath+"/META-INF/"  , "beans.xml",buffer);   
      
        var typeCollection = new Native("java.util.ArrayList"); 
	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

	    
      for(type in typeCollection){
         type.mappingType2Java(recipe,ingredient,'MODEL');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2model.put(type,h);
         
         type.mappingType2Java(recipe,ingredient,'VIEW');
         var h = new Native("java.util.HashMap"); 
         h.put("class",type.~class);
         h.put("package",type.~package);
         h.put("fullName",type.~fullName);
         t2view.put(type,h);
      }	    
 
      var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
      for(type in t2model.keySet()){
         
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
	    hash.put("t2model",t2model);
	    hash.put("t2view",t2view);

	    hash.put("type",type);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
		    
	    util.populateTechnologies(hash,model_mapper);
		
	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/loadObjectCommand.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/commands", "Load"+t2view.get(type).get("class")+"Command.java",buffer);   
         

	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/AddInternalObjectCommand.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/commands", "InternalAdd"+t2view.get(type).get("class")+"Command.java",buffer);   


	    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/RemoveInternalObjectCommand.egl",hash,TemplateFactory,templateStore);
	    serializer.setFormatter(f);
	    var buffer = serializer.process();
	    util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/commands", "InternalRemove"+t2view.get(type).get("class")+"Command.java",buffer);   


        type.addCommand(recipe,ingredient,model_mapper,t2view,t2model,path);
        type.removeCommand(recipe,ingredient,model_mapper,t2view,t2model,path);
        
        for (attribute in type.attributes){
	        if (type.~skipAttributes.contains(attribute) or  type.~bindedAttribute.contains(attribute)){
		        continue; 
		     }
            if (attribute.pk){
               continue;
            }
        
	        hash.put("field",attribute);

		    var serializer : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/UpdateObjectCommand.egl",hash,TemplateFactory,templateStore);
		    serializer.setFormatter(f);
		    var buffer = serializer.process();
		    util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/commands", "Update"+t2view.get(type).get("class")+"On"+util.mergeAndCapitalize(attribute.name)+"Command.java",buffer);   
        
        }


        var allRel = new Native('java.util.ArrayList');
 		var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
 		allRel.addAll(assosiations);
 		assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
 		allRel.addAll(assosiations);
 		
 		for ( rel in allRel  ){
	       if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
	              continue;
	       }

	       hash.put("rel",rel);
 		
		   var rule : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/loadObjectRule.egl",hash,TemplateFactory,templateStore);
		   rule.setFormatter(f);
		   var buffer = rule.process();
		   
		   util.saveFile( path+t2view.get(rel.source).get("package").replaceAll("\\.","\\/")+"/rules", "Load"+t2view.get(rel.source).get("class") + rel.type.toString() +t2view.get(rel.target).get("class")+"Rule.java",buffer);   
 		
 		}
 
  		for ( rel in allRel  ){
	       hash.put("rel",rel);
 		
		   var rule : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/jpaAddRule.egl",hash,TemplateFactory,templateStore);
		   rule.setFormatter(f);
		   var buffer = rule.process();
		   util.saveFile( path+t2model.get(rel.source).get("package").replaceAll("\\.","\\/")+"/rules", "Add"+t2model.get(rel.source).get("class") + rel.type.toString() +t2model.get(rel.target).get("class")+"JpaRule.java",buffer);   

 		}
 		
    }
    
      for(type in t2model.keySet()){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
	       hash.put("type",type);
 		
		   var rule : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/jpaRemoveRule.egl",hash,TemplateFactory,templateStore);
		   rule.setFormatter(f);
		   var buffer = rule.process();
		   
		   util.saveFile( path+t2model.get(type).get("package").replaceAll("\\.","\\/")+"/rules", "Remove"+t2model.get(type).get("class") +"JpaRule.java",buffer);   
     } 	
         
      if (t2model.size() <> 0){
          var dataprovider = util.mergeAndCapitalize(hash.get("type").eContainer().name);
          hash.put("dataprovider",dataprovider);
	 	  var mapper : Template = util.loadTemplate("platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/dataProvider.egl",hash,TemplateFactory);
		  mapper.setFormatter(f);
		  var buffer = mapper.process();
			   
		  util.saveFile( path+t2view.get(hash.get("type")).get("package").replaceAll("\\.","\\/"),dataprovider+"DataProvider.java",buffer);   
     }
 
   }
%]