[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/repositoryCommon.egl";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%].commands;  

public class Load[%=t2view.get(type).get("class")%]Command implements org.tura.platform.repository.core.Command{

     javax.persistence.EntityManager em;
     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }


     public Load[%=t2view.get(type).get("class")%]Command (javax.persistence.EntityManager em){
        this.em=em;
     }

        public Object execute( Object obj ){
			java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules = new java.util.HashMap<String, org.tura.platform.repository.core.Rule>();
			java.util.HashMap<String, Object> context = new java.util.HashMap<String, Object>();
			Object loadedObject = load(obj , context,rules );
		    for (org.tura.platform.repository.core.Rule rule:rules.values()){
			   rule.execute();
		    }
			return loadedObject;
        }
       [% 
         var tp = type;
       %]
       public [%=t2view.get(tp).get("fullName")%]  load(Object o, java.util.HashMap<String,Object> context,java.util.HashMap<String,org.tura.platform.repository.core.Rule> rules){

        [%=t2model.get(tp).get("fullName")%] jpa = ( [%=t2model.get(tp).get("fullName")%] )o;
        [%=stringPK(tp,"key","jpa",t2model.get(tp).get("fullName"))%]
       
        [%=t2view.get(tp).get("fullName")%] obj = new [%=t2view.get(tp).get("fullName")%]();
        context.put(key.toString(),obj);
        [%=addLoadRules(tp,recipe,ingredient,t2model,t2view,model_mapper)%]
        [%=addLoadNoAssosiationRules(tp,recipe,ingredient,t2model,t2view,model_mapper)%]
        
        
         return obj;
       }
     }
[%     
@template
 operation addLoadRules (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
 
         while  (1 == 1) {
         %]
          [%=serializer(tp,type.~skipAttributes,"jpa","obj")%]
         [%  
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
                var serializer = t2view.get(rel.target).get("package")+".commands.Load"+t2view.get(rel.target).get("class")+"Command";

                var hash = rel.sourceSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2model.get(hash.get("target")).get("fullName")%]  target[%=hash.get("sourceMethodName")%] =  jpa.get[%=hash.get("sourceMethodName")%]();  if(target[%=hash.get("sourceMethodName")%] != null){ [%
		         case "One2Many" : %] java.util.Collection<[%=t2model.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%](); if(targets[%=hash.get("sourceMethodName")%] != null){  [%
		         case "Many2Many" : %] java.util.Collection<[%=t2model.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%](); if(targets[%=hash.get("sourceMethodName")%] != null){  [%
		         }                


                 var suffix =hash.get("sourceMethodName");
                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2model.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=hash.get("sourceMethodName")%]) {[%
		         case "Many2Many" : %] for ([%=t2model.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=hash.get("sourceMethodName")%]) {[%
		         }         
		                
                 %] 
                  [%=stringPK(hash.get("target"),"key"+hash.get("sourceMethodName"), "target"+suffix,t2model.get(hash.get("target")).get("fullName"))%]
 				  [%=t2view.get(hash.get("target")).get("fullName")%] obj[%=suffix%] = ([%=t2view.get(hash.get("target")).get("fullName")%] )context.get(key[%=hash.get("sourceMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 [%=serializer%] cmd[%=suffix%] = new [%=serializer%](em); 
                 cmd[%=suffix%].setEntityManager(em);
                 obj[%=suffix%] = cmd[%=suffix%].load(target[%=suffix%],context,rules);
                 context.put(key[%=hash.get("sourceMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=t2view.get(rel.source).get("package")%].rules.Load[%=t2view.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2view.get(rel.target).get("class")%]Rule   [%=r%] = new [%=t2view.get(rel.source).get("package")%].rules.Load[%=t2view.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2view.get(rel.target).get("class")%]Rule();
                 [%=r%].setSource(obj);
                 [%=r%].setTarget(obj[%=suffix%]);
                 rules.put([%=r%] .getKey(),[%=r%] );
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }    
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var serializer = t2view.get(rel.source).get("package")+".commands.Load"+t2view.get(rel.source).get("class")+"Command";
                var hash = rel.targetSideNamesCalculation();
                var suffix =hash.get("sourceMethodName");
		         
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2model.get(hash.get("source")).get("fullName")%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(source[%=hash.get("targetMethodName")%] != null){ [%
		         case "One2Many" : %] [%=t2model.get(hash.get("source")).get("fullName")%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(source[%=hash.get("targetMethodName")%] != null){[%
		         case "Many2Many" : %] java.util.Collection<[%=t2model.get(hash.get("source")).get("fullName")%]> sources[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(sources[%=hash.get("targetMethodName")%] != null){[%
		         }                

                 var suffix=hash.get("targetMethodName");
                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2model.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=hash.get("targetMethodName")%]) {[%
		         }         
		                
                 %] 
                 
                  [%=stringPK(hash.get("source"),"key"+hash.get("targetMethodName"), "source"+suffix,t2model.get(hash.get("source")).get("fullName"))%]
				  [%=t2view.get(hash.get("source")).get("fullName")%] obj[%=suffix%] = ([%=t2view.get(hash.get("source")).get("fullName")%] )context.get(key[%=hash.get("targetMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 [%=serializer%] cmd[%=suffix%] = new [%=serializer%](em); 
                 cmd[%=suffix%].setEntityManager(em);
                 obj[%=suffix%] = cmd[%=suffix%].load(source[%=suffix%],context,rules);
                 context.put(key[%=hash.get("targetMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=t2view.get(rel.source).get("package")%].rules.Load[%=t2view.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]Rule   [%=r%] = new [%=t2view.get(rel.source).get("package")%].rules.Load[%=t2view.get(rel.source).get("class")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]Rule();
                 [%=r%].setSource(obj[%=suffix%]);
                 [%=r%].setTarget(obj);
                 rules.put([%=r%].getKey(),[%=r%]);
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }  
}

@template
 operation addLoadNoAssosiationRules (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
 
         while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
		     for (rel in assosiations){
		         if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var hash = rel.targetSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=serializerDetails(rel,"jpa.get"+hash.get("targetMethodName")+"()","obj")%]  [%
		         case "One2Many" : %] [%=serializerDetails(rel,"jpa.get"+hash.get("targetMethodName")+"()","obj")%]   [%
		         case "Many2Many" : %] [%
		         }                
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }  
}

%]     
 