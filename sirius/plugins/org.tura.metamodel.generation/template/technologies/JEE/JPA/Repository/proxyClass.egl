<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
package [%=type.~package%];


public class  [%=type.~class%]Proxy extends [%=type.~fullName%]  implements org.tura.platform.repository.core.RepositoryEventListener{

    private [%=type.~fullName%] object;
    private java.util.List<org.tura.platform.repository.core.RepositoryEventListener> listeners = new java.util.ArrayList<org.tura.platform.repository.core.RepositoryEventListener>();
    
    [%
		for ( field in type.attributes){
		     if (type.~skipAttributes.contains(field) ){
		        continue; 
		     }   
		    field.typeRef.mappingType2Java(recipe,ingredient);%] 
	      @Override
		  public  [%=field.typeRef.~fullName%]   get[%=util.mergeAndCapitalize(field.name)%](){
		       return object.get[%=util.mergeAndCapitalize(field.name)%]();
          }

	      @Override
		  public  void set[%=util.mergeAndCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
		       object.set[%=util.mergeAndCapitalize(field.name)%]([%=util.mergeAndUnCapitalize(field.name)%]);
		       if (object.getOperation() == null || object.getOperation() =="U"){
		          object.setOperation("U");
		           org.tura.platform.repository.core.ObjectUpdateEvent event = new org.tura.platform.repository.core.ObjectUpdateEvent();
		          event.setSource(this);
		          try{
		          notifyListeners(event);
		          }catch(Exception e){
		            	new RuntimeException(e);
		          }
		       }
          }
          
          

[%
			}    
%]

          private void notifyListeners(org.tura.platform.repository.core.RepositoryEvent event) throws org.tura.platform.repository.core.RepositoryException {
              for (org.tura.platform.repository.core.RepositoryEventListener listener : listeners){
                  listener.handleEventListener(event);
              }
          }
          
	@Override
	public void handleEventListener(RepositoryEvent event) throws org.tura.platform.repository.core.RepositoryException {
		
	}          

}        
      
      
      
      
      
