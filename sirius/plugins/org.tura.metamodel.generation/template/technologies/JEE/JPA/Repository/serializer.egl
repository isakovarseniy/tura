[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  

public class [%=t2view.get(type).get("class")%]Serializer extends org.tura.platform.repository.core.ObjectLiveCycle{

     javax.persistence.EntityManager em;
     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }
      

       [% 
         var tp = type;
       %]
       public [%=t2view.get(tp).get("fullName")%]  load(Object o, java.util.HashMap<String,Object> context,java.util.HashMap<String,org.tura.platform.repository.core.Rule> rules){

        [%=t2model.get(tp).get("fullName")%] jpa = ( [%=t2model.get(tp).get("fullName")%] )o;
        [%=stringPK(tp,"key","jpa",t2model.get(tp).get("fullName"))%]
       
        [%=t2view.get(tp).get("fullName")%] obj = new [%=t2view.get(tp).get("fullName")%]();
        context.put(key.toString(),obj);
        [%=addLoadRules(tp,recipe,ingredient,t2model,t2view,model_mapper)%]
        [%=addLoadNoAssosiationRules(tp,recipe,ingredient,t2model,t2view,model_mapper)%]
        
        
         return obj;
       }
       [%
                var tp = type;
       %]
       public void  save(Object o,HashMap<String, Rule> rules){
       [%=t2view.get(tp).get("fullName")%] obj = ([%=t2view.get(tp).get("fullName")%])o;
       [%=PK(type,"pk","obj",t2model.get(tp).get("fullName"),recipe,ingredient)%]

	         if (obj.getOperation() != null ){
		         if ( "R".equals(obj.getOperation()) ){
		              remove(obj,rules);
		              return;
		         }
		         if ( "I".equals(obj.getOperation()) ){
		              insert(obj,rules);
		              return;
		         }
		         if ("U".equals(obj.getOperation()) ){
                 [%=t2model.get(tp).get("fullName")%] jpa = em.find([%=t2model.get(tp).get("fullName")%].class , pk );
		         [% 
		         while  (1 == 1) {%]
		          [%=serializer(tp,type.~skipAttributes,"obj","jpa")%]
		         [%  
		            if (tp.~extension.isDefined()){
		               tp = tp.~extension;
		            }else{
		               break;
		            }
		         }%]  
		         }
	         }
	        obj.setOperation("C");
		    saveWalk(obj,rules);
        }

	         
         [%
         var tp = type;
         
        %]private void saveWalk([%=t2view.get(tp).get("fullName")%] obj,HashMap<String, Rule> rules){[%
 		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var hash = rel.sourceSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("target")).get("fullName")%]  target[%=hash.get("sourceMethodName")%] =  obj.get[%=hash.get("sourceMethodName")%](); if ( target[%=hash.get("sourceMethodName")%] != null){  [%
		         case "One2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%] != null) {[%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%] != null) {[%
		         }                

                 var suffix =hash.get("sourceMethodName");
		  	     switch  (rel.type.toString()){
		         case "One2One" :  %] [%
		         case "One2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         }         
		                
                 %] 
                 if ( target[%=suffix%].getOperation() == null || !target[%=suffix%].getOperation().equals("C")) {
                 
                  [%=t2view.get(hash.get("target")).get("fullName")%]Serializer serializer[%=suffix%] = new  [%=t2view.get(hash.get("target")).get("fullName")%]Serializer();
                  serializer[%=suffix%].setEntityManager(em);
                  serializer[%=suffix%].save(target[%=suffix%],rules);
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }}[%
		         case "One2Many" : %] }}}[%
		         case "Many2Many" : %]}}}[%
		         }         
		         
		     }    
		     
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
		         

                var hash = rel.targetSideNamesCalculation();
                 var suffix=hash.get("targetMethodName");
		         
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();   if (source[%=suffix%] != null) {[%
		         case "One2Many" : %] [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null) {[%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("source")).get("fullName")%]> sources[%=suffix%] = obj.get[%=hash.get("targetMethodName")%](); if (sources[%=suffix%] != null) {[%
		         }                

                 var suffix=hash.get("targetMethodName");
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=suffix%]) {[%
		         }         
		                
                 %] 
                 if (source[%=suffix%].getOperation() == null ||  !source[%=suffix%].getOperation().equals("C")){

                 [%=t2view.get(hash.get("source")).get("fullName")%]Serializer serializer[%=suffix%] =  new [%=t2view.get(hash.get("source")).get("fullName")%]Serializer ();
                 serializer[%=suffix%].setEntityManager(em);
                 serializer[%=suffix%].save(source[%=suffix%],rules);
                 [%
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }}[%
		         case "One2Many" : %]}} [%
		         case "Many2Many" : %]}}}[%
		         }         
		     }
       %]	         
        }
        [%
         var tp = type;
       %]
        
        public void  insert([%=t2view.get(tp).get("fullName")%] obj,HashMap<String, Rule> rules){
        
          [%=t2model.get(tp).get("fullName")%] jpa = new [%=t2model.get(tp).get("fullName")%]();
		         [% 
                 var tp = type;
		         while  (1 == 1) {%]
		          [%=serializer(tp,type.~skipAttributes,"obj","jpa")%]
		         [%  
		            if (tp.~extension.isDefined()){
		               tp = tp.~extension;
		            }else{
		               break;
		            }
		         }%]  
		   em.persist(jpa);
	       obj.setOperation("C");
           [%=PK(type,"pkInsert","obj",t2model.get(tp).get("fullName"),recipe,ingredient)%]
		   [%=addInsertRule (type,"Insert",recipe,ingredient,t2model,t2view,model_mapper)%]
		   [%=addInsertNoAssosiationtRule (type,recipe,ingredient,t2model,t2view,model_mapper)%]
         }
        [%
        var tp = type;
       %]
        
        public void  remove([%=t2view.get(tp).get("fullName")%] obj, HashMap<String, Rule> rules){
          [%=PK(type,"pkRemove","obj",t2model.get(tp).get("fullName"),recipe,ingredient)%]
          [%=t2model.get(tp).get("fullName")%] jpa = em.find([%=t2model.get(tp).get("fullName")%].class,pkRemove);
           [%=t2model.get(tp).get("fullName")%]RemoveJpaRule rule = new   [%=t2model.get(tp).get("fullName")%]RemoveJpaRule();
           rule.setEntityManager(em);
           rule.setEntityPk(pkRemove);
           rules.put(rule.getKey(), rule);
	       obj.setOperation("C");
        
          [%=addRemoveRule (type,"Remove",recipe,ingredient,t2model,t2view,model_mapper)%]
          [%=addRemoveNoAssosiationRule (type,recipe,ingredient,t2model,t2view,model_mapper)%]
        }
        
   }    
   
[%
@template
 operation serializer (type,skipAttributes, inObj, outObj){
        var util = new Native('org.tura.metamodel.commons.Util');
		for ( field in type.attributes){
		     if (skipAttributes.contains(field) ){
		        continue; 
		     }   
        	%][%=outObj%].set[%=util.mergeAndCapitalize(field.name)%](  [%=inObj%].get[%=util.mergeAndCapitalize(field.name)%]()  );
 			[%}
 }
 
 
@template
 operation serializerDetails (rel, inObj, outObj){
        var util = new Native('org.tura.metamodel.commons.Util');
		for ( lnk in rel.links){
        	%][%=outObj%].set[%=util.mergeAndCapitalize( lnk.detailField.name)%](  [%=inObj%].get[%=util.mergeAndCapitalize(lnk.masterField.name)%]()  );
 			[%}
 } 


@template
 operation stringPK (type,name,obj,objFullName){
        var util = new Native('org.tura.metamodel.commons.Util');
 %]
 		  StringBuffer [%=name%] = new StringBuffer();
		  [%for ( field in type.~primaryKey){%]
		   [%=name%].append([%=obj%].get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}%]
		   [%=name%].append("[%=objFullName%]");
 [%
}

@template
 operation PK (type,name,obj,objFullName,recipe,ingredient){
       var util = new Native('org.tura.metamodel.commons.Util');
       if (type.~primaryKey.size()>1){%]
        [%=objFullName%]PK [%=name%] = new  [%=objFullName%]PK();
		  [%for ( field in type.~primaryKey){%]
		   [%=name%].set[%=util.mergeAndCapitalize(field.name)%](obj.get[%=util.mergeAndCapitalize(field.name)%]());
		   [%}
       }else{
          var field = type.~primaryKey.get(0);
          field.typeRef.mappingType2Java(recipe,ingredient);
       %]
        [%=field.typeRef.~fullName%]   [%=name%] =  [%=obj%].get[%=util.mergeAndCapitalize(field.name)%]();
       [%}
}


@template
 operation PKDetails (type,name,obj,objFullName,recipe,ingredient,rel){
       var util = new Native('org.tura.metamodel.commons.Util');
       if (type.~primaryKey.size()>1){%]
        [%=objFullName%]PK [%=name%] = new  [%=objFullName%]PK();
		  [%  		for ( lnk in rel.links) {%]
		   [%=name%].set[%=util.mergeAndCapitalize(lnk.masterField.name)%](obj.get[%=util.mergeAndCapitalize(lnk.detailField.name)%]());
		   [%}
       }else{
          var lnk = rel.links.Iterator().next();
          if (lnk == null){
            return;
          }
          var field = lnk.detailField;
          field.typeRef.mappingType2Java(recipe,ingredient);
       %]
        [%=field.typeRef.~fullName%]   [%=name%] =  [%=obj%].get[%=util.mergeAndCapitalize(field.name)%]();
       [%}
}



@template
 operation addLoadNoAssosiationRules (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
 
         while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
		     for (rel in assosiations){
		         if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var hash = rel.targetSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=serializerDetails(rel,"jpa.get"+hash.get("targetMethodName")+"()","obj")%]  [%
		         case "One2Many" : %] [%=serializerDetails(rel,"jpa.get"+hash.get("targetMethodName")+"()","obj")%]   [%
		         case "Many2Many" : %] [%
		         }                
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }  
}



@template
 operation addLoadRules (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
 
         while  (1 == 1) {
         %]
          [%=serializer(tp,type.~skipAttributes,"jpa","obj")%]
         [%  
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
                var serializer = t2view.get(rel.target).get("fullName")+"Serializer";

                var hash = rel.sourceSideNamesCalculation();
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2model.get(hash.get("target")).get("fullName")%]  target[%=hash.get("sourceMethodName")%] =  jpa.get[%=hash.get("sourceMethodName")%]();  if(target[%=hash.get("sourceMethodName")%] != null){ [%
		         case "One2Many" : %] java.util.Collection<[%=t2model.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%](); if(targets[%=hash.get("sourceMethodName")%] != null){  [%
		         case "Many2Many" : %] java.util.Collection<[%=t2model.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   jpa.get[%=hash.get("sourceMethodName")%](); if(targets[%=hash.get("sourceMethodName")%] != null){  [%
		         }                


                 var suffix =hash.get("sourceMethodName");
                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2model.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=hash.get("sourceMethodName")%]) {[%
		         case "Many2Many" : %] for ([%=t2model.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=hash.get("sourceMethodName")%]) {[%
		         }         
		                
                 %] 
                  [%=stringPK(hash.get("target"),"key"+hash.get("sourceMethodName"), "target"+suffix,t2model.get(hash.get("target")).get("fullName"))%]
 				  [%=t2view.get(hash.get("target")).get("fullName")%] obj[%=suffix%] = ([%=t2view.get(hash.get("target")).get("fullName")%] )context.get(key[%=hash.get("sourceMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 [%=serializer%] serializer[%=suffix%] = new [%=serializer%](); 
                 serializer[%=suffix%].setEntityManager(em);
                 obj[%=suffix%] = serializer[%=suffix%].load(target[%=suffix%],context,rules);
                 context.put(key[%=hash.get("sourceMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=t2view.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2view.get(rel.target).get("class")%]SerializerRule   [%=r%] = new [%=t2view.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2view.get(rel.target).get("class")%]SerializerRule();
                 [%=r%].setSource(obj);
                 [%=r%].setTarget(obj[%=suffix%]);
                 rules.put([%=r%] .getKey(),[%=r%] );
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }    
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var serializer = t2view.get(rel.source).get("fullName")+"Serializer";
                var hash = rel.targetSideNamesCalculation();
                var suffix =hash.get("sourceMethodName");
		         
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2model.get(hash.get("source")).get("fullName")%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(source[%=hash.get("targetMethodName")%] != null){ [%
		         case "One2Many" : %] [%=t2model.get(hash.get("source")).get("fullName")%]    source[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(source[%=hash.get("targetMethodName")%] != null){[%
		         case "Many2Many" : %] java.util.Collection<[%=t2model.get(hash.get("source")).get("fullName")%]> sources[%=hash.get("targetMethodName")%] = jpa.get[%=hash.get("targetMethodName")%]();  if(sources[%=hash.get("targetMethodName")%] != null){[%
		         }                

                 var suffix=hash.get("targetMethodName");
                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2model.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=hash.get("targetMethodName")%]) {[%
		         }         
		                
                 %] 
                 
                  [%=stringPK(hash.get("source"),"key"+hash.get("targetMethodName"), "source"+suffix,t2model.get(hash.get("source")).get("fullName"))%]
				  [%=t2view.get(hash.get("source")).get("fullName")%] obj[%=suffix%] = ([%=t2view.get(hash.get("source")).get("fullName")%] )context.get(key[%=hash.get("targetMethodName")%].toString());
                  if (obj[%=suffix%] == null){
                 
                 [%=serializer%] serializer[%=suffix%] = new [%=serializer%](); 
                 serializer[%=suffix%].setEntityManager(em);
                 obj[%=suffix%] = serializer[%=suffix%].load(source[%=suffix%],context,rules);
                 context.put(key[%=hash.get("targetMethodName")%].toString(),obj[%=suffix%]);
                 }
                 [%=t2view.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]SerializerRule   [%=r%] = new [%=t2view.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]SerializerRule();
                 [%=r%].setSource(obj[%=suffix%]);
                 [%=r%].setTarget(obj);
                 rules.put([%=r%].getKey(),[%=r%]);
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }  
}


@template
 operation addInsertRule (type,rule,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
          while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                 var hash = rel.sourceSideNamesCalculation();
                 var suffix =hash.get("sourceMethodName");
                 var serializer = t2view.get(rel.target).get("fullName")+"Serializer";
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("target")).get("fullName")%]  target[%=suffix%] =  obj.get[%=hash.get("sourceMethodName")%]();  if ( target[%=suffix%] != null ) { [%
		         case "One2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%]  != null){ [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%](); if (targets[%=hash.get("sourceMethodName")%]  != null){  [%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         }         
		                
                 %] 
                 [%=PK(rel.target,"pk"+suffix,"target"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   
                 if ( target[%=suffix%].getOperation() == null || !target[%=suffix%].getOperation().equals("C")){
                 
                 [%=t2model.get(rel.target).get("fullName")%] jpa[%=suffix%] = em.find([%=t2model.get(rel.target).get("fullName")%].class,pk[%=suffix%]);
                  if (jpa[%=suffix%] == null){
                     [%=serializer%] serializer[%=suffix%]  = new [%=serializer%] ();
                     serializer[%=suffix%].setEntityManager(em); 
                     serializer[%=suffix%].insert(target[%=suffix%],rules); 
                  }
                 }
                 
                 [%=t2model.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]InsertJpaRule   [%=r%] = new [%=t2model.get(rel.source).get("fullName")%][%=rel.type.toString()%][%=t2model.get(rel.target).get("class")%]InsertJpaRule();
                 [%=r%].setEntityManager(em);
                 [%=r%].setSourcePk(pkInsert);
                 [%=r%].setTargetPk(pk[%=suffix%]);
                 rules.put([%=r%].getKey(),[%=r%] );
                 
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }    
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }


                var hash = rel.targetSideNamesCalculation();
		         
                 var suffix=hash.get("targetMethodName");
                 var serializer = t2view.get(rel.source).get("fullName")+"Serializer";
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "One2Many" : %] [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%]= obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("source")).get("fullName")%]> sources[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (sources[%=suffix%] != null ) {[%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=suffix%]) {[%
		         }         
		                
                 %] 
                 [%=PK(rel.target,"pk"+suffix,"source"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   
                 if (source[%=suffix%].getOperation() == null ||  !source[%=suffix%].getOperation().equals("C")){
                 
                 [%=t2model.get(rel.source).get("fullName")%] jpa[%=suffix%] = em.find([%=t2model.get(rel.source).get("fullName")%].class,pk[%=suffix%]);
                   if (jpa[%=suffix%] == null){
                     [%=serializer%] serializer[%=suffix%]  = new [%=serializer%] ();
                     serializer[%=suffix%].setEntityManager(em); 
                     serializer[%=suffix%].insert(source[%=suffix%],rules); 
                   }
                 }


                 [%=t2model.get(hash.get("source")).get("fullName")%][%=rel.type.toString()%][%=t2model.get(hash.get("target")).get("class")%]InsertJpaRule   [%=r%] = new [%=t2model.get(hash.get("source")).get("fullName")%][%=rel.type.toString()%][%=t2model.get(hash.get("target")).get("class")%]InsertJpaRule();
                 [%=r%].setEntityManager(em);
                 [%=r%].setSourcePk(pk[%=suffix%]);
                 [%=r%].setTargetPk(pkInsert);
                 rules.put([%=r%].getKey(),[%=r%] );
                 [%

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }
}


@template
 operation addInsertNoAssosiationtRule (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
          while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.type.toString() <> "Many2Many");
		     for (rel in assosiations){
		         if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var hash = rel.targetSideNamesCalculation();
		         
                 var suffix=hash.get("targetMethodName");

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		                
                 %] 
                 [%=PKDetails(rel.source,"pk"+suffix,"obj",t2model.get(rel.source).get("fullName"),recipe,ingredient,rel)%]   

                 [%=t2model.get(hash.get("source")).get("fullName")%][%=rel.type.toString()%][%=t2model.get(hash.get("target")).get("class")%]InsertJpaRule   [%=r%] = new [%=t2model.get(hash.get("source")).get("fullName")%][%=rel.type.toString()%][%=t2model.get(hash.get("target")).get("class")%]InsertJpaRule();
                 [%=r%].setEntityManager(em);
                 [%=r%].setSourcePk(pk[%=suffix%]);
                 [%=r%].setTargetPk(pkInsert);
                 rules.put([%=r%].getKey(),[%=r%] );
                 [%
      
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }
}




@template
 operation addRemoveRule (type,rule,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
          while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
		     for (rel in assosiations){

		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                 var hash = rel.sourceSideNamesCalculation();
                 var suffix =hash.get("sourceMethodName");
                 var serializer = t2view.get(rel.target).get("fullName")+"Serializer";
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("target")).get("fullName")%]  target[%=suffix%] =  obj.get[%=hash.get("sourceMethodName")%]();  if ( target[%=suffix%] != null ) { [%
		         case "One2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%]();  if (targets[%=hash.get("sourceMethodName")%]  != null){ [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("target")).get("fullName")%]>  targets[%=hash.get("sourceMethodName")%] =   obj.get[%=hash.get("sourceMethodName")%](); if (targets[%=hash.get("sourceMethodName")%]  != null){  [%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("target")).get("fullName")%] target[%=suffix%] : targets[%=suffix%]) {[%
		         }         
		                
                 %] 
                 if ( target[%=suffix%].getOperation() == null || !target[%=suffix%].getOperation().equals("C")){
                 
                     [%=serializer%] serializer[%=suffix%]  = new [%=serializer%] ();
                     serializer[%=suffix%].setEntityManager(em); 
                     serializer[%=suffix%].remove(target[%=suffix%],rules); 
                 }
                 [%=PK(rel.target,"pk"+suffix,"target"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   
                 [%=t2model.get(rel.target).get("fullName")%] targetJpa[%=t2model.get(rel.target).get("class")%] = em.find([%=t2model.get(rel.target).get("fullName")%].class ,pk[%=suffix%]);

                 [%

			  	     switch  (rel.type.toString()){
			         case "One2One" : %]     jpa.set[%=hash.get("sourceMethodName")%](null);[%
			         case "One2Many" : %]   jpa.get[%=hash.get("sourceMethodName")%]().remove(targetJpa[%=t2model.get(rel.target).get("class")%] );[%
			         case "Many2Many" : %] jpa.get[%=hash.get("sourceMethodName")%]().remove(targetJpa[%=t2model.get(rel.target).get("class")%] );[%
			         }           
			         
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  targetJpa[%=t2model.get(rel.target).get("class")%] .set[%=hash.get("targetMethodName")%](null);[%
			         case "One2Many" : %] targetJpa[%=t2model.get(rel.target).get("class")%] .set[%=hash.get("targetMethodName")%](null);[%
			         case "Many2Many" : %] targetJpa[%=t2model.get(rel.target).get("class")%] .get[%=hash.get("targetMethodName")%]().remove(jpa);[%
			         }                
                 

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %] }}[%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }    
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.source.uid <> t.target.uid);
		     for (rel in assosiations){
		         if ( rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }


                var hash = rel.targetSideNamesCalculation();
		         
                 var suffix=hash.get("targetMethodName");
                 var serializer = t2view.get(rel.source).get("fullName")+"Serializer";
		         
		  	     switch  (rel.type.toString()){
		         case "One2One" : %]  [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "One2Many" : %] [%=t2view.get(hash.get("source")).get("fullName")%]    source[%=suffix%]= obj.get[%=hash.get("targetMethodName")%]();  if (source[%=suffix%] != null ) { [%
		         case "Many2Many" : %] java.util.Collection<[%=t2view.get(hash.get("source")).get("fullName")%]> sources[%=suffix%] = obj.get[%=hash.get("targetMethodName")%]();  if (sources[%=suffix%] != null ) {[%
		         }                

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();
		  	     switch  (rel.type.toString()){
		         case "One2One" : %] [%
		         case "One2Many" : %] [%
		         case "Many2Many" : %] for ([%=t2view.get(hash.get("source")).get("fullName")%] source[%=suffix%] : sources[%=suffix%]) {[%
		         }         
		                
                 %] 
                 if (source[%=suffix%].getOperation() == null ||  !source[%=suffix%].getOperation().equals("C")){
                 
                  [%=serializer%] serializer[%=suffix%]  = new [%=serializer%] ();
                  serializer[%=suffix%].setEntityManager(em); 
                  serializer[%=suffix%].remove(source[%=suffix%],rules); 
                 }

                 [%=PK(rel.target,"pk"+suffix,"source"+suffix,t2model.get(rel.target).get("fullName"),recipe,ingredient)%]   
                 [%=t2model.get(rel.source).get("fullName")%] sourceJpa[%=t2model.get(rel.source).get("class")%] = em.find([%=t2model.get(rel.source).get("fullName")%].class ,pk[%=suffix%]);
                 [%
                 
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]     jpa.set[%=hash.get("targetMethodName")%](null);[%
			         case "One2Many" : %]   jpa.set[%=hash.get("targetMethodName")%](null);[%
			         case "Many2Many" : %] jpa.get[%=hash.get("targetMethodName")%]().remove(sourceJpa[%=t2model.get(rel.source).get("class")%]);[%
			         }           
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  sourceJpa[%=t2model.get(rel.source).get("class")%].set[%=hash.get("sourceMethodName")%](null);[%
			         case "One2Many" : %] sourceJpa[%=t2model.get(rel.source).get("class")%].get[%=hash.get("sourceMethodName")%]().remove(jpa);[%
			         case "Many2Many" : %] sourceJpa[%=t2model.get(rel.source).get("class")%].get[%=hash.get("sourceMethodName")%]().remove(jpa);[%
			         }                

		  	     switch  (rel.type.toString()){
		         case "One2One" : %] }[%
		         case "One2Many" : %]} [%
		         case "Many2Many" : %]}}[%
		         }         
		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }
}


@template
 operation addRemoveNoAssosiationRule (type,recipe,ingredient,t2model,t2view,model_mapper){
         var util = new Native('org.tura.metamodel.commons.Util');
         var tp = type;
          while  (1 == 1) {
		     var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid and t.type.toString() = "Many2Many");
		     for (rel in assosiations){
		         if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }
                var hash = rel.sourceSideNamesCalculation();
		         
		         %]
                  jpa.set[%=hash.get("sourceMethodName")%](new java.util.ArrayList<[%=t2model.get(rel.target).get("fullName")%] >());
            [%
             } 
		     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid );
		     for (rel in assosiations){
		         if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
		                continue;
		         }

                var hash = rel.targetSideNamesCalculation();
		         
                 var suffix=hash.get("targetMethodName");
		         

                 var r = t2model.get(rel.source).get("class")+rel.type.toString()+t2model.get(rel.target).get("class");
                 r = r.toLowerCase();

                 if (rel.type.toString()<> "Many2Many"){ 		                
                 %] 

                 [%=PKDetails(rel.source,"pk"+suffix,"obj",t2model.get(rel.source).get("fullName"),recipe,ingredient,rel)%]   
                 [%=t2model.get(rel.source).get("fullName")%] sourceJpa[%=t2model.get(rel.source).get("class")%] = em.find([%=t2model.get(rel.source).get("fullName")%].class ,pk[%=suffix%]);
                 [%
                 }
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]     jpa.set[%=hash.get("targetMethodName")%](null);[%
			         case "One2Many" : %]   jpa.set[%=hash.get("targetMethodName")%](null);[%
			         case "Many2Many" : %] jpa.set[%=hash.get("targetMethodName")%](new java.util.ArrayList<[%=t2model.get(rel.source).get("fullName")%] >());[%
			         }           
			         
			  	     switch  (rel.type.toString()){
			         case "One2One" : %]  sourceJpa[%=t2model.get(rel.source).get("class")%].set[%=hash.get("sourceMethodName")%](null);[%
			         case "One2Many" : %] sourceJpa[%=t2model.get(rel.source).get("class")%].get[%=hash.get("sourceMethodName")%]().remove(jpa);[%
			         case "Many2Many" : %] [%
			         }                

		         
		     }
		
            if (tp.~extension.isDefined()){
               tp = tp.~extension;
            }else{
               break;
            }
         }
}






%]