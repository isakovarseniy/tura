[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/repositoryCommon.egl";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  

import static com.octo.java.sql.query.Query.c;

public class [%=dataprovider%]DataProvider implements org.tura.platform.repository.core.DataProvider{

    private javax.persistence.EntityManager em;
    private org.tura.platform.repository.core.Repository repository;
    private org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy;
    private java.util.HashMap<String,org.tura.platform.repository.core.Command> classLoader = new java.util.HashMap<String,org.tura.platform.repository.core.Command>();
    private java.util.HashMap<String,String> classMapper = new java.util.HashMap<String,String>();
    private java.util.HashMap<String,org.tura.platform.repository.core.ExtendedQuery> extQueryHash = new java.util.HashMap<String,org.tura.platform.repository.core.ExtendedQuery>();
    private java.util.HashMap<String,org.tura.platform.repository.core.Triggers> extTriggerHash = new java.util.HashMap<String,org.tura.platform.repository.core.Triggers>();
    

     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }
    
     public javax.persistence.EntityManager getEntityManager(){
           return this.em;
     }
     
     public void setPkStrategy(org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy){
          this.pkStrategy=pkStrategy;
     }
     
     public [%=dataprovider%]DataProvider(){
     }
     
     public [%=dataprovider%]DataProvider(org.tura.platform.repository.core.Repository repository,javax.persistence.EntityManager em){
        this.repository=repository;
        this.em=em;
     }


	public void setRepository(org.tura.platform.repository.core.Repository repository) {
        this.repository=repository;
	}
     
     public void init(){
     [%
     for (tp in t2view.keySet()){
        if (not tp.~primaryKey.isDefined()  ){
           continue;
        }
     %]repository.addProvider(this,  [%=t2view.get(tp).get("fullName")%].class.getName());[%
     
	   for (attribute in tp.attributes){
		    if (tp.~skipAttributes.contains(attribute) or  tp.~bindedAttribute.contains(attribute)){
		        continue; 
		     }
		    if (attribute.pk){
		       continue;
		    }
		    %]repository.addCommand(  new [%=tp.~package%].commands.Update[%=tp.~class%]On[%=util.mergeAndCapitalize(attribute.name)%]Command(em), [%=tp.~package%].Update[%=tp.~class%][%=util.mergeAndCapitalize(attribute.name)%]Data.class.getName());[%
      }
     %]
         classLoader.put( [%=t2view.get(tp).get("fullName")%].class.getName(),new [%=t2view.get(tp).get("package")%].commands.Load[%=t2view.get(tp).get("class")%]Command(em,repository)  );
         classMapper.put( [%=t2view.get(tp).get("fullName")%].class.getName(),[%=t2model.get(tp).get("fullName")%].class.getName()  );
     [%
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
            var containment = hash.get("containment");
     
        if (detailType.uid == tp.uid  and not hash.get("noAssosiation") and  rel.type.toString() <> "Many2Many"  and containment){
           topObject = false;
        }
        
        if (hash.get("noAssosiation")){
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
        }else{
	        if (hash.get("containment")){
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
	        }else{
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(em),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
	        }
        }
     }
     if (topObject ){
         %]
         repository.addCommand(  new [%=t2view.get(tp).get("package")%].commands.AddTop[%=t2view.get(tp).get("class")%]Command(em),  [%=t2view.get(tp).get("package")%].AddTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         repository.addCommand(  new [%=t2view.get(tp).get("package")%].commands.RemoveTop[%=t2view.get(tp).get("class")%]Command(em),  [%=t2view.get(tp).get("package")%].RemoveTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         [%
     }
     %]
     [%
     }
     %]
     }


	private org.tura.platform.repository.core.Command findLoader(String name) {
		return classLoader.get(name);
	}

	private String findPersistanceClass(String name) {
		return classMapper.get(name);
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			Object obj = Class.forName(objectClass).newInstance();
            if (pkStrategy != null){
            	pkStrategy.generatePk(obj);
            }
			return obj;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}
     

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public org.tura.platform.repository.core.SearchResult find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			String persistentClass = findPersistanceClass(objectClass);
    	    List<org.tura.platform.datacontrol.commons.SearchCriteria> copySearchCriteria  = new java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria>();
    	    copySearchCriteria.addAll(searchCriteria);
    	
    	   String extQuery = findExtParameter(copySearchCriteria);
    	   org.tura.platform.repository.core.Triggers triggers = null;
    	   if (extQuery == null){
    	      triggers = extTriggerHash.get(persistentClass+".triggers."+"default");
    	   }else{
    	      triggers = extTriggerHash.get(persistentClass+".triggers."+extQuery);
    	   } 
			
			if (triggers != null ){
			    triggers.preQueryTrigger(copySearchCriteria, orderCriteria);
			}
			
			long numberOfRows = findNumberOfRows(copySearchCriteria, orderCriteria, persistentClass,extQuery);

			java.util.List list = (java.util.List<?>) findObjects(copySearchCriteria, orderCriteria, startIndex, new Long(numberOfRows).intValue(),
					persistentClass,extQuery);


			org.tura.platform.repository.core.Command cmd = findLoader(objectClass);
			for (int i = 0; i < list.size(); i++) {
				Object obj = cmd.execute(list.get(i));
			    if (triggers != null) {
			       triggers.postQueryTrigger(obj);
			    }
				list.set(i, obj);
			}
            return new org.tura.platform.repository.core.SearchResult(list, numberOfRows);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}


    public List<?> findObjects(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
        Integer endIndex, String objectClass,String extQuery) throws Exception {
    	
    	if (extQuery != null){
                return executeExtendedQuery(searchCriteria,orderCriteria,startIndex,endIndex, objectClass ,extQueryHash.get(objectClass+".query."+extQuery).findObjectsQuery());
    	}else{
    		return executeDefaultQuery(searchCriteria,orderCriteria,startIndex,endIndex,objectClass);
    	}
    }

    public long findNumberOfRows(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, String objectClass,String extQuery) throws Exception {

    	if (extQuery != null){
                return executeExtendedNumberOfRowsQuery(searchCriteria,orderCriteria, objectClass ,extQueryHash.get(objectClass+".query."+extQuery).findNumberOfRowsQuery());
    	}else{
    		return executeDefaultNumberOfRowsQuery(searchCriteria,orderCriteria,objectClass);
    	}
    	
  }




	public java.util.List<?> executeDefaultQuery(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws Exception {

		Class<?> clazz = (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql(), clazz);
		query.setFirstResult(startIndex);
		if (endIndex > 0){
		   query.setMaxResults(endIndex - startIndex);
		}
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}

		return query.getResultList();
	}

	public long executeDefaultNumberOfRowsQuery(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria,String objectClass) throws Exception {

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		dslQuery.getColumns()[0] = c("count(*)");
		dslQuery.getOrderBy().clear();

		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql());
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}
		return (long) query.getSingleResult();
	}
	   
    private List<?> executeExtendedQuery(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria,List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
            Integer endIndex, String objectClass,String extQuery) throws Exception{
    	
        Class<?> clazz =
                (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

        Query query = getEntityManager().createQuery(extQuery, clazz);
        query.setFirstResult(startIndex);
        if (endIndex > 0) {
            query.setMaxResults(endIndex - startIndex);
        }
		for (org.tura.platform.datacontrol.commons.SearchCriteria sc  : searchCriteria){
            query.setParameter(sc.getName(), sc.getValue());
		}    	
        return query.getResultList();
    }    

    private long executeExtendedNumberOfRowsQuery(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, String objectClass,String extQuery) throws Exception{
    	
        Class<?> clazz =
                (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

        Query query = getEntityManager().createQuery(extQuery, clazz);
		for (SearchCriteria sc  : searchCriteria){
            query.setParameter(sc.getName(), sc.getValue());
		}    	
        return (long) query.getSingleResult();
    }    
    
	@Override
	public void setExtendedQuery(org.tura.platform.repository.core.ExtendedQuery query) {
	    if (classMapper.values().contains(query.getCalssName())) {
		    extQueryHash.put(query.getCalssName()+".query."+query.getQueryName(), query);
	   }
	}
	
	@Override
	public void setTriggers(org.tura.platform.repository.core.Triggers  triggers) {
	   if (classMapper.values().contains(triggers.getCalssName())) {
		    extTriggerHash.put(triggers.getCalssName()+".triggers."+triggers.getQueryName(), triggers);
	   }
	}



	private String findExtParameter(List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria){
		org.tura.platform.datacontrol.commons.SearchCriteria saved = null;
		for (org.tura.platform.datacontrol.commons.SearchCriteria sc  : searchCriteria){
			if ( org.tura.platform.datacontrol.commons.Constants.TURA_EXT_QUERY.equals(sc.getName())){
				 saved = sc;
			}
		}
		if (saved != null){
			searchCriteria.remove(saved);
			return (String) saved.getValue();
		}
		return null;
	}

}
