[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/assosiation.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/technologies/JEE/JPA/Repository/repositoryCommon.egl";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  

import static com.octo.java.sql.query.Query.c;

public class [%=dataprovider%]DataProvider implements org.tura.platform.repository.core.DataProvider{

    private javax.persistence.EntityManager em;
    private org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy;
    private java.util.HashMap<String,org.tura.platform.repository.core.Command> classLoader = new java.util.HashMap<String,org.tura.platform.repository.core.Command>();
    private java.util.HashMap<String,String> classMapper = new java.util.HashMap<String,String>();
    

     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }
    
     public javax.persistence.EntityManager getEntityManager(){
           return this.em;
     }
     
     public void setPkStrategy(org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy){
          this.pkStrategy=pkStrategy;
     }
     
     public [%=dataprovider%]DataProvider(){
     }
     
     public [%=dataprovider%]DataProvider(org.tura.platform.repository.core.Repository repository){
        init(repository);
     }


	public void setRepository(org.tura.platform.repository.core.Repository repository) {
		init(repository);
	}
     
     private void init(org.tura.platform.repository.core.Repository repository){
     [%
     for (tp in t2view.keySet()){
        if (not tp.~primaryKey.isDefined()  ){
           continue;
        }
     
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
     
        if (detailType.uid == tp.uid  and not hash.get("noAssosiation") and  rel.type.toString() <> "Many2Many"){
           topObject = false;
        }
        
        if (hash.get("noAssosiation")){
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]OnNoAssosiation[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
        }else{
	        if (hash.get("containment")){
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
	        }else{
              %]
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Add[%=t2view.get(detailType).get("class")%]2[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              repository.addCommand(  new [%=t2view.get(detailType).get("package")%].commands.Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Command(),  [%=t2view.get(detailType).get("package")%].Remove[%=t2view.get(detailType).get("class")%]From[%=t2view.get(masterType).get("class")%]On[%=util.mergeAndCapitalize(property)%]Data.class.getName());
              [%
	        }
        }
     }
     if (topObject ){
         %]
         repository.addCommand(  new [%=t2view.get(tp).get("package")%].commands.AddTop[%=t2view.get(tp).get("class")%]Command(),  [%=t2view.get(tp).get("package")%].AddTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         repository.addCommand(  new [%=t2view.get(tp).get("package")%].commands.RemoveTop[%=t2view.get(tp).get("class")%]Command(),  [%=t2view.get(tp).get("package")%].RemoveTop[%=t2view.get(tp).get("class")%]Data.class.getName());
         repository.addProvider(this,  [%=t2view.get(tp).get("fullName")%].class.getName());
         classLoader.put( [%=t2model.get(tp).get("fullName")%].class.getName(),new [%=t2view.get(tp).get("package")%].commands.Load[%=t2view.get(tp).get("class")%]Command()  );
         classMapper.put( [%=t2view.get(tp).get("fullName")%].class.getName(),[%=t2model.get(tp).get("fullName")%].class.getName()  );
         [%
     }
     %]
     [%
     }
     %]
     }


	private org.tura.platform.repository.core.Command findLoader(String name) {
		return classLoader.get(name);
	}

	private String findPersistanceClass(String name) {
		return classMapper.get(name);
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			Object obj = Class.forName(objectClass).newInstance();
            if (pkStrategy != null){
            	pkStrategy.generatePk(obj);
            }
			return obj;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}
     

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public org.tura.platform.repository.core.SearchResult find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			String persistentClass = findPersistanceClass(objectClass);
			long numberOfRows = findNumberOfRows(searchCriteria, orderCriteria, persistentClass);

			java.util.List list = (java.util.List<?>) findObjects(searchCriteria, orderCriteria, startIndex, new Long(numberOfRows).intValue(),
					persistentClass);


			org.tura.platform.repository.core.Command cmd = findLoader(objectClass);
			for (int i = 0; i < list.size(); i++) {
				Object obj = cmd.execute(list.get(i));
				list.set(i, obj);
			}
            return new org.tura.platform.repository.core.SearchResult(list, numberOfRows);
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	public java.util.List<?> findObjects(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws Exception {

		Class<?> clazz = (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql(), clazz);
		query.setFirstResult(startIndex);
		query.setMaxResults(endIndex - startIndex);
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}

		return query.getResultList();
	}

	public long findNumberOfRows(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria,String objectClass) throws Exception {

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		dslQuery.getColumns()[0] = c("count(*)");
		dslQuery.getOrderBy().clear();

		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql());
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}
		return (long) query.getSingleResult();
	}
	   

}
