[%
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/typeElementUtil.eol";
 import "platform:/plugin/org.tura.metamodel.generation/template/commons/categorizedUtil.eol";
  
 var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=t2view.get(type).get("package")%];  

import static com.octo.java.sql.query.Query.c;

public class [%=dataprovider%]DataProvider implements org.tura.platform.repository.core.DataProvider{

     private java.util.HashMap<String,String> classMapper = new java.util.HashMap<String,String>();
     private java.util.HashMap<String,org.tura.platform.repository.core.ObjectLiveCycle> objectLiveCycle = new java.util.HashMap<String,org.tura.platform.repository.core.ObjectLiveCycle> ();
     private javax.persistence.EntityManager em;
    private org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy;

     public void setEntityManager(javax.persistence.EntityManager em){
           this.em=em;
     }
    
     public javax.persistence.EntityManager getEntityManager(){
           return this.em;
     }
     
     public void setPkStrategy(org.tura.platform.repository.core.PrImaryKeyStrategy pkStrategy){
          this.pkStrategy=pkStrategy;
     }
     
     public [%=dataprovider%]DataProvider(){
     }
     
     public [%=dataprovider%]DataProvider(org.tura.platform.repository.core.Repository repository){
        init(repository);
     }


	public void setRepository(org.tura.platform.repository.core.Repository repository) {
		init(repository);
	}
     
     private void init(org.tura.platform.repository.core.Repository repository){
     [%
     for (tp in t2view.keySet()){%]
     	repository.addProvider(this,  [%=t2view.get(tp).get("fullName")%].class.getName());
     [%
     }


     for (tp in t2view.keySet()){
        if (not tp.~primaryKey.isDefined()  ){
           continue;
        }
     %]
        classMapper.put([%=t2view.get(tp).get("fullName")%].class.getName(), [%=t2model.get(tp).get("fullName")%].class.getName());
     [%
     }
     for (tp in t2view.keySet()){
        if (not tp.~primaryKey.isDefined()  ){
           continue;
        }
     %]
        objectLiveCycle.put([%=t2view.get(tp).get("fullName")%].class.getName(), new [%=t2view.get(tp).get("fullName")%]Serializer());
     [%
     
 		var relations = type::Assosiation.allInstances()->select(t|t.source.uid = tp.uid);
 		for ( rel in relations  ){
	       if ( not rel.findClassifier(util.getHint(model_mapper,"No Assosiation"))){
	              continue;
	       }

	       if ( rel.type.toString()<>"Many2Many"   ){
	              continue;
           }
     %]
     objectLiveCycle.put([%=rel.source.~class%]Many2Many[%=rel.target.~class%]Relation.class.getName(),new [%=rel.source.~class%]Many2Many[%=rel.target.~class%]RelationSerializer());
     repository.addProvider(this, [%=rel.source.~class%]Many2Many[%=rel.target.~class%]Relation.class.getName());

     [%
        }
     }
     %]
     }

	private org.tura.platform.repository.core.ObjectLiveCycle findLiveCycle(String name) {
		return objectLiveCycle.get(name);
	}

	private String findPersistenseObject(String name) {
		return classMapper.get(name);
	}

	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			Object obj = Class.forName(objectClass).newInstance();
            if (pkStrategy != null){
            	pkStrategy.generatePk(obj);
            }
			return obj;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}
     
	@Override
	public void update(Object request, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
				java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules = new java.util.HashMap<String, org.tura.platform.repository.core.Rule>();
			org.tura.platform.datacontrol.commons.Reflection.callTyped(liveCycle,"setEntityManager", javax.persistence.EntityManager.class,em);	
			liveCycle.save(request,rules);
			processor(rules.values());
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	public void insert(Object request, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
				java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules = new java.util.HashMap<String, org.tura.platform.repository.core.Rule>();
			org.tura.platform.datacontrol.commons.Reflection.callTyped(liveCycle,"setEntityManager", javax.persistence.EntityManager.class,em);	
			liveCycle.save(request,rules);
			processor(rules.values());
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	public void remove(Object request, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
				java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules = new java.util.HashMap<String, org.tura.platform.repository.core.Rule>();
			org.tura.platform.datacontrol.commons.Reflection.callTyped(liveCycle,"setEntityManager", javax.persistence.EntityManager.class,em);	
			liveCycle.save(request,rules);
			processor(rules.values());
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public java.util.List<?> find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
		try {
			String persistentClass = findPersistenseObject(objectClass);
			long numberOfRows = findNumberOfRows(searchCriteria, orderCriteria, persistentClass);

			java.util.List list = (java.util.List<?>) findObjects(searchCriteria, orderCriteria, startIndex, new Long(numberOfRows).intValue(),
					persistentClass);


			org.tura.platform.repository.core.ObjectLiveCycle liveCycle = findLiveCycle(objectClass);
			for (int i = 0; i < list.size(); i++) {
				java.util.HashMap<String, org.tura.platform.repository.core.Rule> rules = new java.util.HashMap<String, org.tura.platform.repository.core.Rule>();
				java.util.HashMap<String, Object> context = new java.util.HashMap<String, Object>();
				Object obj = liveCycle.load(list.get(i),context,rules);
				processor(rules.values());
			
				list.set(i, obj);
			}
			org.tura.platform.datacontrol.commons.LazyList  lazyList= new org.tura.platform.datacontrol.commons.LazyList(list, numberOfRows, startIndex);

			return lazyList;
		} catch (Exception e) {
			throw new org.tura.platform.repository.core.RepositoryException(e);
		}
	}

	public java.util.List<?> findObjects(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
			Integer endIndex, String objectClass) throws Exception {

		Class<?> clazz = (Class<?>) this.getClass().getClassLoader().loadClass(objectClass);

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql(), clazz);
		query.setFirstResult(startIndex);
		query.setMaxResults(endIndex - startIndex);
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}

		return query.getResultList();
	}

	public long findNumberOfRows(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria, java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria,String objectClass) throws Exception {

		com.octo.java.sql.query.SelectQuery dslQuery = org.tura.platform.datacontrol.commons.DefaulQueryFactory.builder(searchCriteria, orderCriteria, Class.forName(objectClass));
		dslQuery.getColumns()[0] = c("count(*)");
		dslQuery.getOrderBy().clear();

		javax.persistence.Query query = getEntityManager().createQuery(dslQuery.toSql());
		for (String param : dslQuery.getParams().keySet()) {
			query.setParameter(param, dslQuery.getParams().get(param));
		}
		return (long) query.getSingleResult();
	}

   private void processor(java.util.Collection<org.tura.platform.repository.core.Rule> rules){
	   for (org.tura.platform.repository.core.Rule rule:rules){
		   rule.execute();
	   }
	   
   }


}
