/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

/**
 */
package form.provider;

import form.util.FormAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormItemProviderAdapterFactory extends FormAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link form.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FormParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormParameterItemProvider formParameterItemProvider;

	/**
	 * This creates an adapter for a {@link form.FormParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormParameterAdapter() {
		if (formParameterItemProvider == null) {
			formParameterItemProvider = new FormParameterItemProvider(this);
		}

		return formParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Views} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewsItemProvider viewsItemProvider;

	/**
	 * This creates an adapter for a {@link form.Views}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewsAdapter() {
		if (viewsItemProvider == null) {
			viewsItemProvider = new ViewsItemProvider(this);
		}

		return viewsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MultiLangLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiLangLabelItemProvider multiLangLabelItemProvider;

	/**
	 * This creates an adapter for a {@link form.MultiLangLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiLangLabelAdapter() {
		if (multiLangLabelItemProvider == null) {
			multiLangLabelItemProvider = new MultiLangLabelItemProvider(this);
		}

		return multiLangLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.CanvasFrame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CanvasFrameItemProvider canvasFrameItemProvider;

	/**
	 * This creates an adapter for a {@link form.CanvasFrame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCanvasFrameAdapter() {
		if (canvasFrameItemProvider == null) {
			canvasFrameItemProvider = new CanvasFrameItemProvider(this);
		}

		return canvasFrameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewPortHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewPortHolderItemProvider viewPortHolderItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewPortHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewPortHolderAdapter() {
		if (viewPortHolderItemProvider == null) {
			viewPortHolderItemProvider = new ViewPortHolderItemProvider(this);
		}

		return viewPortHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DefaultCavas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultCavasItemProvider defaultCavasItemProvider;

	/**
	 * This creates an adapter for a {@link form.DefaultCavas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultCavasAdapter() {
		if (defaultCavasItemProvider == null) {
			defaultCavasItemProvider = new DefaultCavasItemProvider(this);
		}

		return defaultCavasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewElementItemProvider viewElementItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewElementAdapter() {
		if (viewElementItemProvider == null) {
			viewElementItemProvider = new ViewElementItemProvider(this);
		}

		return viewElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PopupCanvas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PopupCanvasItemProvider popupCanvasItemProvider;

	/**
	 * This creates an adapter for a {@link form.PopupCanvas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPopupCanvasAdapter() {
		if (popupCanvasItemProvider == null) {
			popupCanvasItemProvider = new PopupCanvasItemProvider(this);
		}

		return popupCanvasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.OverlayCanvas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OverlayCanvasItemProvider overlayCanvasItemProvider;

	/**
	 * This creates an adapter for a {@link form.OverlayCanvas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverlayCanvasAdapter() {
		if (overlayCanvasItemProvider == null) {
			overlayCanvasItemProvider = new OverlayCanvasItemProvider(this);
		}

		return overlayCanvasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Canvas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CanvasItemProvider canvasItemProvider;

	/**
	 * This creates an adapter for a {@link form.Canvas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCanvasAdapter() {
		if (canvasItemProvider == null) {
			canvasItemProvider = new CanvasItemProvider(this);
		}

		return canvasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Window} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowItemProvider windowItemProvider;

	/**
	 * This creates an adapter for a {@link form.Window}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowAdapter() {
		if (windowItemProvider == null) {
			windowItemProvider = new WindowItemProvider(this);
		}

		return windowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuDefinitionItemProvider menuDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuDefinitionAdapter() {
		if (menuDefinitionItemProvider == null) {
			menuDefinitionItemProvider = new MenuDefinitionItemProvider(this);
		}

		return menuDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.TabCanvas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabCanvasItemProvider tabCanvasItemProvider;

	/**
	 * This creates an adapter for a {@link form.TabCanvas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabCanvasAdapter() {
		if (tabCanvasItemProvider == null) {
			tabCanvasItemProvider = new TabCanvasItemProvider(this);
		}

		return tabCanvasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.TabPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabPageItemProvider tabPageItemProvider;

	/**
	 * This creates an adapter for a {@link form.TabPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabPageAdapter() {
		if (tabPageItemProvider == null) {
			tabPageItemProvider = new TabPageItemProvider(this);
		}

		return tabPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewPortItemProvider viewPortItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewPortAdapter() {
		if (viewPortItemProvider == null) {
			viewPortItemProvider = new ViewPortItemProvider(this);
		}

		return viewPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewAreaItemProvider viewAreaItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAreaAdapter() {
		if (viewAreaItemProvider == null) {
			viewAreaItemProvider = new ViewAreaItemProvider(this);
		}

		return viewAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewPortTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewPortTriggerItemProvider viewPortTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewPortTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewPortTriggerAdapter() {
		if (viewPortTriggerItemProvider == null) {
			viewPortTriggerItemProvider = new ViewPortTriggerItemProvider(this);
		}

		return viewPortTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ViewInheritance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewInheritanceItemProvider viewInheritanceItemProvider;

	/**
	 * This creates an adapter for a {@link form.ViewInheritance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewInheritanceAdapter() {
		if (viewInheritanceItemProvider == null) {
			viewInheritanceItemProvider = new ViewInheritanceItemProvider(this);
		}

		return viewInheritanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.TabPagesInheritance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabPagesInheritanceItemProvider tabPagesInheritanceItemProvider;

	/**
	 * This creates an adapter for a {@link form.TabPagesInheritance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabPagesInheritanceAdapter() {
		if (tabPagesInheritanceItemProvider == null) {
			tabPagesInheritanceItemProvider = new TabPagesInheritanceItemProvider(this);
		}

		return tabPagesInheritanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.LinkToMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkToMessageItemProvider linkToMessageItemProvider;

	/**
	 * This creates an adapter for a {@link form.LinkToMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkToMessageAdapter() {
		if (linkToMessageItemProvider == null) {
			linkToMessageItemProvider = new LinkToMessageItemProvider(this);
		}

		return linkToMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.LinkToLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkToLabelItemProvider linkToLabelItemProvider;

	/**
	 * This creates an adapter for a {@link form.LinkToLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkToLabelAdapter() {
		if (linkToLabelItemProvider == null) {
			linkToLabelItemProvider = new LinkToLabelItemProvider(this);
		}

		return linkToLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ChildrenHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildrenHolderItemProvider childrenHolderItemProvider;

	/**
	 * This creates an adapter for a {@link form.ChildrenHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildrenHolderAdapter() {
		if (childrenHolderItemProvider == null) {
			childrenHolderItemProvider = new ChildrenHolderItemProvider(this);
		}

		return childrenHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ContextParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextParameterItemProvider contextParameterItemProvider;

	/**
	 * This creates an adapter for a {@link form.ContextParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextParameterAdapter() {
		if (contextParameterItemProvider == null) {
			contextParameterItemProvider = new ContextParameterItemProvider(this);
		}

		return contextParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ContextValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextValueItemProvider contextValueItemProvider;

	/**
	 * This creates an adapter for a {@link form.ContextValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextValueAdapter() {
		if (contextValueItemProvider == null) {
			contextValueItemProvider = new ContextValueItemProvider(this);
		}

		return contextValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ExpressionPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionPartItemProvider expressionPartItemProvider;

	/**
	 * This creates an adapter for a {@link form.ExpressionPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionPartAdapter() {
		if (expressionPartItemProvider == null) {
			expressionPartItemProvider = new ExpressionPartItemProvider(this);
		}

		return expressionPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ContextParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextParametersItemProvider contextParametersItemProvider;

	/**
	 * This creates an adapter for a {@link form.ContextParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextParametersAdapter() {
		if (contextParametersItemProvider == null) {
			contextParametersItemProvider = new ContextParametersItemProvider(this);
		}

		return contextParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link form.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.StyleElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StyleElementItemProvider styleElementItemProvider;

	/**
	 * This creates an adapter for a {@link form.StyleElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStyleElementAdapter() {
		if (styleElementItemProvider == null) {
			styleElementItemProvider = new StyleElementItemProvider(this);
		}

		return styleElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.NickNamed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NickNamedItemProvider nickNamedItemProvider;

	/**
	 * This creates an adapter for a {@link form.NickNamed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNickNamedAdapter() {
		if (nickNamedItemProvider == null) {
			nickNamedItemProvider = new NickNamedItemProvider(this);
		}

		return nickNamedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FlexFields} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlexFieldsItemProvider flexFieldsItemProvider;

	/**
	 * This creates an adapter for a {@link form.FlexFields}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlexFieldsAdapter() {
		if (flexFieldsItemProvider == null) {
			flexFieldsItemProvider = new FlexFieldsItemProvider(this);
		}

		return flexFieldsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FlexField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlexFieldItemProvider flexFieldItemProvider;

	/**
	 * This creates an adapter for a {@link form.FlexField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlexFieldAdapter() {
		if (flexFieldItemProvider == null) {
			flexFieldItemProvider = new FlexFieldItemProvider(this);
		}

		return flexFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.EnabledUIItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnabledUIItemItemProvider enabledUIItemItemProvider;

	/**
	 * This creates an adapter for a {@link form.EnabledUIItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnabledUIItemAdapter() {
		if (enabledUIItemItemProvider == null) {
			enabledUIItemItemProvider = new EnabledUIItemItemProvider(this);
		}

		return enabledUIItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Uielement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UielementItemProvider uielementItemProvider;

	/**
	 * This creates an adapter for a {@link form.Uielement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUielementAdapter() {
		if (uielementItemProvider == null) {
			uielementItemProvider = new UielementItemProvider(this);
		}

		return uielementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ItemIcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemIconItemProvider itemIconItemProvider;

	/**
	 * This creates an adapter for a {@link form.ItemIcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemIconAdapter() {
		if (itemIconItemProvider == null) {
			itemIconItemProvider = new ItemIconItemProvider(this);
		}

		return itemIconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.AreaRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AreaRefItemProvider areaRefItemProvider;

	/**
	 * This creates an adapter for a {@link form.AreaRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAreaRefAdapter() {
		if (areaRefItemProvider == null) {
			areaRefItemProvider = new AreaRefItemProvider(this);
		}

		return areaRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Formatable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormatableItemProvider formatableItemProvider;

	/**
	 * This creates an adapter for a {@link form.Formatable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormatableAdapter() {
		if (formatableItemProvider == null) {
			formatableItemProvider = new FormatableItemProvider(this);
		}

		return formatableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ControlPointer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlPointerItemProvider controlPointerItemProvider;

	/**
	 * This creates an adapter for a {@link form.ControlPointer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlPointerAdapter() {
		if (controlPointerItemProvider == null) {
			controlPointerItemProvider = new ControlPointerItemProvider(this);
		}

		return controlPointerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.SourcesPointer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourcesPointerItemProvider sourcesPointerItemProvider;

	/**
	 * This creates an adapter for a {@link form.SourcesPointer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourcesPointerAdapter() {
		if (sourcesPointerItemProvider == null) {
			sourcesPointerItemProvider = new SourcesPointerItemProvider(this);
		}

		return sourcesPointerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.InputElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputElementItemProvider inputElementItemProvider;

	/**
	 * This creates an adapter for a {@link form.InputElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputElementAdapter() {
		if (inputElementItemProvider == null) {
			inputElementItemProvider = new InputElementItemProvider(this);
		}

		return inputElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Selection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionItemProvider selectionItemProvider;

	/**
	 * This creates an adapter for a {@link form.Selection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAdapter() {
		if (selectionItemProvider == null) {
			selectionItemProvider = new SelectionItemProvider(this);
		}

		return selectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Blockable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockableItemProvider blockableItemProvider;

	/**
	 * This creates an adapter for a {@link form.Blockable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockableAdapter() {
		if (blockableItemProvider == null) {
			blockableItemProvider = new BlockableItemProvider(this);
		}

		return blockableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.LayerHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerHolderItemProvider layerHolderItemProvider;

	/**
	 * This creates an adapter for a {@link form.LayerHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerHolderAdapter() {
		if (layerHolderItemProvider == null) {
			layerHolderItemProvider = new LayerHolderItemProvider(this);
		}

		return layerHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.InputText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputTextItemProvider inputTextItemProvider;

	/**
	 * This creates an adapter for a {@link form.InputText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputTextAdapter() {
		if (inputTextItemProvider == null) {
			inputTextItemProvider = new InputTextItemProvider(this);
		}

		return inputTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Password} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PasswordItemProvider passwordItemProvider;

	/**
	 * This creates an adapter for a {@link form.Password}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPasswordAdapter() {
		if (passwordItemProvider == null) {
			passwordItemProvider = new PasswordItemProvider(this);
		}

		return passwordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link form.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MessageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageElementItemProvider messageElementItemProvider;

	/**
	 * This creates an adapter for a {@link form.MessageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageElementAdapter() {
		if (messageElementItemProvider == null) {
			messageElementItemProvider = new MessageElementItemProvider(this);
		}

		return messageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.OutputText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputTextItemProvider outputTextItemProvider;

	/**
	 * This creates an adapter for a {@link form.OutputText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputTextAdapter() {
		if (outputTextItemProvider == null) {
			outputTextItemProvider = new OutputTextItemProvider(this);
		}

		return outputTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.CheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckBoxItemProvider checkBoxItemProvider;

	/**
	 * This creates an adapter for a {@link form.CheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckBoxAdapter() {
		if (checkBoxItemProvider == null) {
			checkBoxItemProvider = new CheckBoxItemProvider(this);
		}

		return checkBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.OptionSelection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionSelectionItemProvider optionSelectionItemProvider;

	/**
	 * This creates an adapter for a {@link form.OptionSelection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionSelectionAdapter() {
		if (optionSelectionItemProvider == null) {
			optionSelectionItemProvider = new OptionSelectionItemProvider(this);
		}

		return optionSelectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DropDownSelection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropDownSelectionItemProvider dropDownSelectionItemProvider;

	/**
	 * This creates an adapter for a {@link form.DropDownSelection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropDownSelectionAdapter() {
		if (dropDownSelectionItemProvider == null) {
			dropDownSelectionItemProvider = new DropDownSelectionItemProvider(this);
		}

		return dropDownSelectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.SelectManyMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectManyMenuItemProvider selectManyMenuItemProvider;

	/**
	 * This creates an adapter for a {@link form.SelectManyMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectManyMenuAdapter() {
		if (selectManyMenuItemProvider == null) {
			selectManyMenuItemProvider = new SelectManyMenuItemProvider(this);
		}

		return selectManyMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.RadioSelection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioSelectionItemProvider radioSelectionItemProvider;

	/**
	 * This creates an adapter for a {@link form.RadioSelection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioSelectionAdapter() {
		if (radioSelectionItemProvider == null) {
			radioSelectionItemProvider = new RadioSelectionItemProvider(this);
		}

		return radioSelectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link form.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Date} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link form.Date}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DateItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link form.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DataExporter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataExporterItemProvider dataExporterItemProvider;

	/**
	 * This creates an adapter for a {@link form.DataExporter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataExporterAdapter() {
		if (dataExporterItemProvider == null) {
			dataExporterItemProvider = new DataExporterItemProvider(this);
		}

		return dataExporterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link form.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link form.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link form.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.BlockUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockUIItemProvider blockUIItemProvider;

	/**
	 * This creates an adapter for a {@link form.BlockUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockUIAdapter() {
		if (blockUIItemProvider == null) {
			blockUIItemProvider = new BlockUIItemProvider(this);
		}

		return blockUIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FileUpload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileUploadItemProvider fileUploadItemProvider;

	/**
	 * This creates an adapter for a {@link form.FileUpload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileUploadAdapter() {
		if (fileUploadItemProvider == null) {
			fileUploadItemProvider = new FileUploadItemProvider(this);
		}

		return fileUploadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FileDownload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileDownloadItemProvider fileDownloadItemProvider;

	/**
	 * This creates an adapter for a {@link form.FileDownload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileDownloadAdapter() {
		if (fileDownloadItemProvider == null) {
			fileDownloadItemProvider = new FileDownloadItemProvider(this);
		}

		return fileDownloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DataScroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataScrollerItemProvider dataScrollerItemProvider;

	/**
	 * This creates an adapter for a {@link form.DataScroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataScrollerAdapter() {
		if (dataScrollerItemProvider == null) {
			dataScrollerItemProvider = new DataScrollerItemProvider(this);
		}

		return dataScrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.TimeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineItemProvider timeLineItemProvider;

	/**
	 * This creates an adapter for a {@link form.TimeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineAdapter() {
		if (timeLineItemProvider == null) {
			timeLineItemProvider = new TimeLineItemProvider(this);
		}

		return timeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FullCalendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FullCalendarItemProvider fullCalendarItemProvider;

	/**
	 * This creates an adapter for a {@link form.FullCalendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFullCalendarAdapter() {
		if (fullCalendarItemProvider == null) {
			fullCalendarItemProvider = new FullCalendarItemProvider(this);
		}

		return fullCalendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Poll} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PollItemProvider pollItemProvider;

	/**
	 * This creates an adapter for a {@link form.Poll}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPollAdapter() {
		if (pollItemProvider == null) {
			pollItemProvider = new PollItemProvider(this);
		}

		return pollItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DataTemplate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTemplateItemProvider dataTemplateItemProvider;

	/**
	 * This creates an adapter for a {@link form.DataTemplate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTemplateAdapter() {
		if (dataTemplateItemProvider == null) {
			dataTemplateItemProvider = new DataTemplateItemProvider(this);
		}

		return dataTemplateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.WindowRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowRefItemProvider windowRefItemProvider;

	/**
	 * This creates an adapter for a {@link form.WindowRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowRefAdapter() {
		if (windowRefItemProvider == null) {
			windowRefItemProvider = new WindowRefItemProvider(this);
		}

		return windowRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuHolderItemProvider menuHolderItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuHolderAdapter() {
		if (menuHolderItemProvider == null) {
			menuHolderItemProvider = new MenuHolderItemProvider(this);
		}

		return menuHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuExtensionRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuExtensionRefItemProvider menuExtensionRefItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuExtensionRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuExtensionRefAdapter() {
		if (menuExtensionRefItemProvider == null) {
			menuExtensionRefItemProvider = new MenuExtensionRefItemProvider(this);
		}

		return menuExtensionRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuElementItemProvider menuElementItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuElementAdapter() {
		if (menuElementItemProvider == null) {
			menuElementItemProvider = new MenuElementItemProvider(this);
		}

		return menuElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuFolderItemProvider menuFolderItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuFolderAdapter() {
		if (menuFolderItemProvider == null) {
			menuFolderItemProvider = new MenuFolderItemProvider(this);
		}

		return menuFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemItemProvider menuItemItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemAdapter() {
		if (menuItemItemProvider == null) {
			menuItemItemProvider = new MenuItemItemProvider(this);
		}

		return menuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuExtensionPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuExtensionPointItemProvider menuExtensionPointItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuExtensionPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuExtensionPointAdapter() {
		if (menuExtensionPointItemProvider == null) {
			menuExtensionPointItemProvider = new MenuExtensionPointItemProvider(this);
		}

		return menuExtensionPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.SubMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubMenuItemProvider subMenuItemProvider;

	/**
	 * This creates an adapter for a {@link form.SubMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubMenuAdapter() {
		if (subMenuItemProvider == null) {
			subMenuItemProvider = new SubMenuItemProvider(this);
		}

		return subMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ToSubmenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToSubmenuItemProvider toSubmenuItemProvider;

	/**
	 * This creates an adapter for a {@link form.ToSubmenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToSubmenuAdapter() {
		if (toSubmenuItemProvider == null) {
			toSubmenuItemProvider = new ToSubmenuItemProvider(this);
		}

		return toSubmenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.MenuSeparator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuSeparatorItemProvider menuSeparatorItemProvider;

	/**
	 * This creates an adapter for a {@link form.MenuSeparator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuSeparatorAdapter() {
		if (menuSeparatorItemProvider == null) {
			menuSeparatorItemProvider = new MenuSeparatorItemProvider(this);
		}

		return menuSeparatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Tree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreeItemProvider treeItemProvider;

	/**
	 * This creates an adapter for a {@link form.Tree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreeAdapter() {
		if (treeItemProvider == null) {
			treeItemProvider = new TreeItemProvider(this);
		}

		return treeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Controls} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlsItemProvider controlsItemProvider;

	/**
	 * This creates an adapter for a {@link form.Controls}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlsAdapter() {
		if (controlsItemProvider == null) {
			controlsItemProvider = new ControlsItemProvider(this);
		}

		return controlsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PREFormTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREFormTriggerItemProvider preFormTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.PREFormTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREFormTriggerAdapter() {
		if (preFormTriggerItemProvider == null) {
			preFormTriggerItemProvider = new PREFormTriggerItemProvider(this);
		}

		return preFormTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PREQueryTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREQueryTriggerItemProvider preQueryTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.PREQueryTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREQueryTriggerAdapter() {
		if (preQueryTriggerItemProvider == null) {
			preQueryTriggerItemProvider = new PREQueryTriggerItemProvider(this);
		}

		return preQueryTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.POSTQueryTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected POSTQueryTriggerItemProvider postQueryTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.POSTQueryTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPOSTQueryTriggerAdapter() {
		if (postQueryTriggerItemProvider == null) {
			postQueryTriggerItemProvider = new POSTQueryTriggerItemProvider(this);
		}

		return postQueryTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PREInsertTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREInsertTriggerItemProvider preInsertTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.PREInsertTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREInsertTriggerAdapter() {
		if (preInsertTriggerItemProvider == null) {
			preInsertTriggerItemProvider = new PREInsertTriggerItemProvider(this);
		}

		return preInsertTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PREDeleteTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREDeleteTriggerItemProvider preDeleteTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.PREDeleteTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREDeleteTriggerAdapter() {
		if (preDeleteTriggerItemProvider == null) {
			preDeleteTriggerItemProvider = new PREDeleteTriggerItemProvider(this);
		}

		return preDeleteTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.POSTCreateTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected POSTCreateTriggerItemProvider postCreateTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.POSTCreateTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPOSTCreateTriggerAdapter() {
		if (postCreateTriggerItemProvider == null) {
			postCreateTriggerItemProvider = new POSTCreateTriggerItemProvider(this);
		}

		return postCreateTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.PREUpdateTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREUpdateTriggerItemProvider preUpdateTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.PREUpdateTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREUpdateTriggerAdapter() {
		if (preUpdateTriggerItemProvider == null) {
			preUpdateTriggerItemProvider = new PREUpdateTriggerItemProvider(this);
		}

		return preUpdateTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.CreateTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTriggerItemProvider createTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.CreateTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTriggerAdapter() {
		if (createTriggerItemProvider == null) {
			createTriggerItemProvider = new CreateTriggerItemProvider(this);
		}

		return createTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.InsertTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InsertTriggerItemProvider insertTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.InsertTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInsertTriggerAdapter() {
		if (insertTriggerItemProvider == null) {
			insertTriggerItemProvider = new InsertTriggerItemProvider(this);
		}

		return insertTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.UpdateTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateTriggerItemProvider updateTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.UpdateTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateTriggerAdapter() {
		if (updateTriggerItemProvider == null) {
			updateTriggerItemProvider = new UpdateTriggerItemProvider(this);
		}

		return updateTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DeleteTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteTriggerItemProvider deleteTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.DeleteTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteTriggerAdapter() {
		if (deleteTriggerItemProvider == null) {
			deleteTriggerItemProvider = new DeleteTriggerItemProvider(this);
		}

		return deleteTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.SearchTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SearchTriggerItemProvider searchTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link form.SearchTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSearchTriggerAdapter() {
		if (searchTriggerItemProvider == null) {
			searchTriggerItemProvider = new SearchTriggerItemProvider(this);
		}

		return searchTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link form.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.FormVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormVariableItemProvider formVariableItemProvider;

	/**
	 * This creates an adapter for a {@link form.FormVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormVariableAdapter() {
		if (formVariableItemProvider == null) {
			formVariableItemProvider = new FormVariableItemProvider(this);
		}

		return formVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.DataControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataControlItemProvider dataControlItemProvider;

	/**
	 * This creates an adapter for a {@link form.DataControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataControlAdapter() {
		if (dataControlItemProvider == null) {
			dataControlItemProvider = new DataControlItemProvider(this);
		}

		return dataControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.RelationMapper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationMapperItemProvider relationMapperItemProvider;

	/**
	 * This creates an adapter for a {@link form.RelationMapper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationMapperAdapter() {
		if (relationMapperItemProvider == null) {
			relationMapperItemProvider = new RelationMapperItemProvider(this);
		}

		return relationMapperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Orders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrdersItemProvider ordersItemProvider;

	/**
	 * This creates an adapter for a {@link form.Orders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrdersAdapter() {
		if (ordersItemProvider == null) {
			ordersItemProvider = new OrdersItemProvider(this);
		}

		return ordersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.OrderBy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderByItemProvider orderByItemProvider;

	/**
	 * This creates an adapter for a {@link form.OrderBy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderByAdapter() {
		if (orderByItemProvider == null) {
			orderByItemProvider = new OrderByItemProvider(this);
		}

		return orderByItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link form.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.InternalRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalRelationItemProvider internalRelationItemProvider;

	/**
	 * This creates an adapter for a {@link form.InternalRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalRelationAdapter() {
		if (internalRelationItemProvider == null) {
			internalRelationItemProvider = new InternalRelationItemProvider(this);
		}

		return internalRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link form.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link form.ArtificialField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtificialFieldItemProvider artificialFieldItemProvider;

	/**
	 * This creates an adapter for a {@link form.ArtificialField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtificialFieldAdapter() {
		if (artificialFieldItemProvider == null) {
			artificialFieldItemProvider = new ArtificialFieldItemProvider(this);
		}

		return artificialFieldItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
