[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
%]

[% @template
operation  maven_build_runner(hash) {

    var util = new Native('org.tura.metamodel.commons.Util');
     
    var configuration = hash.get("configuration");
    var component = hash.get("component");
    var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;  
    var model_mapper = hash.get("model_mapper");
 %]
[%=mavenBuilder_mavenCleanInstall(configuration, util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId,hash)%]
[%    

    var artifactName="builder";
    var list = model_mapper.findAllClassifiers(util.getHint(model_mapper,"ArtifactName"));
    
    if (list <> null and list.size()>0){
       var c = list.get(0);
       artifactName = c.details;
    }

    util.saveArtifactExecution( model_mapper,  os_shell_executor()+" "+path+"/"+ artifactName+"."+os_batch_extension());
    util.saveFile( path, artifactName+"."+os_batch_extension(),out.toString());   
}

 @template
operation  maven_builder(hash) {


    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var alltypes = hash.get("alltypes");
    var configuration = hash.get("configuration");

    var util = new Native('org.tura.metamodel.commons.Util');
    var lib = new Native('java.util.HashMap');

     var currentLib = component.getArtifactId()+"-"+component.getVersion()+".jar";
     for (type in alltypes){
        type.mappingType2Java(recipe,ingredient);
        if (type.~mapper <> null  and  not type.~mapper.equals("NA") and  type.~library <> null and  type.~library.equals(currentLib)<>true ){
            lib.put(type.~library,type);
        }
     }

    hash.put("lib",lib);
    util.populateTechnologies(hash,model_mapper);

  
     var builder : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JSE/Object/MavenBuilder.egl",hash,TemplateFactory);
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
     builder.setFormatter(f);
    
     var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;  
     var buffer = builder.process();
     util.saveFile( path, "pom.xml",buffer); 
}    

 @template
operation  ant_builder(hash) {
    
 
}
%]