[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation   menuProvider(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var recipe = hash.get("recipe");
     var ingredient = hash.get("ingredient");
     var component = hash.get("component");
     var form = hash.get("form");
     var menuReferences = hash.get("menuReferences");
     var  javaPath =  hash.get("javaPath");  
     var uipackage = hash.get("uipackage");
 %]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].menu;
     
 @javax.inject.Named("menuProvider[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%]")
public class MenuProvider  implements java.io.Serializable {

   @javax.inject.Inject
   @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
   @org.tura.platform.datacontrol.annotations.MenuPostProcessingTrigger
   private org.tura.platform.datacontrol.command.MenuPostPocessingCommand menuPostPocessingCommand;

	private static final long serialVersionUID = 1L;

    private java.util.HashMap<String,Class<?>> hash = new  java.util.HashMap<String,Class<?>>();

	private transient  java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MenuProvider.class.getName());;

    @javax.inject.Inject
    private transient org.tura.platform.datacontrol.ELResolver elResolver;


	@javax.annotation.PostConstruct
	public void init() {
[%      
        for( menu in  menuReferences ){
        
        var folder = menu.menu;
        var formMenu = folder.eContainer().eContainer().eContainer();
        var uipackageMenu = formMenu.eContainer();
        
        
        %]
          hash.put("[%=menu.mkuid()%]", [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackageMenu.name).toLowerCase()%].[%=util.mergeAndCapitalize(formMenu.name).toLowerCase()%].menu.[%=util.mergeAndCapitalize(folder.name)%]Menu.class );
        
  [%      
        }
%]


    }

   public org.tura.platform.uuiclient.menu.DefaultMenuModel getModel(String menuId){
    	
    	Class <?> clazz = hash.get(menuId);
    	
    	try {
			org.tura.platform.uuiclient.menu.AbsractMenuProvider obj = (org.tura.platform.uuiclient.menu.AbsractMenuProvider)clazz.newInstance();
			org.tura.platform.uuiclient.menu.DefaultMenuModel model =  (org.tura.platform.uuiclient.menu.DefaultMenuModel)obj.getMenu(elResolver);
			if (menuPostPocessingCommand != null){
				   menuPostPocessingCommand.execute(model, menuId, obj);
		    }
           model.generateUniqueIds();
 			return model;
		} catch (Exception  e) {
            logger.log(java.util.logging.Level.INFO, e.getMessage(), e);
		}
    	return null;
    }


 } 
    
[%     
       var f = new Native("org.tura.metamodel.generation.JavaFormatter");
       out.formatWith(f);
       util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/menu/"  , "MenuProvider.java",out.toString());  
 
}     
 %]