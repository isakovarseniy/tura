[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "tura:/generation-templates/template/technologies/${Environment}.egl";
${percent}${end}
[%
     var util = new Native('org.tura.metamodel.commons.Util');
%]
package  [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel;
@javax.inject.Named("viewPortHolder[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%]")
[%=viewmodel_scope()%]
public class ViewPortHolder implements [%if (allPorts.size()<>0 ){%] IViewPortHolder, [%}%] java.io.Serializable{

    private static final long serialVersionUID = 1L;

[%
      for (port in allPorts){
      var canvases = ViewInheritance->allInstances()->select(vi|vi.source=port);
      var canvas = "";
      if (canvases <> null and canvases.size <> 0){
        for ( c in canvases){
           if (c.target.defaultCanvas){
              canvas = util.mergeAndUnCapitalize(c.target.name);
           }
        }
        if ( canvas == ""){
            canvas = util.mergeAndUnCapitalize(canvases.get(0).target.name);         
        }
      }
      
%]      
       private String [%=util.mergeAndUnCapitalize(port.name)%] = "/[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%=canvas%]";
      
[%      
      }
%]


[%
      for (port in allPorts){
%]      
       @javax.inject.Inject
       @org.tura.platform.datacontrol.annotations.Selector("[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%]")
       @org.tura.platform.datacontrol.annotations.ViewPortTrigger("[%=util.mergeAndUnCapitalize(port.name)%]")
      private  javax.enterprise.inject.Instance<org.tura.platform.datacontrol.command.ViewPortCommand>  trigger[%=util.mergeAndCapitalize(port.name)%];
[%     
      }
%]

[%
      for (port in allPorts){
%]      
       public  String get[%=util.mergeAndCapitalize(port.name)%](){
            org.tura.platform.datacontrol.command.ViewPortCommand trigger =  trigger[%=util.mergeAndCapitalize(port.name)%].get();
            if (trigger != null){
               trigger.setCurrentViewPort( this.[%=util.mergeAndUnCapitalize(port.name)%]);
               [%=util.mergeAndUnCapitalize(port.name)%] = (String) trigger.execute();
            }
           return  [%=util.mergeAndUnCapitalize(port.name)%];
       }
      
       public  void set[%=util.mergeAndCapitalize(port.name)%](String  [%=util.mergeAndUnCapitalize(port.name)%]){
           this.[%=util.mergeAndUnCapitalize(port.name)%] =  [%=util.mergeAndUnCapitalize(port.name)%];
       }      
[%      
      }
%]

}