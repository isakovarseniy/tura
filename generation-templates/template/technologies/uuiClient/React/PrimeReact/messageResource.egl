[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2020 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
operation  message_library_generation(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');

     var library = hash.get("library");    
     var resourcePath = hash.get("resourcePath");   
     var javaPath = hash.get("javaPath");
     var application = library.eContainer().eContainer().eContainer();
     var component = hash.get("component"); 
     var model_mapper = hash.get("model_mapper");
     
     for (  lang in library.eContainer().eContainer().applicationLanguages.languages){
     message_content(lang, library,resourcePath,application,model_mapper);
     }
     message_provider( library,javaPath,application,model_mapper,component);
     
 }
 
@template
operation  message_content(lang, library,resourcePath,application,model_mapper) {
     var util = new Native('org.tura.metamodel.commons.Util');
     
      for (  message in library.messages){
      
      var translation = message.translatioins->select(t|t.lang = lang)->collect(t|t.translation);
      if (translation.size() <> 0 ){
%][%=message.name.replaceAll(" ","")%]=[%=translation.get(0)%]
[%
        }     
      }
    var encoding = "UTF-8";
    if (library.findClassifier (util.getHint(model_mapper,"message.encoding"))){
       encoding = library.~hintDetails;
    }
     
    util.saveFile( resourcePath+"/"+util.mergeAndCapitalize(application.name).toLowerCase(), util.mergeAndCapitalize(library.name)+"_"+lang.code+".properties",out.toString(),encoding);   
 }
 
@template
operation  message_provider(library,javaPath,application,model_mappe,component) {
     var util = new Native('org.tura.metamodel.commons.Util');
  %]
  package  [%=component.basePackage%].messages;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.logging.Level;
import java.util.logging.Logger;


import org.tura.platform.datacontrol.ELResolver;

@Named("[%=util.mergeAndCapitalize(library.name)%]")
[%=viewmodel_scope()%]
public class [%=util.mergeAndCapitalize(library.name)%]Library extends  AbstractMap<String, String> implements Serializable {

	@Inject
	ELResolver elResolver;
	
	private static final long serialVersionUID = 1L;
	private transient Logger logger = Logger.getLogger([%=util.mergeAndCapitalize(library.name)%]Library.class.getName());
	private Map<String, Properties> messages = new HashMap<String, Properties>();
	

	@PostConstruct
	public void init() {
	   try{
	[%
     for (  lang in library.eContainer().eContainer().applicationLanguages.languages){
     %]
        java.net.URL url_[%=lang.code%] = this.getClass().getResource("/[%=util.mergeAndCapitalize(application.name).toLowerCase()%]/[%=util.mergeAndCapitalize(library.name)%]_[%=lang.code%].properties");
        java.io.FileInputStream in_[%=lang.code%] = new java.io.FileInputStream(new java.io.File(url_[%=lang.code%].getFile()));
        
        Properties [%=lang.code%] = new Properties();
        [%=lang.code%].load(new java.io.InputStreamReader(in_[%=lang.code%], java.nio.charset.Charset.forName("UTF-8"))  );
        messages.put("[%=lang.code%]", [%=lang.code%] );
     [%

     }
	%]
	   }catch( Exception e){
			logger.log(Level.INFO, e.getMessage(), e);
	   }
		
	}
	
	@Override
    public String get(Object key) {
		
		String locale = null;
		try {
			locale = (String) elResolver.getValue("#{sessionLocale}");
		}catch( Exception e) {
		}
		if ( locale == null) {
			locale = (String) elResolver.getValue("#{requestLocale}");
		}
		String lang = locale.substring(0,2);
		
		Properties msg =  messages.get(lang);
		if (msg == null  || msg.get(key) == null) {
			return (String) key;
		}
		
		return (String) msg.get(key);
	}

	@Override
	public Set<Entry<String, String>> entrySet() {
		return null;
	}

}
  [%
    util.saveFile( javaPath+"/"+"messages"  , util.mergeAndCapitalize(library.name)+"Library"+".java",out.toString());  
       
 }
 
 
 
 
%]