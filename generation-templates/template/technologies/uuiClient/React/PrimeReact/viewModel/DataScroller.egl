[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2020 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::DataScroller createModel(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var javaPath = hash.get("javaPath");   
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var model_mapper = hash.get('model_mapper');
     var component  = hash.get("component");
     var hints = new Native('java.util.HashMap');
     var hints1 = new Native('java.util.HashMap');
     var recipe =  hash.get('recipe');
     var ingredient =  hash.get('ingredient');

     var modelRegistration = hash.get("modelRegistration");
     modelRegistration.add(self);
     
     util.traceIfDebug("UI element","DataScroller model start: "+self.uid);     
     
     self.generateComponentBody(hash,model_mapper);     
     var childrenCollection = hash.get("childrenCollection");

     hash.put("context","dataScroller");
     hints.put("noCurlyBracket",true);
     
     
    %]
       package [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel; 
            
		import org.tura.platform.uuiclient.rest.EventDescription;
		import org.tura.platform.uuiclient.rest.UuiElement;
		import java.util.List;
		import java.util.Map;
		import java.util.ArrayList;
		import java.util.HashMap;

  
       public class DataScroller_[%=self.mkuid_()%]  extends UuiElement{
            private String id = "[%=self.uid%]";
			private String clazz = "[%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel.DataScroller_[%=self.mkuid_()%]";
	        private List<Map<String,Object> > values;
			private Integer rows;
			private boolean paginator = true;
			private String style;
			private String className;
		    private  boolean disabled;
		  	private boolean rendered = true;
		  	private Long totalRows;
		  	private Integer first;
		  	private String layout; 
		  	private List <Integer> modifiedRecords;
		    

		    public List<Integer> getModifiedRecords() {
				return modifiedRecords;
			}
		
			public void setModifiedRecords(List<Integer> modifiedRecords) {
				this.modifiedRecords = modifiedRecords;
			}
		
		    public String getLayout() {
		        return layout;
		    }
		
		    public void setLayout(String layout) {
		        this.layout = layout;
		    }		
		
		    public Integer getFirst() {
				return first;
			}
		
			public void setFirst(Integer first) {
				this.first = first;
			}
		
			public void setTotalRows(Long totalRows) {
				this.totalRows = totalRows;
			}
		
			public Long getTotalRows() {
		        return totalRows;
		    }
		  	
		    public String getClazz() {
				return clazz;
			}
		
			public void setClazz(String clazz) {
				this.clazz = clazz;
			}
		    
	        public boolean isRendered() {
			    return rendered;
		    }
	
			public void setRendered(boolean rendered) {
				this.rendered = rendered;
			}
			public String getId() {
				return id;
			}
			public void setId(String id) {
				this.id = id;
			}
			public boolean isDisabled() {
				return disabled;
			}
			public void setDisabled(boolean disabled) {
				this.disabled = disabled;
			}

		    public List<Map<String, Object>> getValues() {
				return values;
			}
		
			public void setValues(List<Map<String, Object>> values) {
				this.values = values;
			}

			public Integer getRows() {
				return rows;
			}
		
			public void setRows(Integer rows) {
				this.rows = rows;
			}
		
			public boolean isPaginator() {
				return paginator;
			}
		
			public void setPaginator(boolean paginator) {
				this.paginator = paginator;
			}
		
		
			public String getStyle() {
				return style;
			}
		
			public void setStyle(String style) {
				this.style = style;
			}
		
			public String getClassName() {
				return className;
			}
		
			public void setClassName(String className) {
				this.className = className;
			}
		

			public void initContext(org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception{
			    [%=self.style(hash)%]
			    [%=self.styleClass(hash)%]
			    [%=self.rendered(hash)%]
			    [%=self.disabled(hash)%]

			    String modelExpression =  "#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','dataScroller', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%])}";
			    org.tura.platform.uuiclient.model.AbstractGridModel model =  (org.tura.platform.uuiclient.model.AbstractGridModel) elResolver.getValue(modelExpression);
                [%if (self.rowNumber <> 0){%]  
		        this.rows=[%=self.rowNumber%]  ; 
		        [%}else{%]
		        this.rows=10; 
		        [%}%]
		        
			    if ( model.getPageSize() != 0){
			       this.rows =  model.getPageSize();
			    }else{
			       model.setPageSize(this.rows );
			    }
		              
			    java.util.List<Object> list = model.load();
			    this.totalRows = model.getTotalRows();
			    first = model.getFirst();
			    this.values = new ArrayList<Map<String,Object>>();
			    
			    [% 
			       var expression = constructExpression(self,'datascroller.initial.layout',hints, hash);
			       if (expression <> ""){
			       %]this.layout="[%=expression%]";[%
			       }else{
			       %]this.layout="list";[%
			       }
			   %]
			    
			    
			    
			    for ( Object obj: list ){
                   Map<String,Object> map = new HashMap<String,Object>();
                   elResolver.setValue("#{row}", obj);

[%
                
                for (element in childrenCollection){

			        var pointer = util.findSourcePointer(element);
			        var  value = buildExpression(util.createArtificialContextValue(pointer.sourcePointer,pointer.sourcePointer.findTreeRoot(),element.valuePointer),hints,hash);
			        var type = element.valuePointer.typeRef;
					type.mappingType2Java(recipe,ingredient,'VIEW');
			        
			        
%]           		
                     Object value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = elResolver.getValue("#{row.[%=value%]}");
					     if ( value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] != null){
						   org.tura.platform.uuiclient.rest.client.commands.Converter converter = responseState.findConverterByIdElement("[%=element.uid%]");
					        if (converter != null) {
					            value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = converter.encode(value[%=util.fixArtifField(util.mergeAndCapitalize(value))%]);
					        } else {
					            converter = responseState.findConverterByType([%=type.~fullName%].class);
					            if (converter != null) {
					                value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = converter.encode( value[%=util.fixArtifField(util.mergeAndCapitalize(value))%]);
					            } 
					        }
					       }
                 map.put("[%=element.valuePointer.name%]",elResolver.getValue("#{row.[%=value%]}"));[%

                }
                  
%]                  map.put("key", org.tura.platform.datacontrol.commons.Reflection.call(obj,"getKey"));
                    map.put("index", org.tura.platform.datacontrol.commons.Reflection.call(obj,"getViewModelId1"));
		            this.values.add(map);    
			    }
			    
                this.createNewPageEvent(responseState.getResponse());
                
[%
                for (element in self.children){
                   var className = element.className(hash);
%]            
               [%=className%]_[%=element.mkuid_()%] [%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%] = new [%=className%]_[%=element.mkuid_()%] ();
               [%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%] .initContext(elResolver,responseState);
               getChildrens().add([%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%]);
           
[%
                }  
%]    
                
                
			    
			}

		   @SuppressWarnings("unchecked")
			public UuiElement restoreContext( java.util.Map<String, Object> map,org.tura.platform.uuiclient.rest.DataUpdateRequest request, org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState, java.util.List<org.tura.platform.uuiclient.rest.EventDescription> eventsToFire) throws Exception {
			       List<Object> childrens = (List<Object>) map.get("childrens");
			       for ( Object child : childrens) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   String clazz = (String) chMap.get("clazz");
			    	   Class<UuiElement> chClass =  (Class<UuiElement>) Class.forName(clazz);
			    	   UuiElement uie = chClass.newInstance();
			    	   getChildrens().add(uie.restoreContext(chMap,request,responseState,eventsToFire));
			       }
			       List<Object> events = (List<Object>) map.get("events");
			       for ( Object child : events) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   EventDescription event = new EventDescription();
			    	   getEvents().add((EventDescription)event.restoreContext(chMap,request,responseState,eventsToFire));
			       }
			       
                   this.values = (java.util.List<java.util.Map<String, Object>>) map.get("values");
		           this.modifiedRecords = (java.util.List <Integer>)map.get("modifiedRecords");
			       
			       return this;
			   }


			public void applyContext( org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception {
			    String modelExpression =  "#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','dataScroller', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%])}";
			    org.tura.platform.uuiclient.model.GridModel model =  (org.tura.platform.uuiclient.model.GridModel) elResolver.getValue(modelExpression);
			
				if ( this.modifiedRecords != null) {
                   int f = model.getFirst();
				   for ( Integer j : this.modifiedRecords  ) {
				        int i = j-f;
				        java.util.Map<String, Object> record = (java.util.Map<String, Object>) this.values.get(i);
				        org.tura.platform.repository.core.ObjectControl obj =
				        		(org.tura.platform.repository.core.ObjectControl ) model.decodeSingleSelection(record);
				        if ( obj == null){
				           continue;
				        }		
                        elResolver.setValue("#{row}", obj);
                        
                        
					[%
                      for (element in childrenCollection){
					
							var pointer = util.findSourcePointer(element);
			                var  value = element.valuePointer.name;
			                var  valueExp = buildExpression(util.createArtificialContextValue(pointer.sourcePointer,pointer.sourcePointer.findTreeRoot(),element.valuePointer),hints,hash);
							var ispk = false;
							if( element.valuePointer.isKindOf(type::Attribute) ){
							   ispk = element.valuePointer.pk;
							}
							var type = element.valuePointer.typeRef;
							type.mappingType2Java(recipe,ingredient,'VIEW');
							
							
							if ( ispk){
                              %] if (obj.getAttached() == null ||!obj.getAttached() ) { [%
							}
					%]   Object value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = record.get("[%=util.mergeAndUnCapitalize(value)%]");
					     if ( value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] != null){
						   org.tura.platform.uuiclient.rest.client.commands.Converter converter = responseState.findConverterByIdElement("[%=element.uid%]");
					        if (converter != null) {
					            value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = converter.decode(value[%=util.fixArtifField(util.mergeAndCapitalize(value))%]);
					        } else {
					            converter = responseState.findConverterByType([%=type.~fullName%].class);
					            if (converter != null) {
					                value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = converter.decode( value[%=util.fixArtifField(util.mergeAndCapitalize(value))%]);
					            } else {
					               value[%=util.fixArtifField(util.mergeAndCapitalize(value))%] = new [%=type.~fullName%](value[%=util.fixArtifField(util.mergeAndCapitalize(value))%].toString());
					            }
					        }
					       elResolver.setValue("#{row.[%=valueExp%]}",value[%=util.fixArtifField(util.mergeAndCapitalize(value))%]);
					     }else{
					       elResolver.setValue("#{row.[%=valueExp%]}", null);
					     }
					         
					     [%
							if ( ispk){
                              %] } [%
							}
					
					   }  
					%]		        
						
					}
					this.modifiedRecords = null;
				}			
			
            } 			
            
			private  Object resolve(String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    return  elResolver.getValue(expression);
                } else {
                   return expression;
                }
			} 
          
        
			private void createNewPageEvent(org.tura.platform.uuiclient.rest.DataUpdateResponse response) {
			    String modelExpression =  "#{viewmodel[%=util.mergeAndCapitalize(form.name)%].getModel('[%=self.mkuid()%]','dataScroller', [%=buildExpression(util.createArtificialContextValue(self.sourcePointer,self.sourcePointer.findTreeRoot(), null),hints,hash)%]).onPage}";
			
				org.tura.platform.uuiclient.rest.EventDescription event = new org.tura.platform.uuiclient.rest.EventDescription(id+"_onPageEvent", "server", modelExpression, "react.onPageEvent", id,id );
				event.addParameters(id + "_onPageEvent", "startIndex", null, 0);
				event.addParameters(id + "_onPageEvent", "pageSize", null, 1);
		        this.getEvents().add(event);
			}
          
        }    

     [%
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     out.formatWith(f);
     util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/",  "DataScroller_"+self.mkuid_() +".java",out.toString());   

      hash.remove("context");
          
     util.traceIfDebug("UI element","DataScroller model end: "+self.uid);     

}

operation form::DataScroller generateComponentBody(hash,model_mapper){
     var util = new Native('org.tura.metamodel.commons.Util');
     var childrenCollection = new Native('java.util.ArrayList');
     

     hash.put("context","dataScroller");
     hash.put("childrenCollection",childrenCollection);

     for (element in self.children.sortBy(q|q.order) ){
         element.createModel(hash);
    }  
    hash.remove("context");
    
}
operation form::DataScroller className(hash) { 
   return self.eClass().getName();
}

%]