[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::InputText createModelAsInputAria(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var javaPath = hash.get("javaPath");   
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var model_mapper = hash.get('model_mapper');
     var component  = hash.get("component");
     
     util.traceIfDebug("UI element","InputTextAria model start: "+self.uid);     
     
    %]
       package [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel; 
            
		import java.util.List;
		import java.util.Map;
		
		import org.tura.platform.uuiclient.rest.EventDescription;
		import org.tura.platform.uuiclient.rest.UuiElement;
     
       public class InputTextAria_[%=self.mkuid_()%]  extends UuiElement{
            private String id = "[%=self.uid%]";
            private String clazz = "[%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel.InputTextAria_[%=self.mkuid_()%]";

			private Object value;
		    private int rows;
		    private int cols;
			private boolean autoResize;
		    private boolean required;
		    private boolean rendered = true;
       		private boolean disabled;
       		private String style;
       
       
    public boolean isRequired() {
		return required;
	}

	public void setRequired(boolean required) {
		this.required = required;
	}

	public boolean isDisabled() {
		return disabled;
	}

	public void setDisabled(boolean disabled) {
		this.disabled = disabled;
	}
       
       
	    public String getClazz() {
			return clazz;
		}
	
		public void setClazz(String clazz) {
			this.clazz = clazz;
		}
       
          public boolean isRendered() {
		      return rendered;
	      }

		  public void setRendered(boolean rendered) {
				this.rendered = rendered;
		  }
			
          
			public String getId() {
				return id;
			}
			public void setId(String id) {
				this.id = id;
			}
			public Object getValue() {
				return value;
			}
			public void setValue(Object value) {
				this.value = value;
			}

		    public int getRows() {
				return rows;
			}
		
			public void setRows(int rows) {
				this.rows = rows;
			}
		
			public int getCols() {
				return cols;
			}
		
			public void setCols(int cols) {
				this.cols = cols;
			}
		
			public boolean isAutoResize() {
				return autoResize;
			}
		
			public void setAutoResize(boolean autoResize) {
				this.autoResize = autoResize;
			}
          
			public String getStyle() {
				return style;
			}
			public void setStyle(String style) {
				this.style = style;
			}
          
			public void initContext(org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception{
			    this.rows = [%=self.rows%];
			    this.cols = [%=self.columns%];
			    [%=self.rendered(hash)%]
			    [%=self.disabled(hash)%]
			    [%=self.required(hash)%]
			    [%=self.style(hash)%]
			    
			    
			    
			    [%if ( hash.get("context") = null ){%]
			    this.value = resolve("[%=self.createValue(hash)%]",elResolver);
			    [%}else{
			       if ( hash.get("context") = 'dataScroller' or hash.get("context") = 'timeLine' ){ 
			          var childrenCollection = hash.get("childrenCollection");
			          childrenCollection.add(self);
			        }
			    }%]
			    
			    
			}

			public UuiElement restoreContext( java.util.Map<String, Object> map,org.tura.platform.uuiclient.rest.DataUpdateRequest request,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState, java.util.List<org.tura.platform.uuiclient.rest.EventDescription> eventsToFire) throws Exception {
				   this.rows = (int) map.get("rows");
				   this.cols = (int) map.get("cols");
			       this.value = (String) map.get("value");
			       
			       List<Object> events = (List<Object>) map.get("events");
			       for ( Object child : events) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   EventDescription event = new EventDescription();
			    	   getEvents().add((EventDescription)event.restoreContext(chMap,request,responseState,eventsToFire));
			       }
			       
			       return this;
			   }
			
			public void applyContext( org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception {
			    [%if ( hash.get("context") = null ){%]
			   		apply( this.value ,  "[%=self.createValue(hash)%]" ,elResolver);
			    [%}%]
			   
            } 			



			private  Object resolve(String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    return  elResolver.getValue(expression);
                } else {
                   return expression;
                }
			} 
          
  			private  void apply( Object obj , String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                     elResolver.setValue(expression, obj);
                } 
			}
           
          
        }    

     [%
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     out.formatWith(f);
     util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/",  "InputTextAria_"+self.mkuid_() +".java",out.toString());   

     util.traceIfDebug("UI element","InputTextAria model end: "+self.uid);     

}
%]