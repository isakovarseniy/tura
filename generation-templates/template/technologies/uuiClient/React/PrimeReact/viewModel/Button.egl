[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::Button createModel(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var javaPath = hash.get("javaPath");   
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var model_mapper = hash.get('model_mapper');
     var component  = hash.get("component");
     var hints = new Native('java.util.HashMap');
     
     util.traceIfDebug("UI element","Button model start: "+self.uid);     
     
    %]
       package [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel; 
            
		import org.tura.platform.uuiclient.rest.EventDescription;
		import org.tura.platform.uuiclient.rest.UuiElement;
		import java.util.List;
		import java.util.Map;
     
       public class Button_[%=self.mkuid_()%]  extends UuiElement{
            private String id = "[%=self.uid%]";
			private Object value;
			private String clazz = "[%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel.Button_[%=self.mkuid_()%]";
			
			
		    private String style;
		    private String className;
		    private String  label;
		    private  String icon;
		    private String  iconPos;
		    private  String  cornerStyleClass;
		    private Object tooltip;
		    private  boolean disabled;
		  	private boolean rendered = true;

		    public String getClazz() {
				return clazz;
			}
		
			public void setClazz(String clazz) {
				this.clazz = clazz;
			}
		    
	        public boolean isRendered() {
			    return rendered;
		    }
	
			public void setRendered(boolean rendered) {
				this.rendered = rendered;
			}
			public String getId() {
				return id;
			}
			public void setId(String id) {
				this.id = id;
			}
			public Object getValue() {
				return value;
			}
			public void setValue(Object value) {
				this.value = value;
			}
			public String getStyle() {
				return style;
			}
			public void setStyle(String style) {
				this.style = style;
			}
			public String getClassName() {
				return className;
			}
			public void setClassName(String className) {
				this.className = className;
			}
			public String getLabel() {
				return label;
			}
			public void setLabel(String label) {
				this.label = label;
			}
			public String getIcon() {
				return icon;
			}
			public void setIcon(String icon) {
				this.icon = icon;
			}
			public String getIconPos() {
				return iconPos;
			}
			public void setIconPos(String iconPos) {
				this.iconPos = iconPos;
			}
			public String getCornerStyleClass() {
				return cornerStyleClass;
			}
			public void setCornerStyleClass(String cornerStyleClass) {
				this.cornerStyleClass = cornerStyleClass;
			}
			public Object getTooltip() {
				return tooltip;
			}
			public void setTooltip(Object tooltip) {
				this.tooltip = tooltip;
			}
			public boolean isDisabled() {
				return disabled;
			}
			public void setDisabled(boolean disabled) {
				this.disabled = disabled;
			}


			public void initContext(org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception{
			    [%=self.style(hash)%]
			    [%=self.styleClass(hash)%]
			    [%=self.rendered(hash)%]
			    [%=self.disabled(hash)%]
			    [%=self.labelExpr(hash,"label")%]
			    [%=self.icon(hash)%]

			    
			    [%=self.initContextTriggers(hash,"react.preClick",null)%]
			    [%=self.initContextTriggers(hash,"react.onClick",null)%]
			}

		   @SuppressWarnings("unchecked")
			public UuiElement restoreContext( java.util.Map<String, Object> map,org.tura.platform.uuiclient.rest.DataUpdateRequest request,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState, java.util.List<org.tura.platform.uuiclient.rest.EventDescription> eventsToFire) throws Exception {
			       List<Object> events = (List<Object>) map.get("events");
			       for ( Object child : events) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   EventDescription event = new EventDescription();
			    	   getEvents().add((EventDescription)event.restoreContext(chMap,request,responseState,eventsToFire));
			       }
			       return this;
			   }



			public void applyContext( org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception {
		       for ( Object child : getChildrens()) {
		        	UuiElement el = (UuiElement) child;
		        	el.applyContext(elResolver,responseState);
		       }
            } 			
            
			private  Object resolve(String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    return  elResolver.getValue(expression);
                } else {
                   return expression;
                }
			} 
          
        }    

     [%
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     out.formatWith(f);
     util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/",  "Button_"+self.mkuid_() +".java",out.toString());   

     util.traceIfDebug("UI element","Button model end: "+self.uid);     

}

operation form::Button className(hash) { 
   return self.eClass().getName();
}
%]