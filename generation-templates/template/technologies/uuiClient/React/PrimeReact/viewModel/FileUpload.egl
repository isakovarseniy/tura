[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation  form::FileUpload createModel(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var javaPath = hash.get("javaPath");   
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var model_mapper = hash.get('model_mapper');
     var component  = hash.get("component");
     var hints = new Native('java.util.HashMap');
     
     util.traceIfDebug("UI element","FileUpload model start: "+self.uid);     
     
     %]
     
       package [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel; 
            
		import org.tura.platform.uuiclient.rest.EventDescription;
		import org.tura.platform.uuiclient.rest.UuiElement;
		import java.util.List;
		import java.util.Map;       
     
       public class FileUpload_[%=self.mkuid_()%]  extends UuiElement{
       
          private String id = "[%=self.uid%]";
		  private String clazz = "[%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel.FileUpload_[%=self.mkuid_()%]";
          
		  private String style;
		  
		  private String className;
       
		  private boolean rendered = true;
		    private boolean disabled;
		
		    public boolean isDisabled() {
		        return disabled;
		    }
		
		    public void setDisabled(boolean disabled) {
		        this.disabled = disabled;
		    }
       
       
	    public String getClazz() {
			return clazz;
		}
	
		public void setClazz(String clazz) {
			this.clazz = clazz;
		}
       
       
          public boolean isRendered() {
		      return rendered;
	      }

		  public void setRendered(boolean rendered) {
				this.rendered = rendered;
		  }
       
       
			public String getId() {
				return id;
			}
			public void setId(String id) {
				this.id = id;
			}
			public String getStyle() {
				return style;
			}
			public void setStyle(String style) {
				this.style = style;
			}
			
			public String getClassName() {
				return className;
			}
			public void setClassName(String className) {
				this.className = className;
			}
			
			public void initContext(org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception{
			    [%=self.style(hash)%]
			    [%=self.styleClass(hash)%]
			    [%=self.rendered(hash)%]
			    [%=self.disabled(hash)%]
			    
			    createOnFileUploadEvent(responseState.getResponse());


			}

		   @SuppressWarnings("unchecked")
			public UuiElement restoreContext( java.util.Map<String, Object> map,org.tura.platform.uuiclient.rest.DataUpdateRequest request, org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState, java.util.List<org.tura.platform.uuiclient.rest.EventDescription> eventsToFire) throws Exception {
			       List<Object> events = (List<Object>) map.get("events");
			       for ( Object child : events) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   EventDescription event = new EventDescription();
			    	   getEvents().add((EventDescription)event.restoreContext(chMap,request,responseState,eventsToFire));
			       }

			       return this;
			   }
			
			public void applyContext( org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception {
			   
            } 			


			private  Object resolve(String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    return  elResolver.getValue(expression);
                } else {
                   return expression;
                }
			} 

			private  void apply( Object obj , String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                     elResolver.setValue(expression, obj);
                } 
			}
			

			private void createOnFileUploadEvent(org.tura.platform.uuiclient.rest.DataUpdateResponse response) {
			[%
               var expression = constructExpression(self,"react.onFileUpload",hints, hash);
			%]
 			    String modelExpression = "[%=expression%]";
			
				org.tura.platform.uuiclient.rest.EventDescription event = new org.tura.platform.uuiclient.rest.EventDescription(id+"_onFileUpload", "server", modelExpression, "react.onFileUpload", [%=self.refreshProcessArias()%],[%=self.refreshUpdateArias()%] );
				event.addParameters(id+"_onFileUpload", "files", null, 0);
		        this.getEvents().add(event);
			}


			
       }
     
     
     [%
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     out.formatWith(f);
     util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/",  "FileUpload_"+self.mkuid_() +".java",out.toString());   

     util.traceIfDebug("UI element","FileUpload model end: "+self.uid);     



     
}


operation form::FileUpload className(hash) { 
   return self.eClass().getName();
}
%]