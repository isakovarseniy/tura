[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation  form::ViewPort createModel(hash) { 
     var util = new Native('org.tura.metamodel.commons.Util');
     var javaPath = hash.get("javaPath");   
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var model_mapper = hash.get('model_mapper');
     var component  = hash.get("component");
     
     util.traceIfDebug("UI element","ViewPort model start: "+self.name);     
     
     %]
     
       package [%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel; 
            
       import org.tura.platform.uuiclient.rest.UuiElement;
       import java.util.List;
       import java.util.Map;
       
       public class ViewPort_[%=self.mkuid_()%]  extends UuiElement{
       
          private String id = "[%=self.uid%]";
          private String clazz = "[%=component.basePackage%].[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%].[%=util.mergeAndCapitalize(form.name).toLowerCase()%].viewmodel.ViewPort_[%=self.mkuid_()%]";
       
		  private String name = "[%=self.name%]";
		  
		  
		  private String style;
		  
		  private String className;
		  
		  private String[]  columnStyle;
		  
		  private String[]  columnStyleClass;
		  
		  private boolean rendered = true;
		  
		  private String value;
		
		  public String getValue() {
				return value;
		  }
		
		  public void setValue(String value) {
				this.value = value;
		  }
		  
       
[%
      var canvases = ViewInheritance->allInstances()->select(vi|vi.source=self);
      if (canvases <> null and canvases.size <> 0){
        for ( canvasRef in canvases){
        
       %]private String [%=util.mergeAndUnCapitalize(canvasRef.target.name)%] = "/[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%= util.mergeAndUnCapitalize(canvasRef.target.name)%]";[%
        
        } 
      }
      
%]      
      
       
       
	    public String getClazz() {
			return clazz;
		}
	
		public void setClazz(String clazz) {
			this.clazz = clazz;
		}
       
       
          public boolean isRendered() {
		      return rendered;
	      }

		  public void setRendered(boolean rendered) {
				this.rendered = rendered;
		  }

		   
			public String getId() {
				return id;
			}
			public void setId(String id) {
				this.id = id;
			}
			public String getName() {
				return name;
			}
			public void setName(String name) {
				this.name = name;
			}

			public String getStyle() {
				return style;
			}
			public void setStyle(String style) {
				this.style = style;
			}
			
			public String getClassName() {
				return className;
			}
			public void setClassName(String className) {
				this.className = className;
			}

			public String[] getColumnStyle() {
				return columnStyle;
			}
			public void setColumnStyle(String[] columnStyle) {
				this.columnStyle = columnStyle;
			}
			public String[] getColumnStyleClass() {
				return columnStyleClass;
			}
			public void setColumnStyleClass(String[] columnStyleClass) {
				this.columnStyleClass = columnStyleClass;
			}
			
			public void initContext(org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception{
			    [%=self.style(hash)%]
			    [%=self.styleClass(hash)%]
			    this.columnStyleClass = new String[]{ [%=self.columnStyleClass(hash)%] };
			    

                String modelExpression="#{viewPortHolder[%=util.mergeAndCapitalize(uipackage.name)%][%=util.mergeAndCapitalize(form.name)%].[%=util.mergeAndUnCapitalize(self.name)%]}";
                this.value = (String)resolve( modelExpression,elResolver);
                
[%
		      var canvases = ViewInheritance->allInstances()->select(vi|vi.source=self);
		      if (canvases <> null and canvases.size <> 0){
		         for ( canvasRef in canvases){
		          %]
		             if ( [%=util.mergeAndUnCapitalize(canvasRef.target.name)%].equals(this.value)){
		               [%
		                 var element = canvasRef.target;
		                 var className = element.className(hash);
		               
		               %]

		               [%=className%]_[%=element.mkuid_()%] [%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%] = new [%=className%]_[%=element.mkuid_()%] ();
		               [%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%] .initContext(elResolver,responseState);
		               getChildrens().add([%=util.mergeAndUnCapitalize(className)%]_[%=element.mkuid_()%]);
		               return;
		             
		             } 
		          
		          [% 
		         }
		      }
%]                    
			    
			}
			
		   @SuppressWarnings("unchecked")
			public UuiElement restoreContext( java.util.Map<String, Object> map,org.tura.platform.uuiclient.rest.DataUpdateRequest request, org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState,java.util.List<org.tura.platform.uuiclient.rest.EventDescription> eventsToFire) throws Exception {
			       List<Object> childrens = (List<Object>) map.get("childrens");
			       for ( Object child : childrens) {
			    	   Map <String, Object> chMap = (Map<String, Object>) child;
			    	   String clazz = (String) chMap.get("clazz");
			    	   Class<UuiElement> chClass =  (Class<UuiElement>) Class.forName(clazz);
			    	   UuiElement uie = chClass.newInstance();
			    	   getChildrens().add(uie.restoreContext(chMap,request,responseState,eventsToFire));
			       }
			       return this;
			   }
			
			public void applyContext( org.tura.platform.datacontrol.ELResolver elResolver,org.tura.platform.uuiclient.rest.client.commands.ResponseState responseState) throws Exception {
		       for ( Object child : getChildrens()) {
		        	UuiElement el = (UuiElement) child;
		        	el.applyContext(elResolver,responseState);
		       }
            } 			

			private  Object resolve(String expression, org.tura.platform.datacontrol.ELResolver elResolver ){
			    if (expression.length()>3 && "#{".equals(expression.substring(0, 2))) {
                    return  elResolver.getValue(expression);
                } else {
                   return expression;
                }
			}
			
       }
     
     
     [%
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     out.formatWith(f);
     util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/viewmodel/",  "ViewPort_"+self.mkuid_()+".java",out.toString());   

     util.traceIfDebug("UI element","ViewPort model end: "+self.name);     

     
}


operation form::ViewPort className(hash) { 
   return self.eClass().getName();
}

%]