[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::ViewPort createTag(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');
     var ref = getReactRef(self);
     
%]
       <[%=util.mergeAndCapitalize(self.name)%] id="[%=self.uid%]"  [%=ref%] contextManager={this.contextManager}/>     
[%
}


@template
operation form::ViewPort createComponent(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');
     var form = hash.get("form");   
     var uipackage = hash.get("uipackage");
     var clientLibraryPackage = hash.get('clientLibraryPackage');
     

     populateInclude(hash,"{TuraComponent}",  clientLibraryPackage+"/core/TuraComponent");
     

     util.traceIfDebug("React UI element","ViewPort start: "+self.name);     
     

%]

export class [%=util.mergeAndCapitalize(self.name)%] extends TuraComponent {

    constructor(props) {
        super(props);

    }
    render() {
        if ( !this.state.rendered ) {
            return (
                <></>
            );
        }
        
[%
      var canvases = ViewInheritance->allInstances()->select(vi|vi.source=self);
      if (canvases <> null and canvases.size <> 0){
        for ( canvasRef in canvases){
            var lnk = "_link";
           if ( canvasRef.target.isKindOf(form::TabCanvas)){
               lnk = "";
           }
        
       %]
       if (this.state.value === '/[%=util.mergeAndCapitalize(uipackage.name).toLowerCase()%]/[%=util.mergeAndCapitalize(form.name).toLowerCase()%]/[%= util.mergeAndUnCapitalize(canvasRef.target.name)%]'){
            return (
                <div id={this.id}>
                    <[%=util.mergeAndCapitalize(canvasRef.target.name)%] id="[%=canvasRef.target.uid%][%=lnk%]" contextManager={this.contextManager}/>
                </div>

            );
        }
       [%
        } 
      }
      
%]      
    }
}

[%
     util.traceIfDebug("React UI element","ViewPort end: "+self.name);     

}


%]