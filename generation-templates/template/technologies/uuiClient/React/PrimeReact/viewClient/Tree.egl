[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::Tree createTag(hash) {
     var generateComponents = hash.get("generateComponents");
     generateComponents.add(self);
     var ref = getReactRef(self);
     

%]
             <Tree_[%=self.mkuid()%] id="[%=self.uid%]" [%=ref%]  contextManager={this.contextManager}/>
[%
}

@template
operation  form::Tree createComponent(hash) {
  var util = new Native('org.tura.metamodel.commons.Util');
  var model_mapper = hash.get('model_mapper');
  var clientLibraryPackage = hash.get('clientLibraryPackage');
  
   //Populate scriptTriggers
   var hints = new Native('java.util.HashMap');
   constructExpression(self,"react.onMenuShow",hints, hash);

  
  populateInclude(hash,"{TTree}",  clientLibraryPackage+"/component/TTree");
  populateInclude(hash,"{TreeRowEditor}",  clientLibraryPackage+"/component/TTree");
  populateInclude(hash,"{Button}",  "primereact/button");
  
  
%]

class Tree_[%=self.mkuid()%] extends TTree{
    constructor(props) {
        super(props);
        this.nodeTemplate=this.nodeTemplate.bind(this);

    }


    nodeTemplate(node){
[%
                hash.put("dependId","dependId={node.key}");

                for (col in self.cols){
                var element = col.element ;
%]                
        if (typeof this.state.editRowKey !== "undefined" && node.key === this.state.editRowKey) {
            var state = this.contextManager.getState("[%=col.element.uid%]");
            state.value = node.[%=element.valuePointer.name%];
            this.contextManager.addDependentState("[%=col.element.uid%]",node.key,state);

            return(
                <div className="p-inputgroup">
          [%=element.createTag(hash)%]
                    <Button icon="pi pi-check" onClick={ new TreeRowEditor(node, this,"[%=col.element.uid%]",this.contextManager,"[%=element.valuePointer.name%]").onSave } />
                    <Button icon="pi pi-times" onClick={ new TreeRowEditor(node, this,"[%=col.element.uid%]",this.contextManager,"[%=element.valuePointer.name%]").onReject } />
                </div>
            )
        } else {

            return (
                <b>{node.[%=element.valuePointer.name%]}</b>                
            )

        }
[%
                }  
            hash.remove("dependId");
%]				
    }


}
[%
}


%]