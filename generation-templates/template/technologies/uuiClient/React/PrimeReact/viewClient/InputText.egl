[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%@template
operation form::InputText createTag(hash) {
     var util = new Native('org.tura.metamodel.commons.Util');
     var model_mapper = hash.get('model_mapper');
     var clientLibraryPackage = hash.get('clientLibraryPackage');
     
     
     var linkToMessage = form::LinkToMessage->allInstances()->select(r|r.source.uid=self.uid)->first();
     var linkToLabel = form::LinkToLabel->allInstances()->select(r|r.source.uid=self.uid)->first();

     var label = "";
     if ( linkToLabel <> null and  linkToLabel.target <> null){
       label="label=\""+linkToLabel.target.uid+"\"";
     }
     
     var message = "";
     if ( linkToMessage <> null and  linkToMessage.target <> null){
       message="message=\""+linkToMessage.target.uid+"\"";
     }
     

     var inputTextType = "TInputText";
     var extraAttributes="";
     if (self.findClassifier(util.getHint(model_mapper,"InputTextAria"))){
       inputTextType = "TInputTextAria";
     }
     if (self.findClassifier(util.getHint(model_mapper,"InputMask"))){
       inputTextType = "TInputMask";
     }
     
     

    var dependId = getDependentId(hash);
     var ref = getReactRef(self);
    
    self.addToChildren(hash);
    populateInclude(hash,"{"+inputTextType+"}",  clientLibraryPackage+"/component/"+inputTextType);
    
    


%]
       <[%=inputTextType%] id="[%=self.uid%]"  [%=ref%] [%=label%] [%=message%] contextManager={this.contextManager}  [%=dependId%]/>
            
[%
}

%]