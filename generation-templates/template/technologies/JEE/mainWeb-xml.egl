[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "tura:/generation-templates/template/technologies/${View_implementation}/web-xml.egl";
import "tura:/generation-templates/template/technologies/${Deployment_environment}/server-control-files.egl";
<#if (model_mapper.artifactExtension) ??>
import "${model_mapper.artifactExtension}";
</#if>
${percent}${end}
 [%
 
      var util = new Native('org.tura.metamodel.commons.Util');
      var app = util.runQuery(model_mapper,"Query application",model_mapper);
      var forms = util.runQuery(model_mapper,"Query form",model_mapper);
      var realms = app.applicationRole.realms;
      var win = new Native('java.util.ArrayList');
       for (form in forms){
          win.addAll(form.view.canvases->select(q|q.isKindOf(form::Window))->collect(r|r));
       }

      var hash = new Native('java.util.HashMap');
 
      hash.put("recipe",recipe);
      hash.put("ingredient",ingredient);
      hash.put("component",component);
      hash.put("model_mapper",model_mapper);
      hash.put("configuration",configuration);
      hash.put("realms",realms);
      hash.put("windows",win);
      if (app.size() <> 0 ){
        hash.put("application",app.get(0));
      }
 
 
     util.populateTechnologies(hash,model_mapper);
      web_xml(hash);
      web_xml_serverspecific(hash);  
      

%]
${start}${percent} 
<#if (model_mapper.artifactExtension) ??>
<#else>
@template
operation webResourceMapping(){
}
</#if>
${percent}${end}

[%
operation findContext (model_mapper,component){
   var util = new Native('org.tura.metamodel.commons.Util');
   var list = model_mapper.findAllClassifiers(util.getHint(model_mapper,"application.context.root"));
   var context = util.mergeAndCapitalize(component.artifactId).toLowerCase();
   if ( list<> null and list.size() <> 0){
     context = list.get(0).details;
   }

   return context;

}

%]
