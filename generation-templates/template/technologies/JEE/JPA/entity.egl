[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2020 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
 import "tura:/generation-templates/template/commons/typeElementUtil.eol";
 import "tura:/generation-templates/template/commons/categorizedUtil.eol";
 import "tura:/generation-templates/template/commons/assosiation.eol";
 
 var util = new Native('org.tura.metamodel.commons.Util');
%]
package [%=type.~package%];  


@javax.persistence.Entity(name = "[%=type.~class%]")
[%
    var table_name=  type.~class.toUpperCase();  
    if (type.findClassifier(util.getHint(model_mapper,"Table"))){
       table_name=type.~hintDetails;
    }
%] 
@javax.persistence.Table(name = "[%=table_name%]")
[%if (type.~primaryKey.isDefined() and type.~primaryKey.size() >1 ){%]
@javax.persistence.IdClass(value=[%=type.~class%]PK.class)
[%}%]

public class [%=type.~class%]  [%if (type.~extension.isDefined()){%]  extends [%=type.~extension.~fullName%]  [%}%] {


[%for ( field in type.attributes){
     if (type.~skipAttributes.contains(field) )
        continue; 

    if (field.findClassifier(util.getHint(model_mapper,"SignalField"))){
        continue; 
    }
     
    field.typeRef.mappingType2Java(recipe,ingredient);

    if (field.findClassifier(util.getHint(model_mapper,"Bean validation")))%]
    [%=field.~hintDetails%]  
    
    [%if ( field.pk){ %]
    @javax.persistence.Id
        [%if (field.findClassifier(util.getHint(model_mapper,"Sequence"))){%]
          [%=field.~hintDetails%]
        [%} else {%]
             [%if (field.typeRef.~fullName == "java.lang.Long"  or field.typeRef.~fullName == "java.lang.Integer"){%]
			@javax.persistence.GeneratedValue(
			    strategy = javax.persistence .GenerationType.SEQUENCE
			)
             [%}%]
        [%}%]
    [%}%]
    
    [%if (field.typeRef.~fullName == "java.util.Date"  or field.typeRef.~fullName == "java.sql.Timestamp"){%]
	@javax.persistence.Temporal(javax.persistence.TemporalType.TIMESTAMP)
    [%}%]
    
    [%if (field.typeRef.isKindOf(type::Enumerator )){%]
    @javax.persistence.Enumerated(javax.persistence.EnumType.STRING)
    [%}%]
    
	@javax.persistence.Column(name = "[%=util.splitByCapitalLatterAndCapitalize(field.name)%]")
	private [%= field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%];
	
	public void set[%=util.mergeAndCapitalize(field.name)%](  [%= field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%]){
		this.[%=util.mergeAndUnCapitalize(field.name)%] = [%=util.mergeAndUnCapitalize(field.name)%];
	}
	public [%= field.typeRef.~fullName%] get[%=util.mergeAndCapitalize(field.name)%](){
		return [%=util.mergeAndUnCapitalize(field.name)%];
	}
	
[%}%]

	[%
	  var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
      for (rel in assosiations){
      
		if( not alltypes.contains(rel.target.unwrap())){
               %][%=rel.sourceNoAssociation(recipe,ingredient)%][%
               continue;
		}
		      
         if ( not rel.target.findClassifier(util.getHint(model_mapper,"Entity Object"))  ){
               %][%=rel.sourceNoAssociation(recipe,ingredient)%][%
               continue;
         }
      
         var hash = rel.sourceSideNamesCalculation();
         
  	     switch  (rel.type.toString()){
         case "One2One" : %] @javax.persistence.OneToOne(mappedBy="[%=hash.get("targetProperty")%]")[%
         case "One2Many" : %] @javax.persistence.OneToMany(mappedBy="[%=hash.get("targetProperty")%]")[%
         case "Many2Many" : %] @javax.persistence.ManyToMany(mappedBy="[%=hash.get("targetProperty")%]")[%
         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] private [%=hash.get("target").~fullName%]  [%=hash.get("sourceProperty")%];[%
         case "One2Many" : %]  private java.util.Collection<[%=hash.get("target").~fullName%]>  [%=hash.get("sourceProperty")%];[%
         case "Many2Many" : %] private java.util.Collection<[%=hash.get("target").~fullName%]>  [%=hash.get("sourceProperty")%];[%
         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] public [%=hash.get("target").~fullName%]  get[%=hash.get("sourceMethodName")%]()[%
         case "One2Many" : %] public java.util.Collection<[%=hash.get("target").~fullName%]>  get[%=hash.get("sourceMethodName")%]()[%
         case "Many2Many" : %] public java.util.Collection<[%=hash.get("target").~fullName%]>  get[%=hash.get("sourceMethodName")%]()[%
         }                
         %] { return [%=hash.get("sourceProperty")%]; } [%
         
  	     switch  (rel.type.toString()){
         case "One2One" : %] public  void set[%=hash.get("sourceMethodName")%]([%=hash.get("target").~fullName%]  [%=hash.get("sourceProperty")%])[%
         case "One2Many" : %] public  void  set[%=hash.get("sourceMethodName")%](java.util.Collection<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%])[%
         case "Many2Many" : %] public  void  set[%=hash.get("sourceMethodName")%](java.util.Collection<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%])[%
         }                
         %] { this.[%=hash.get("sourceProperty")%]=[%=hash.get("sourceProperty")%]; } [%
         
         
      }
	%]

	[%
	  var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
      for (rel in assosiations){
      
		if( not alltypes.contains(rel.source.unwrap())){
               %][%=rel.targetNoAssociation(recipe,ingredient)%][%
               continue;
		}
      
         if ( not rel.source.findClassifier(util.getHint(model_mapper,"Entity Object"))  ){
               %][%=rel.targetNoAssociation(recipe,ingredient)%][%
               continue;
         }
      
         var hash = rel.targetSideNamesCalculation();
      
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] [%=rel.joinColumns()%] @javax.persistence.OneToOne[%
         case "One2Many" : %]  [%=rel.joinColumns()%] @javax.persistence.ManyToOne[%
         case "Many2Many" : %] [%=rel.joinTable(hash.get("sourceMethodName"),hash.get("targetMethodName"),model_mapper)%] @javax.persistence.ManyToMany[%
         }
      
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] private [%=hash.get("source").~fullName%]  [%=hash.get("targetProperty")%];[%
         case "One2Many" : %] private [%=hash.get("source").~fullName%]  [%=hash.get("targetProperty")%];[%
         case "Many2Many" : %] private java.util.Collection<[%=hash.get("source").~fullName%]>  [%=hash.get("targetProperty")%];[%
         }
      
  	     switch  (rel.type.toString()){
         case "One2One" : %] public [%=hash.get("source").~fullName%]  get[%=hash.get("targetMethodName")%]()[%
         case "One2Many" : %] public [%=hash.get("source").~fullName%]  get[%=hash.get("targetMethodName")%]()[%
         case "Many2Many" : %] public java.util.Collection<[%=hash.get("source").~fullName%]>  get[%=hash.get("targetMethodName")%]()[%
         }                
         %] { return [%=hash.get("targetProperty")%]; } [%

  	     switch  (rel.type.toString()){
         case "One2One" : %] public  void  set[%=hash.get("targetMethodName")%]([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%])[%
         case "One2Many" : %] public void set[%=hash.get("targetMethodName")%]([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%])[%
         case "Many2Many" : %] public  void set[%=hash.get("targetMethodName")%](java.util.Collection<[%=hash.get("source").~fullName%]> [%=hash.get("targetProperty")%])[%
         }                
         %] { this.[%=hash.get("targetProperty")%]=[%=hash.get("targetProperty")%]; } [%


      }
	%]
}
[%
@template
operation type::Assosiation  joinColumns(){
      var util = new Native('org.tura.metamodel.commons.Util');
	  var i = 0;
      %]@javax.persistence.JoinColumns({[%
            for (lnk in self.links){
            if (i <> 0){%],[%}%]@javax.persistence.JoinColumn(name="[%=util.splitByCapitalLatterAndCapitalize(lnk.detailField.name)%]")[%
            i = 1;  
            }
    %]}) 
[%
}
@template
operation type::Assosiation  joinTable(src,target,model_mapper){
	  var i = 0;
      var util = new Native('org.tura.metamodel.commons.Util');
	  
	  var table = "RL_"+src.toUpperCase()+"_"+target.toUpperCase();
      if (self.source.findClassifier(  util.getHint(model_mapper,"Many2ManyTable" )))
         table = self.source.~hintDetails;
      %]@javax.persistence.JoinTable(name="[%=table%]",  
              joinColumns={[%
	            for (lnk in self.links){
	            if (i <> 0){%],[%}%]@javax.persistence.JoinColumn(name="[%=src.toLowerCase()%]_[%=util.mergeAndUnCapitalize(lnk.masterField.name).toLowerCase()%]")[%  
	            }
              %]},  
              inverseJoinColumns={[%
	            for (lnk in self.links){
	            if (i <> 0){%],[%}%]@javax.persistence.JoinColumn(name="[%=target.toLowerCase()%]_[%=util.mergeAndUnCapitalize(lnk.detailField.name).toLowerCase()%]")[%  
	            }
              %]})      
[%
}
@template
operation type::Assosiation  sourceNoAssociation(recipe,ingredient){

}
@template
operation type::Assosiation  targetNoAssociation(recipe,ingredient){
        var util = new Native('org.tura.metamodel.commons.Util');

	     for (lnk in self.links){
	         lnk.detailField.typeRef.mappingType2Java(recipe,ingredient);
                %]
            	@javax.persistence.Column(name = "[%=util.splitByCapitalLatterAndCapitalize(lnk.detailField.name)%]")
                private  [%=lnk.detailField.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(lnk.detailField.name)%];
                public void set[%=util.mergeAndCapitalize(lnk.detailField.name)%]( [%=lnk.detailField.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(lnk.detailField.name)%]){
                   this.[%=util.mergeAndUnCapitalize(lnk.detailField.name)%] = [%=util.mergeAndUnCapitalize(lnk.detailField.name)%];
                }
                public  [%=lnk.detailField.typeRef.~fullName%] get[%=util.mergeAndCapitalize(lnk.detailField.name)%]( ){
                   return this.[%=util.mergeAndUnCapitalize(lnk.detailField.name)%];
                }
                [%
	     }
}



%]