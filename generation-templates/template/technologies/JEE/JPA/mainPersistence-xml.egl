[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
 import "tura:/generation-templates/template/commons/typeElementUtil.eol";
  
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var classes = new Native('java.util.ArrayList');
     
     

     var type;
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query type",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 
     types = util.runQuery(model_mapper,"Query persistance classes",model_mapper);
     if (types <> null and types.size <> 0 )
         alltypes.addAll(types); 

    if (alltypes.size() <> 0 ){
 
       for (type in alltypes){
          type.mappingType2Java(recipe,ingredient);
          if (type.~fullName <> null){
              classes.add(type.~fullName);
           }
       }
     }
     hash.put("recipe",recipe);
     hash.put("ingredient",ingredient);
     hash.put("component",component);
     hash.put("model_mapper",model_mapper);
     hash.put("configuration",configuration);
     hash.put("types",alltypes);
     hash.put("classes",classes);

    util.populateTechnologies(hash,model_mapper);


     var persistence : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JEE/JPA/persistence-xml.egl",hash,TemplateFactory);
     var f = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
     persistence.setFormatter(f);

     var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;    
     if (model_mapper.artifactRoot <> null ){
         path = path+"/"+model_mapper.artifactRoot ;
         }

     path = path+"/src/main/resources/META-INF/";  
     var buffer = persistence.process();
     util.saveFile( path, "persistence.xml",buffer); 
     
     
     var persistence : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JEE/JPA/schema-gen.egl",hash,TemplateFactory);
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     persistence.setFormatter(f);
     
     var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId;    
     if (model_mapper.artifactRoot <> null ){
         path = path+"/"+model_mapper.artifactRoot ;
      }
     
     path = path+"/src/test/java/org/tura/test";  
     var buffer = persistence.process();
     util.saveFile( path, "GenerateSchemaTest.java",buffer); 
     
     
 %]

