[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
import "tura:/generation-templates/template/commons/categorizedUtil.eol";
import "tura:/generation-templates/template/commons/assosiation.eol";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
 %]
package [%=tp.~package%];

import org.tura.platform.repository.proxy.ProxyCommadStackProvider;
import java.util.UUID;


public class  [%=tp.~class%]Proxy extends [%=tp.~fullName%]  implements org.tura.platform.repository.core.ObjectControl, java.io.Serializable, org.tura.platform.repository.cpa.storage.TimeStampAware,org.tura.platform.repository.core.Cleanable
[%
     for (i in interfaces){
     %]
     ,[%=i.~fullName%]
     [%
     }
%]
{

    private static final long serialVersionUID = [%=util.serialVersionUID()%]L;

    private java.util.Map <String,Object> attributes = new java.util.HashMap<String,Object>();
    private java.util.ArrayList<org.tura.platform.repository.proxy.ProxyObjectUpdateListener>  listeners= new java.util.ArrayList<org.tura.platform.repository.proxy.ProxyObjectUpdateListener>();

    private org.tura.platform.repository.proxy.ArtificialFieldWrapperProvider artificialFieldWrapper;
    private org.tura.platform.repository.operation.AddLinkOperation  linkOperation;
    private org.tura.platform.repository.cpa.CpaRepository repository;
    private org.tura.platform.repository.cpa.storage.CpaStorageProvider storageProvider;
	private Map<String, ProxyCommadStackProvider> stackMap = new HashMap<>();
    private boolean forcePKupdate = false;
    private boolean inMemory   = false;
    private Integer viewModelId1;
   @SuppressWarnings("unused")
    private String  id =java.util.UUID.randomUUID().toString();
    private String _sourceId;


    public  [%=tp.~class%]Proxy([%=tp.~fullName%] object, org.tura.platform.repository.cpa.CpaRepository repository,org.tura.platform.repository.cpa.storage.CpaStorageProvider storageProvider){
        this.repository = repository;
	    if ( object.getCpaid() == null) {
	    	object.setCpaid(java.util.UUID.randomUUID().toString());
	    }
	    this.cpaid = object.getCpaid() ;
	    this.storageProvider = storageProvider;
        lock();	    
    }
    
	 private  [%=tp.~class%]Proxy([%=tp.~class%]Proxy proxy) {
		    this.repository = proxy.repository;
		    this.cpaid = proxy.cpaid;
		    this.storageProvider = proxy.storageProvider;
        [%
   var type = tp;
    while (1 == 1){

      var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
      for ( rel in assosiations  ){
           switch  (rel.type.toString()){
             case "One2One" :  %][%=rel.one2oneSrcCopyField(recipe,ingredient,model_mapper)%][%
             case "One2Many" : %][%=rel.one2manySrcCopyField(recipe,ingredient,model_mapper)%][%
             case "Many2Many" : %][%=rel.many2manySrcCopyField(recipe,ingredient,model_mapper)%][%
         }
         
     }            
      var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
      for (rel in assosiations){
           switch  (rel.type.toString()){
             case "One2One" :  %][%=rel.one2oneTrgCopyField(recipe,ingredient,model_mapper)%][%
             case "One2Many" : %][%=rel.one2manyTrgCopyField(recipe,ingredient,model_mapper)%][%
             case "Many2Many" : %][%=rel.many2manyTrgCopyField(recipe,ingredient,model_mapper)%][%
         }
      }        
    if (type.~extension.isDefined()){
       type = type.~extension;
    }else{
       break;
    }
}      
        %]
      lock();        
	}
	
	
@Override
	public void clean(  String name)throws java.io.IOException{
        [%
   var type = tp;
    while (1 == 1){

      var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
      for ( rel in assosiations  ){
           %][%=rel.cleanSrc(recipe,ingredient,model_mapper)%][%
     }            
      var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
      for (rel in assosiations){
           %][%=rel.cleanTrg(recipe,ingredient,model_mapper)%][%
      }        
    if (type.~extension.isDefined()){
       type = type.~extension;
    }else{
       break;
    }
}      
        %]	
	
	}
    
    
	public void setViewModelId1(Integer viewModelId1){
	      this.viewModelId1 = viewModelId1;
	}
	
	public Integer getViewModelId1(){
	     return  viewModelId1;
	}
    
    public [%=tp.~class%]Proxy inMemory(){
        [%=tp.~class%]Proxy inMProxy =  new [%=tp.~class%]Proxy(this);
        inMProxy.inMemory =  true;
        return inMProxy;
    }
    
    public void addListener( org.tura.platform.repository.proxy.ProxyObjectUpdateListener listener){
      listeners.add(listener);
    }
    
    public   Class<?> getProxyClazz(){
           return  [%=tp.~fullName%].class;
    }
    
    public Object getArtificialFieldWrapper(){
         if (artificialFieldWrapper != null){
             return artificialFieldWrapper.wrap(this);
         }
         return this;
    }
    
    public String get_SrcId(){
           return this._sourceId;    
    }
    
    public void set_SrcId( String _sourceId){
           this._sourceId = _sourceId;    
    }
    
    
    public String getCpaid(){
       return this.cpaid;
    }
    
	public void addArtificialFieldWrapperProvider( org.tura.platform.repository.proxy.ArtificialFieldWrapperProvider artificialFieldWrapper ){
	       this.artificialFieldWrapper = artificialFieldWrapper;
	}
    

	public org.tura.platform.repository.proxy.ArtificialFieldWrapperProvider getArtificialFieldWrapperProvider(  ){
	       return this.artificialFieldWrapper;
	}

    public void setLinkOperation(org.tura.platform.repository.operation.AddLinkOperation linkOperation){
        this.linkOperation = linkOperation;
    }
    
    public org.tura.platform.repository.operation.AddLinkOperation getLinkOperation(){
       org.tura.platform.repository.operation.AddLinkOperation lnk   =  this.linkOperation;
       if (lnk == null ){
           lnk  =  (org.tura.platform.repository.operation.AddLinkOperation)this.attributes.get(org.tura.platform.datacontrol.commons.Constants.LINK_OPERATION);
       }
	    if ( lnk != null){
	        lnk.setDetail(this);
	        return lnk;
	    }else{
           return  null;
	    }
    }
    
    
	private void lock() {
		try {
			storageProvider.getStorage().lock(this);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}    
    
    
    private void readObject(java.io.ObjectInputStream aInputStream) throws ClassNotFoundException, java.io.IOException {
		aInputStream.defaultReadObject();
	    org.tura.platform.repository.cpa.storage.ProxyObjectRegistry.addProxyObject(this);
	}
  	
  	
  private void writeObject(java.io.ObjectOutputStream aOutputStream) throws IOException {
	    aOutputStream.defaultWriteObject();
   }  
       
    public void setForcePKupdate( boolean forcePKupdate){
             this.forcePKupdate = forcePKupdate;
    }
    public  [%=tp.~class%] clone(){
	    try {
	        return ([%=tp.~fullName%])   new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper().copyFromRepository2Persistence(this);
		} catch (org.tura.platform.repository.core.RepositoryException e) {
			 throw new RuntimeException(e);
		}
    }
    
    public  [%=tp.~class%] deepClone(){
	    try {
	        return ([%=tp.~fullName%])   new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper().deepCopyFromRepository2Persistence(this);
		} catch (org.tura.platform.repository.core.RepositoryException e) {
			 throw new RuntimeException(e);
		}
    }    
    
    
     public  [%=tp.~class%] deepClone(java.util.Map<Object, Object> context ){
	    try {
	        return ([%=tp.~fullName%])   new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper().deepCopyFromRepository2Persistence(this, context);
		} catch (org.tura.platform.repository.core.RepositoryException e) {
			 throw new RuntimeException(e);
		}
    }    
    
    
    public void add2Boundaries(java.util.Map<Object, Object> context ) {
        [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper mapper = new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper();
        Object pk = mapper.getPrimaryKeyFromRepositoryObject(this);
        mapper.put(context,pk,this );
    }    
    
    
    protected void notifyListner(org.tura.platform.repository.core.ObjectControl obj , String property) throws Exception {
        for (org.tura.platform.repository.proxy.ProxyObjectUpdateListener lst : listeners){
            lst.listener(obj, property);
        }
    }

    
    public void notifyListner() throws Exception {
         notifyListner(this, null);
    }

    
    public java.util.Map<String,Object> getAttributes(){
          return attributes;
    }
    
    @Override
    public boolean equals(Object o){
      if (o instanceof [%=tp.~package%].[%=tp.~class%]Proxy){
           return this.getKey().equals(  (([%=tp.~package%].[%=tp.~class%]Proxy)o).getKey());
     }else{
          if ( o  instanceof  [%=tp.~fullName%] ){
		   [%=tp.~fullName%] obj = ( [%=tp.~fullName%]) o;
		   org.apache.commons.lang.builder.EqualsBuilder builder = new org.apache.commons.lang.builder.EqualsBuilder();
	         [%for ( field in tp.~primaryKey){%]
		         builder.append(getObject().get[%=util.mergeAndCapitalize(field.name)%](), obj.get[%=util.mergeAndCapitalize(field.name)%]());
	          [%}%]
		      return builder.isEquals();
          }else{
             return false;
          }
     }  
    }
    
	@Override
	public Boolean getAttached() {
	    Boolean b =  this.getObject().getAttached();
	    if ( b == null ){
	       return false;
	    }
		return b;
	}    
    
    private [%=tp.~fullName%]  getObject() {
	    try{
	        return storageProvider.getStorage().getObject(this.getCpaPath());
	     }catch(Exception e){
	        throw new RuntimeException(e);
	     }
    }
    
    public boolean isRemoved() {
           return getObject() == null;
    }
    
      public String getKey(){
           return getKey(getObject());
      }
    
      
    
       private String getKey([%=tp.~fullName%]  object){
          StringBuffer key = new StringBuffer();
          [%for ( field in tp.~primaryKey){%]
           key.append(object.get[%=util.mergeAndCapitalize(field.name)%]());
           [%}%]
          key.append("[%=tp.~fullName%]");
          return key.toString();
       }
    
       public org.tura.platform.repository.core.RepoObjectKey getPrimaryKey() throws Exception{
	        return  new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper().getRepoObjectKey(this.getObject());
      }
    
    
       public org.tura.platform.repository.core.RepoObjectKey getCpaPrimaryKey() throws Exception{
          org.tura.platform.repository.core.RepoObjectKey key = new  org.tura.platform.repository.core.RepoObjectKey();
          key.setType("[%=tp.~fullName%]");
          org.tura.platform.repository.core.FieldValue value = new org.tura.platform.repository.core.FieldValue("cpaid",String.class.getName(),cpaid);
          key.addValue(value);

          return key;
      }    
    
       public static java.util.ArrayList<org.tura.platform.repository.core.FieldValue> getPrimaryKeyFields() throws Exception{
           java.util.ArrayList<org.tura.platform.repository.core.FieldValue> fields = new java.util.ArrayList<org.tura.platform.repository.core.FieldValue>();
          org.tura.platform.repository.core.FieldValue field = null;
          [%for ( field in tp.~primaryKey){%]
           [%
             field.typeRef.mappingType2Java(recipe,ingredient);
           %]
            field = new org.tura.platform.repository.core.FieldValue("[%=util.mergeAndCapitalize(field.name)%]","[%=field.typeRef.~fullName%]",null);
           fields.add(field);
           [%}%]
           return fields;
       }    
    
      public org.tura.platform.repository.core.RepoKeyPath getPath() throws Exception{
	        return  new [%=tp.~package%].mapper.[%=tp.~class%]ProxyMapper().getPath(this.getObject());
      }
    

      public org.tura.platform.repository.core.RepoKeyPath getCpaPath() {
        try{
      [%
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = tp.uid and t.target.uid <> t.source.uid and t.internal);
         if (assosiations.size() <> 0){
         %]
          return repository.getInternalPath(this.cpaid);
         [%
         }else{
         %]
           org.tura.platform.repository.core.RepoKeyPath path = new org.tura.platform.repository.core.RepoKeyPath ();
           path.addRepoObjectKey(null,getCpaPrimaryKey());
           return path;
         [%
         }
      %]
	      }catch( Exception  e){
			throw  new RuntimeException(e);
	      }
      }    
    
    
    @Override
    public String toString(){
    String str = "";
    [%
    for (field in tp.attributes){
         if (tp.~skipAttributes.contains(field) ){
            continue; 
         }   
    %]
      str = str + " [%=field.name%] = "+ getObject().get[%=util.mergeAndCapitalize(field.name)%]();
    [%
    }
    %]
     return str;
    }
    
    
	@Override
	public long getStorageControlTimeStamp() {
		try {
		return storageProvider.getStorage().getStorageControl(this.getCpaPath()).getTimeStamp();
		}catch( Exception e) {
			throw new RuntimeException(e);
		}
	}	    
    
     public static org.tura.platform.repository.operation.UpdateObjectOperation upd( org.tura.platform.repository.core.ObjectControl obj, org.tura.platform.repository.proxy.ProxyCommadStackProvider localStackProvider, String property, Object oldValue,  Object newValue, Class<?> valueType ){
            org.tura.platform.repository.operation.UpdateObjectOperation command = new org.tura.platform.repository.operation.UpdateObjectOperation();
            command.setProxy(obj);
	        command.setStackProvider(localStackProvider);
            command.setNewValue(newValue);
            command.setOldValue(oldValue);
            command.setProperty(property);
            command.setPropertyType(valueType);
            return command;
     }
    
    
    @Override
    public void setAttached(Boolean attachment){
		String session = UUID.randomUUID().toString();
		try {
			    ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                org.tura.platform.repository.operation.UpdateObjectOperation command = upd(this,localStackProvider,"attached",this.getObject().getAttached(),  attachment,Boolean.class);
                if (command.prepare()){
	                 localStackProvider.get().commit();
                }
        
    [%
    type = tp;
    while (1 == 1){
         var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid and ( t.containment.toString().equals("Source") or t.internal) );
          for ( rel in assosiations  ){
               switch  (rel.type.toString()){
                 case "One2One" :  %][%=rel.one2oneSrcAttachment(recipe,ingredient,model_mapper)%][%
                 case "One2Many" : %][%=rel.one2manySrcAttachment(recipe,ingredient,model_mapper)%][%
                 case "Many2Many" : %][%
             }
             
         }            
          var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid and  t.containment.toString().equals("Target") );
          for (rel in assosiations){
               switch  (rel.type.toString()){
                 case "One2One" :  %][%=rel.one2oneTrgAttachment(recipe,ingredient,model_mapper)%][%
                 case "One2Many" : %][%
                 case "Many2Many" : %][%
             }
          }        
          
        if (type.~extension.isDefined()){
           type = type.~extension;
        }else{
           break;
        }
  }
%]
		} catch (Exception e) {
					throw new RuntimeException(e);
		} finally {
			removeLocalStackProvider(session);
		}

}
[%
    
    var type = tp;
    while (1 == 1){
        for ( field in type.attributes){
		     if (type.~skipAttributes.contains(field) and not type.~bindedAttribute.contains(field)){
		     
            field.typeRef.mappingType2Java(recipe,ingredient);
		     
%]
          private  [%=field.typeRef.~fullName%]   getTransient[%=util.mergeAndCapitalize(field.name)%](){
               return this.getObject().getTransient[%=util.mergeAndUnCapitalize(field.name)%]();
          }

         @Override
          public  void  setTransient[%=util.mergeAndUnCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
		      String session = UUID.randomUUID().toString();
		      try {
			       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
	                org.tura.platform.repository.operation.UpdateObjectOperation command = upd(this,localStackProvider,"transient[%=util.mergeAndUnCapitalize(field.name)%]",this.getObject().getTransient[%=util.mergeAndUnCapitalize(field.name)%](),  [%=util.mergeAndUnCapitalize(field.name)%],[%=field.typeRef.~fullName%].class);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
                         if ( this.getObject().getAttached() != null && this.getObject().getAttached()){
	                          repository.getStackProvider().get().addCommands(changes);
	                     }
                         notifyListner(this,"transient[%=util.mergeAndUnCapitalize(field.name)%]");
                    }
                  }catch(Exception e){
                    throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
          }


[%
                continue; 
             }   
        }    
	    if (type.~extension.isDefined()){
	       type = type.~extension;
	    }else{
	       break;
	  }
  }
    
   type = tp;
    while (1 == 1){
    
        for ( field in type.attributes){
             if (type.~skipAttributes.contains(field) ){
                continue; 
             }   
            field.typeRef.mappingType2Java(recipe,ingredient);
            if (field.pk){
%]
          @Override
          public  [%=field.typeRef.~fullName%]   get[%=util.mergeAndCapitalize(field.name)%](){
               return this.getObject().get[%=util.mergeAndCapitalize(field.name)%]();
          }

          @Override
          public  void set[%=util.mergeAndCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
		    String session = UUID.randomUUID().toString();
            if ( this.getObject().getAttached() == null || !this.getObject().getAttached()){
		      try {
			        ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
	                org.tura.platform.repository.operation.UpdateObjectOperation command = upd(this,localStackProvider,"[%=util.mergeAndCapitalize(field.name)%]",this.getObject().get[%=util.mergeAndCapitalize(field.name)%](),  [%=util.mergeAndUnCapitalize(field.name)%],[%=field.typeRef.~fullName%].class);
	                if (command.prepare()){
	                     localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
	                     notifyListner(this,"[%=util.mergeAndUnCapitalize(field.name)%]");
	                }
				} catch (Exception e) {
					throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
            }else{
                if (forcePKupdate){
					try {
			            ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
	                    org.tura.platform.repository.operation.UpdateObjectOperation command = upd(this,localStackProvider,"[%=util.mergeAndCapitalize(field.name)%]",this.getObject().get[%=util.mergeAndCapitalize(field.name)%](),  [%=util.mergeAndUnCapitalize(field.name)%],[%=field.typeRef.~fullName%].class);
	                    if (command.prepare()){
		                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
		                     localStackProvider.get().commit();
		                     repository.getStackProvider().get().addCommands(changes);
	                         notifyListner(this,"[%=util.mergeAndUnCapitalize(field.name)%]");
	                    }
	                    return;
					} catch (Exception e) {
						throw new RuntimeException(e);
					} finally {
						removeLocalStackProvider(session);
					}
                }
                throw new RuntimeException("Could  not modify primary key on attached object");
            }
          }
[%            
            }else{
%]
          @Override
          public  [%=field.typeRef.~fullName%]   get[%=util.mergeAndCapitalize(field.name)%](){
               return this.getObject().get[%=util.mergeAndCapitalize(field.name)%]();
          }

          @Override
          public  void set[%=util.mergeAndCapitalize(field.name)%]([%=field.typeRef.~fullName%]  [%=util.mergeAndUnCapitalize(field.name)%] ){
		      String session = UUID.randomUUID().toString();
		      try {
			       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
	                org.tura.platform.repository.operation.UpdateObjectOperation command = upd(this,localStackProvider,"[%=util.mergeAndCapitalize(field.name)%]",this.getObject().get[%=util.mergeAndCapitalize(field.name)%](),  [%=util.mergeAndUnCapitalize(field.name)%],[%=field.typeRef.~fullName%].class);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
                         if ( this.getObject().getAttached() != null && this.getObject().getAttached()){
	                          repository.getStackProvider().get().addCommands(changes);
	                     }
                         notifyListner(this,"[%=util.mergeAndUnCapitalize(field.name)%]");
                    }
                  }catch(Exception e){
                    throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
              }
[%            
            }
        }
        
      var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
      for ( rel in assosiations  ){
	         var rel_uid =rel.merge(mhash); 
	         if (rel_uid == null){
	             rel_uid = rel.uid;
	         } 
	         rel.~rel_uid = rel_uid;
      
      
           switch  (rel.type.toString()){
             case "One2One" :  %][%=rel.one2oneSrc(recipe,ingredient,model_mapper)%][%
             case "One2Many" : %][%=rel.one2manySrc(recipe,ingredient,model_mapper)%][%
             case "Many2Many" : %][%=rel.many2manySrc(recipe,ingredient,model_mapper)%][%
         }
         
     }            
      var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
      for (rel in assosiations){
	         var rel_uid =rel.merge(mhash); 
	         if (rel_uid == null){
	             rel_uid = rel.uid;
	         } 
	         rel.~rel_uid = rel_uid;
      
           switch  (rel.type.toString()){
             case "One2One" :  %][%=rel.one2oneTrg(recipe,ingredient,model_mapper)%][%
             case "One2Many" : %][%=rel.one2manyTrg(recipe,ingredient,model_mapper)%][%
             case "Many2Many" : %][%=rel.many2manyTrg(recipe,ingredient,model_mapper)%][%
         }
      }        
      
    if (type.~extension.isDefined()){
       type = type.~extension;
    }else{
       break;
    }
      
}            
%]

	private ProxyCommadStackProvider getLocalStackProvider(String session) {
		ProxyCommadStackProvider localStackProvider = stackMap.get(session);
		if (localStackProvider == null) {
			localStackProvider = new  org.tura.platform.repository.cpa.LocalCommadStackProvider();
			stackMap.put(session, localStackProvider);
			localStackProvider.get().addProxyCommandStackEventListener(session,
					new LocalRepositoryCommitListener(session));
		}
		return localStackProvider;
	}

	private void removeLocalStackProvider(String session) {
		stackMap.remove(session);
	}
		
	private class LocalRepositoryCommitListener extends org.tura.platform.repository.proxy.ProxyCommandStackEventListener {
	    private static final long serialVersionUID = 1L;
	    
       private String session;
    
	    LocalRepositoryCommitListener(String  session){
	    	this.session = session;
	    }
	    
		public void beforeCommit() throws Exception {
			List<Object> changes = getLocalStackProvider(session).get().getListOfCommand();
            repository.getLocalRepository().applyChanges(changes);
		}
	}

}        
      
[%

@template
operation type::Assosiation one2oneSrcAttachment(recipe,ingredient,model_mapper){
     var hash = self.sourceSideNamesCalculation();
     %]
     if ((( org.tura.platform.repository.core.ObjectControl )this.get[%=hash.get("sourceMethodName")%]Eager()) !=null ){
         (( org.tura.platform.repository.core.ObjectControl )this.get[%=hash.get("sourceMethodName")%]Eager()).setAttached(true);
      }
     [%
} 

@template
operation type::Assosiation one2manySrcAttachment(recipe,ingredient,model_mapper){
     var hash = self.sourceSideNamesCalculation();
     hash.get("target").mappingType2Java(recipe,ingredient);
     
     %]
     for ( [%=hash.get("target").~fullName%] t : this.get[%=hash.get("sourceMethodName")%]Eager() ){
           (( org.tura.platform.repository.core.ObjectControl )t).setAttached(true);
     }
     [%

} 

@template
operation type::Assosiation one2oneTrgAttachment(recipe,ingredient,model_mapper){
     var hash = self.targetSideNamesCalculation();
     %]
     if ((( org.tura.platform.repository.core.ObjectControl ) this.get[%=hash.get("targetMethodName")%]Eager()) != null){
      (( org.tura.platform.repository.core.ObjectControl ) this.get[%=hash.get("targetMethodName")%]Eager()).setAttached(true);
     }
     [%
} 



@template
operation type::Assosiation one2oneSrcCopyField(recipe,ingredient,model_mapper){
   var hash = self.sourceSideNamesCalculation();
   var  lazy = self.isLazy();
   if ( self.isLazy()){
   %]
         this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%]SingleObject = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%]SingleObject;   
         this.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%]SingleObject = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%]SingleObject;   
   [%
   }else{
   %]
            this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%]SingleObject = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%]SingleObject;   
   [%
   }
}


@template
operation type::Assosiation cleanSrc(recipe,ingredient,model_mapper){
    var hash = self.sourceSideNamesCalculation();
    var util = new Native('org.tura.metamodel.commons.Util');
   %]
    if( "[%=hash.get("sourceProperty")%]".equals(name)){
          clean[%=hash.get("sourceMethodName")%]();
    }
   [%    
}

@template
operation type::Assosiation cleanTrg(recipe,ingredient,model_mapper){
    var hash = self.targetSideNamesCalculation();
    var util = new Native('org.tura.metamodel.commons.Util');
   %]
    if( "[%=hash.get("targetProperty")%]".equals(name)){
          clean[%=hash.get("targetMethodName")%]();
    }
   [%    

}


@template
operation type::Assosiation one2oneSrc(recipe,ingredient,model_mapper){
    var hash = self.sourceSideNamesCalculation();
    var util = new Native('org.tura.metamodel.commons.Util');
    hash.get("target").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
     public void set[%=hash.get("sourceMethodName")%]([%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
         this.set[%=hash.get("sourceMethodName")%]Eager([%=hash.get("sourceProperty")%]);
      }   
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%](){
          if (inMemory ) {
               return this.get[%=hash.get("sourceMethodName")%]Eager();
          } else{
               return this.get[%=hash.get("sourceMethodName")%]Lazy();
          }
     }  
     public void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException {
         if  ( [%=hash.get("sourceProperty")%]LazySingleObject != null){
                [%=hash.get("sourceProperty")%]LazySingleObject.close();
                [%=hash.get("sourceProperty")%]LazySingleObject = null;
          }            
         if  ( [%=hash.get("sourceProperty")%]EagerSingleObject != null){
                [%=hash.get("sourceProperty")%]EagerSingleObject.close();
                 [%=hash.get("sourceProperty")%]EagerSingleObject  = null;
          }            
     }
   [%
     %][%=self.one2oneSrcMethodBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.one2oneSrcMethodBlock(recipe,ingredient,model_mapper,true)%][%
   }else{
   %]
     public void set[%=hash.get("sourceMethodName")%]([%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
         this.set[%=hash.get("sourceMethodName")%]Eager([%=hash.get("sourceProperty")%]);
      }   
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%](){
               return this.get[%=hash.get("sourceMethodName")%]Eager();
     }  
     public void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException{
         if  ( [%=hash.get("sourceProperty")%]EagerSingleObject != null){
                [%=hash.get("sourceProperty")%]EagerSingleObject.close();
                [%=hash.get("sourceProperty")%]EagerSingleObject  = null;
          }            
     }
     
   [%
     %][%=self.one2oneSrcMethodBlock(recipe,ingredient,model_mapper,false)%][%
   }
}


@template
operation type::Assosiation one2oneSrcMethodBlock(recipe,ingredient,model_mapper,lazy){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }

     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     var relationType = "Opposite";
     
     
     %]
     private org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%][%=self.internalType()%]SingleObject<[%=hash.get("target").~fullName%]>  [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%]SingleObject ;
  
     [%
        if (masterType.uid == self.source.uid ){
          relationType = "Direct";
        
	     if  (lazy){
	           %]
	           [%=self.one2oneSrcLazyGetMethod(hash,relationType,masterType)%]
	           [%
	     }else{
        %]
  
     public static org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation rm[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%] master,  [%=hash.get("target").~fullName%] detail){
            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation();
            command.setRelationType("One2One");
            command.setMaster(([%=hash.get("source").~fullName%]Proxy) master);
            command.setDetail(  ([%=hash.get("target").~fullName%]Proxy)detail);
            command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
            command.setDetailProperty("[%=hash.get("targetMethodName")%]");
            
            return command;
     }
     public static org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation add[%=hash.get("sourceMethodName")%](  [%=hash.get("source").~fullName%] master,  [%=hash.get("target").~fullName%]  detail){
            org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation();
            command.setRelationType("One2One");
            command.setMaster(([%=hash.get("source").~fullName%]Proxy) master);
            command.setDetail((([%=hash.get("target").~fullName%]Proxy)  detail ));
            command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
            command.setDetailProperty("[%=hash.get("targetMethodName")%]");
     
            return command;
     }
     [% 	     
	        if ( self.isInternal()){
	           %]
	           [%=self.one2oneSrcEagerInternalDirectGetMethod(hash)%]
	           [%
	        }else{
	           %]
	           [%=self.one2oneSrcEagerGetMethod(hash,relationType)%]
	           [%
	        }
	     }
     }else{
	     if  (lazy){
	           %]
	           [%=self.one2oneSrcLazyGetMethod(hash,relationType,masterType)%]
	           [%
	     }else{
	        if ( self.isInternal()){
	           %]Should not be here[%
	        }else{
	           %]
	           [%=self.one2oneSrcEagerGetMethod(hash,relationType)%]
	           [%
	        }
	     }
     }
	if  ( not lazy){
     %]
     private void set[%=hash.get("sourceMethodName")%][%=self.accessorType(lazy)%] ([%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
     [%
        if (masterType.uid == self.source.uid ){
        %]
		String session = UUID.randomUUID().toString();
           [%
            if (not hash.get("containment")){
           %]
           if ( [%=hash.get("sourceProperty")%] != null && ( [%=hash.get("sourceProperty")%].getAttached() == null || ![%=hash.get("sourceProperty")%].getAttached())){
               try{
                    repository.insert([%=hash.get("sourceProperty")%], [%=hash.get("target").~fullName%].class  );  
				} catch (RepositoryException e) {
					throw new RuntimeException(e);
				}
                
           }
           if (getAttached() == null || !getAttached()){
               try{
                    repository.insert(this, [%=hash.get("source").~fullName%].class  );  
				} catch (RepositoryException e) {
					throw new RuntimeException(e);
				}
           }
          try{
			ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
           [%
            }else{
           %]
		  Boolean saveAttached = false;
	       try{
			  ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
			  if ( [%=hash.get("sourceProperty")%] != null){
			     saveAttached = ((ObjectControl)[%=hash.get("sourceProperty")%]).getAttached();
                ((ObjectControl)[%=hash.get("sourceProperty")%]).setAttached(this.getAttached());
			  }
           [%
            }
           %]               
           if (([%=hash.get("target").~fullName%]Proxy)   (this.get[%=hash.get("sourceMethodName")%]Eager()) != null){
	            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("sourceMethodName")%](this,this.get[%=hash.get("sourceMethodName")%]Eager());
				command.setStackProvider(localStackProvider);
	            command.prepare();
            }
              if ([%=hash.get("sourceProperty")%] != null){
                  org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command2 = add[%=hash.get("sourceMethodName")%](this,[%=hash.get("sourceProperty")%]);
			      command2.setStackProvider(localStackProvider);
                  command2.prepare();
             }
             java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
             if( changes.size() != 0){
                 localStackProvider.get().commit();
                 if ( this.getAttached() != null   && this.getAttached() ){
                    repository.getStackProvider().get().addCommands(changes);
                 }
             }
             
         }catch(Exception e){
           [%
            if (hash.get("containment")){
           %]
			  if ( [%=hash.get("sourceProperty")%] != null){
		        ((ObjectControl)[%=hash.get("sourceProperty")%]).setAttached(saveAttached);
			  }
           [%}%]
              throw new RuntimeException(e);
		} finally {
			removeLocalStackProvider(session);
		}
        [%
        }else{
        %]
           [%=hash.get("sourceProperty")%].set[%=hash.get("targetMethodName")%](this);
        [%
        
        }
     %]
     }
     [%  
    }
}

@template
operation type::Assosiation one2oneSrcEagerGetMethod(hash,relationType){
     var util = new Native('org.tura.metamodel.commons.Util');

     %]
     
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%]Eager(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
     
         if  ( [%=hash.get("sourceProperty")%]EagerSingleObject == null){
             [%=hash.get("sourceProperty")%]EagerSingleObject
				= new org.tura.platform.repository.proxy.access.EagerSingleObject<[%=hash.get("target").~fullName%]>([%=hash.get("target").~fullName%].class,storageProvider , repository, org.tura.platform.repository.core.RelationType.[%=relationType%]);         
         }
     
        return [%=hash.get("sourceProperty")%]EagerSingleObject.get(this.getCpaPath(),"[%=self.~rel_uid%]"); 
     }
[%
}


@template
operation type::Assosiation one2oneSrcLazyGetMethod(hash,relationType,masterType){
     var util = new Native('org.tura.metamodel.commons.Util');

     %]
     private [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%]Lazy(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
         if  ( [%=hash.get("sourceProperty")%]LazySingleObject == null){
             [%=hash.get("sourceProperty")%]LazySingleObject
				= new org.tura.platform.repository.proxy.access.LazySingleObject<[%=hash.get("target").~fullName%]>([%=hash.get("target").~fullName%].class,storageProvider , repository, org.tura.platform.repository.core.RelationType.[%=relationType%]){

                   private static final long serialVersionUID = [%=util.serialVersionUID()%]L;

					public  List<org.tura.platform.datacontrol.commons.OrderCriteria> getLazyObjectOrderCriteria(){
					      return new java.util.ArrayList<>();
					}
				
					public  List<org.tura.platform.datacontrol.commons.SearchCriteria> getLazyObjectSearchCriteria(){
					      java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search =  new java.util.ArrayList<>();
						  [%
							         for (lnk in self.links){
							         %]
		                   search.add( new org.tura.platform.datacontrol.commons.SearchCriteria("[%=util.mergeAndUnCapitalize(lnk.detailField.name)%]",com.octo.java.sql.exp.Operator.EQ.name(),get[%=util.mergeAndCapitalize(lnk.masterField.name)%](),[%=lnk.masterField.typeRef.~fullName%].class.getName()));
							         [%
							         }
						 %]					      
					      return search;
					}
				};         
         }
     
        return [%=hash.get("sourceProperty")%]LazySingleObject.get(this.getCpaPath(),"[%=self.~rel_uid%]"); 
     }
[%
}


@template
operation type::Assosiation one2ManySrcLazyGetMethod(){
     var util = new Native('org.tura.metamodel.commons.Util');

     %]
    @Override
	public  List<org.tura.platform.datacontrol.commons.OrderCriteria> getLazyObjectOrderCriteria(){
	      return new java.util.ArrayList<>();
	}
				
    @Override
	public  List<org.tura.platform.datacontrol.commons.SearchCriteria> getLazyObjectSearchCriteria(){
	      java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search =  new java.util.ArrayList<>();
		  [%
			         for (lnk in self.links){
			         %]
           search.add( new org.tura.platform.datacontrol.commons.SearchCriteria("[%=util.mergeAndUnCapitalize(lnk.detailField.name)%]",com.octo.java.sql.exp.Operator.EQ.name(),get[%=util.mergeAndCapitalize(lnk.masterField.name)%](),[%=lnk.masterField.typeRef.~fullName%].class.getName()));
			         [%
			         }
		 %]					      
	      return search;
	}

[%
}

@template
operation type::Assosiation many2ManySrcLazyGetMethod(recipe,ingredient,model_mapper, type, method){
     var util = new Native('org.tura.metamodel.commons.Util');

     %]
    @Override
	public  List<org.tura.platform.datacontrol.commons.OrderCriteria> getLazyObjectOrderCriteria(){
	      return new java.util.ArrayList<>();
	}
				
    @Override
	public  List<org.tura.platform.datacontrol.commons.SearchCriteria> getLazyObjectSearchCriteria(){
	      java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search =  new java.util.ArrayList<>();
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY,com.octo.java.sql.exp.Operator.EQ.name(),org.tura.platform.datacontrol.commons.Constants.MANY2MANY_QUERY,String.class.getName()));
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY_MANY2MANY_TYPE,com.octo.java.sql.exp.Operator.EQ.name(),"[%=type.~fullName%]",String.class.getName()));
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY_MANY2MANY_METHOD,com.octo.java.sql.exp.Operator.EQ.name(),"[%=method%]",String.class.getName()));

		  [%
			         for (lnk in self.links){
                      lnk.masterField.typeRef.mappingType2Java(recipe,ingredient);
			         
			         %]
           search.add( new org.tura.platform.datacontrol.commons.SearchCriteria("[%=util.mergeAndUnCapitalize(lnk.masterField.name)%]",com.octo.java.sql.exp.Operator.EQ.name(),get[%=util.mergeAndCapitalize(lnk.masterField.name)%](),[%=lnk.masterField.typeRef.~fullName%].class.getName()));
			         [%
			         }
		 %]					      
	      return search;
	}

[%
}


@template
operation type::Assosiation many2ManyTrgLazyGetMethod(recipe,ingredient,model_mapper, type, method){
     var util = new Native('org.tura.metamodel.commons.Util');

     %]
    @Override
	public  List<org.tura.platform.datacontrol.commons.OrderCriteria> getLazyObjectOrderCriteria(){
	      return new java.util.ArrayList<>();
	}
				
    @Override
	public  List<org.tura.platform.datacontrol.commons.SearchCriteria> getLazyObjectSearchCriteria(){
	      java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search =  new java.util.ArrayList<>();
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY,com.octo.java.sql.exp.Operator.EQ.name(),org.tura.platform.datacontrol.commons.Constants.MANY2MANY_QUERY,String.class.getName()));
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY_MANY2MANY_TYPE,com.octo.java.sql.exp.Operator.EQ.name(),"[%=type.~fullName%]",String.class.getName()));
          search.add( new org.tura.platform.datacontrol.commons.SearchCriteria(org.tura.platform.datacontrol.commons.Constants.JPA_QUERY_MANY2MANY_METHOD,com.octo.java.sql.exp.Operator.EQ.name(),"[%=method%]",String.class.getName()));

		  [%
			         for (lnk in self.links){
                      lnk.detailField.typeRef.mappingType2Java(recipe,ingredient);
			         
			         %]
           search.add( new org.tura.platform.datacontrol.commons.SearchCriteria("[%=util.mergeAndUnCapitalize(lnk.detailField.name)%]",com.octo.java.sql.exp.Operator.EQ.name(),get[%=util.mergeAndCapitalize(lnk.detailField.name)%](),[%=lnk.detailField.typeRef.~fullName%].class.getName()));
			         [%
			         }
		 %]					      
	      return search;
	}

[%
}



@template
operation type::Assosiation one2oneSrcEagerInternalDirectGetMethod(hash){
     var util = new Native('org.tura.metamodel.commons.Util');
     %]
     
     public [%=hash.get("target").~fullName%] get[%=hash.get("sourceMethodName")%]Eager(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
     
         if  ( [%=hash.get("sourceProperty")%]EagerSingleObject == null){
             [%=hash.get("sourceProperty")%]EagerSingleObject
				= new org.tura.platform.repository.proxy.access.EagerInternalSingleObject<[%=hash.get("target").~fullName%]>(  [%=hash.get("target").~fullName%].class,storageProvider , repository, org.tura.platform.repository.core.RelationType.Direct);         
         }
        return [%=hash.get("sourceProperty")%]EagerSingleObject.get(getCpaPath(),"[%=self.~rel_uid%]"); 
     }
[%
}


@template
operation type::Assosiation one2manySrcCopyField(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var hash = self.sourceSideNamesCalculation();
     var  lazy = self.isLazy();
     if (masterType.uid == self.source.uid ){
	   if ( self.isLazy()){
	   %]
	      this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
	      this.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%];
	    [%   
	   }else{
	   %]
	      this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
	   [%
	   }
   }else{
     %]   Should not have this !!!!  [%
   }
}

@template
operation type::Assosiation one2manySrc(recipe,ingredient,model_mapper){
     var hash = self.sourceSideNamesCalculation();
     var masterType =   hash.get("masterType");
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.get("target").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
        public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
          if (inMemory ) {
              return get[%=hash.get("sourceMethodName")%]Eager();
          }else{
              return get[%=hash.get("sourceMethodName")%]Lazy();
          }        
        }
        
        public void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException{
           if  ( [%=hash.get("sourceProperty")%]Eager != null){
               [%=hash.get("sourceProperty")%]Eager.close();
               [%=hash.get("sourceProperty")%]Eager = null;
               
           }
           if (  [%=hash.get("sourceProperty")%]Lazy != null){
               [%=hash.get("sourceProperty")%]Lazy.close();
               [%=hash.get("sourceProperty")%]Lazy  = null;
           }
        }
   [%
     %][%=self.one2manySrcBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.one2manySrcBlock(recipe,ingredient,model_mapper,true)%][%
   }else{
   %]
        public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
              return get[%=hash.get("sourceMethodName")%]Eager();
        }
        
        public void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException{
           if  ( [%=hash.get("sourceProperty")%]Eager != null){
               [%=hash.get("sourceProperty")%]Eager.close();
               [%=hash.get("sourceProperty")%]Eager = null;
           }
        }
        
   [%
   
     %][%=self.one2manySrcBlock(recipe,ingredient,model_mapper,false)%][%
   }
}


@template
operation type::Assosiation one2manySrcBlock(recipe,ingredient,model_mapper,lazy){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }
     

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.source.uid ){
     if ( not lazy){
     %]
	        public static org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation add[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%] master,   [%=hash.get("target").~fullName%] detail ){
	              org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation();
	              command.setMaster(([%=hash.get("source").~fullName%]Proxy)master);
	              command.setDetail(([%=hash.get("target").~fullName%]Proxy)detail);
	              command.setRelationType("One2Many");
	              command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
	              command.setDetailProperty("[%=hash.get("targetMethodName")%]");
	              return command;
	        }
	            
	        public static org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation rm[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%] master,   [%=hash.get("target").~fullName%] detail ){
	              org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation();
	              command.setMaster(([%=hash.get("source").~fullName%]Proxy)master);
	              command.setDetail(([%=hash.get("target").~fullName%]Proxy)detail);
	              command.setRelationType("One2Many");
	              command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
	              command.setDetailProperty("[%=hash.get("targetMethodName")%]");
	              return command;
	        }
      [%  
           }
     %]
        
     private   org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%][%=self.internalType()%]List<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
     
     public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%][%=self.accessorType(lazy)%](){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
       if  (  [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] == null){ 
          [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = 
             new org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%][%=self.internalType()%]List<[%=hash.get("target").~fullName%]>([%=hash.get("target").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.Direct) {
            
          private static final long serialVersionUID = [%=util.serialVersionUID()%]L;
            
           [%
	          if  ( lazy){
	          %][%=self.one2ManySrcLazyGetMethod()%][%
	          }
           %] 
            
            @Override
            public void add(int i , [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
		           [%
		           if ( lazy){
		               %]get[%=hash.get("sourceMethodName")%]Eager().add(i,[%=hash.get("sourceProperty")%]);
		                   super.add(i,[%=hash.get("sourceProperty")%]);
		               [%
		           }else{
			            if (not hash.get("containment")){
			           %]
			           if ( [%=hash.get("sourceProperty")%] != null && ( [%=hash.get("sourceProperty")%].getAttached() == null || ![%=hash.get("sourceProperty")%].getAttached())){
			              try{
			                  repository.insert([%=hash.get("sourceProperty")%], [%=hash.get("target").~fullName%].class);
							} catch (RepositoryException e) {
								throw new RuntimeException(e);
							}
			                
			           }
			           if (getAttached() == null || !getAttached()){
			               try{
 			                  repository.insert([%=hash.get("source").~fullName%]Proxy.this,[%=hash.get("source").~fullName%].class );
							} catch (RepositoryException e) {
								throw new RuntimeException(e);
							}
			           }
			           
		               String session = UUID.randomUUID().toString();
	                   try{
			           [%
			            }else{
			            %]
				       Boolean saveAttached = false;
				        if ( [%=hash.get("sourceProperty")%] != null){
				            saveAttached = ((ObjectControl)[%=hash.get("sourceProperty")%]).getAttached();
				            ((ObjectControl)[%=hash.get("sourceProperty")%]).setAttached(getAttached());;
				        } 
		               String session = UUID.randomUUID().toString();
	                    try{
			            [%
			            }
			           %]
			            ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
	                    org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = add[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~class%]Proxy.this, [%=hash.get("sourceProperty")%]);
						command.setStackProvider(localStackProvider);
	                    if (command.prepare()){
		                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
		                     localStackProvider.get().commit();
		                     super.add( i, [%=hash.get("sourceProperty")%]);
			                 if ( getAttached() != null   && getAttached() ){
			                    repository.getStackProvider().get().addCommands(changes);
			                 }
	                    }
	              }catch(Exception e){
		           [%
		            if (hash.get("containment")){
		           %]
	  				  if ( [%=hash.get("sourceProperty")%] != null){
				        ((ObjectControl)[%=hash.get("sourceProperty")%]).setAttached(saveAttached);
					  }
		           [%}%]
	              throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
              [%
              }
              %]
            }
            
            @Override
            public boolean remove( Object  obj){
                  [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%] =  ([%=hash.get("target").~fullName%] )obj;
                  org.tura.platform.repository.proxy.access.DelStruc valid = null;
		          try {
	                     valid = super.isRemovable([%=hash.get("sourceProperty")%]);
	                     if ( valid.isRemovable()  && valid.getIndex() != -1){
	                            this.remove(valid.getIndex());
	                            return true;
	                     }
	                  }catch(Exception e){
	                    throw new RuntimeException(e);
	                  }                     
                     if ( valid.isRemovable()  && valid.getIndex() == -1){
		                String session = UUID.randomUUID().toString();
		                try {
					       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("sourceMethodName")%]([%=hash.get("source").~class%]Proxy.this, [%=hash.get("sourceProperty")%]);
							command.setStackProvider(localStackProvider);
		                    if (command.prepare()){
			                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
			                     localStackProvider.get().commit();
				                 if ( getAttached() != null   && getAttached() ){
				                    repository.getStackProvider().get().addCommands(changes);
				                 }
		                    }
	                        return true;
		                  }catch(Exception e){
		                    throw new RuntimeException(e);
						  } finally {
								removeLocalStackProvider(session);
						  }
                     }
                   
                     return false;
            }                

               @Override
               public [%=hash.get("target").~fullName%] remove(int index) {
               [%
		           if ( lazy){
		               %] 
		               super.remove(index);
		               return get[%=hash.get("sourceMethodName")%]Eager().remove(index);[%
		           }else{
               %]
		          String session = UUID.randomUUID().toString();
		          try {
			       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                    org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("sourceMethodName")%]([%=hash.get("source").~class%]Proxy.this, get(index));
					command.setStackProvider(localStackProvider);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
		                 super.remove( index);
		                 if ( getAttached() != null   && getAttached() ){
		                    repository.getStackProvider().get().addCommands(changes);
		                 }
                    }
                    return null;
                  }catch(Exception e){
                    throw new RuntimeException(e);
				  } finally {
						removeLocalStackProvider(session);
				  }
                  [%  
                  }
                  %]
            }
			@Override
			public RepoKeyPath getParentKeyPath() {
				return [%=hash.get("source").~class%]Proxy.this.getCpaPath();
			}

			@Override
			public String getProperty() {
				return "[%=self.~rel_uid%]";
			}
          
          };
        }
        return  [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
     }
     [%
     }else{
     %]   Should not have this !!!!  [%
     }
}


@template
operation type::Assosiation many2manySrcCopyField(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var hash = self.sourceSideNamesCalculation();
     var  lazy = self.isLazy();
     if (masterType.uid == self.source.uid ){
	   if ( self.isLazy()){
	   %]
	     this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
	     this.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(false)%];
	    [%
	     }else{
	   %]
	     this.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = proxy.[%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
	    [%
	     }
     }
}


@template
operation type::Assosiation many2manySrc(recipe,ingredient,model_mapper){
     var hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.get("target").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
        public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
          if (inMemory ) {
              return get[%=hash.get("sourceMethodName")%]Eager();
          }else{
              return get[%=hash.get("sourceMethodName")%]Lazy();
          }        
        }
        
        public  void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException{
            if ([%=hash.get("sourceProperty")%]Eager  != null){
                 [%=hash.get("sourceProperty")%]Eager.close();
                 [%=hash.get("sourceProperty")%]Eager = null;
                 
            }
            if ([%=hash.get("sourceProperty")%]Lazy  != null){
                 [%=hash.get("sourceProperty")%]Lazy.close();
                 [%=hash.get("sourceProperty")%]Lazy =   null;
            }        
        }
   [%
     %][%=self.many2manySrcBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.many2manySrcBlock(recipe,ingredient,model_mapper,true)%][%
   }else{
   %]
        public java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%](){
              return get[%=hash.get("sourceMethodName")%]Eager();
        }

        public  void clean[%=hash.get("sourceMethodName")%]() throws  java.io.IOException{
            if ([%=hash.get("sourceProperty")%]Eager  != null){
                 [%=hash.get("sourceProperty")%]Eager.close();
                 [%=hash.get("sourceProperty")%]Eager =   null;
            }
        }        
   [%
   
     %][%=self.many2manySrcBlock(recipe,ingredient,model_mapper,false)%][%
   }
}


@template
operation type::Assosiation many2manySrcBlock(recipe,ingredient,model_mapper,lazy){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }
     

     hash = self.sourceSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("target").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.source.uid ){
       if (not lazy){
     %]
       public static  org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation add[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%] master,  [%=hash.get("target").~fullName%] detail ){
            org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation();
            command.setMaster ( ([%=masterType.~fullName%]Proxy)master );
            command.setDetail( ([%=detailType.~fullName%]Proxy)detail );
            command.setRelationType("Many2Many");
            command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
            command.setDetailProperty("[%=hash.get("targetMethodName")%]");
            return command;
       }

       public static org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation rm[%=hash.get("sourceMethodName")%]([%=hash.get("source").~fullName%] master,  [%=hash.get("target").~fullName%] detail){
            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation();
            command.setMaster ( ([%=masterType.~fullName%]Proxy)master );
            command.setDetail( ([%=detailType.~fullName%]Proxy)detail );
            command.setRelationType("Many2Many");
            command.setMasterProperty("[%=hash.get("sourceMethodName")%]");
            command.setDetailProperty("[%=hash.get("targetMethodName")%]");
            return command;
       }
     [%
     }
     %]
     private org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%]List<[%=hash.get("target").~fullName%]> [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
     
     public  java.util.List<[%=hash.get("target").~fullName%]> get[%=hash.get("sourceMethodName")%][%=self.accessorType(lazy)%](){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }

        if (  [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] == null ){
            [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%] = 
         new org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%]List<[%=hash.get("target").~fullName%]>( [%=hash.get("target").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.Direct) {
            
          private static final long serialVersionUID = [%=util.serialVersionUID()%]L;
            
           [%
	          if  (lazy){
	          %][%=self.many2ManySrcLazyGetMethod(recipe,ingredient,model_mapper, hash.get("source"),hash.get("sourceMethodName") )%][%
	          }
           %]             
            
            @Override
            public void add(int i , [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%]){
           [%
	          if  (lazy){
	        %]
                 get[%=hash.get("sourceMethodName")%]Eager()	.add(i,[%=hash.get("sourceProperty")%]);
	             super.add( i, [%=hash.get("sourceProperty")%]);
	        [%  
	          }else{
           %]             
		       String session = UUID.randomUUID().toString();
		        try {
			       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
		           if ( [%=hash.get("sourceProperty")%] != null && ( [%=hash.get("sourceProperty")%].getAttached() == null || ![%=hash.get("sourceProperty")%].getAttached())){
                       try{ 
  		                     repository.insert([%=hash.get("sourceProperty")%], [%=hash.get("target").~fullName%].class);
						} catch (RepositoryException e) {
							throw new RuntimeException(e);
						}
		           }
		           if (getAttached() == null || !getAttached()){
	                   try{
	                     repository.insert([%=hash.get("source").~fullName%]Proxy.this,[%=hash.get("source").~fullName%].class);
						} catch (RepositoryException e) {
							throw new RuntimeException(e);
						}
		           }
                    org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = add[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%]Proxy.this, [%=hash.get("sourceProperty")%]);
					command.setStackProvider(localStackProvider);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
	                     super.add( i, [%=hash.get("sourceProperty")%]);
		                 if ( getAttached() != null   && getAttached() ){
		                    repository.getStackProvider().get().addCommands(changes);
		                 }
                    }
              }catch(Exception e){
	              throw new RuntimeException(e);
		      } finally {
			     removeLocalStackProvider(session);
		      }
             [%
             }
             %]	          
            }
            
            @Override
            public boolean remove( Object  obj){
                 [%=hash.get("target").~fullName%] [%=hash.get("sourceProperty")%] = ( [%=hash.get("target").~fullName%])obj;
                  org.tura.platform.repository.proxy.access.DelStruc valid = null;
		          try {
	                     valid = super.isRemovable([%=hash.get("sourceProperty")%]);
	                     if ( valid.isRemovable()  && valid.getIndex() != -1){
	                            this.remove(valid.getIndex());
	                            return true;
	                     }
	                  }catch(Exception e){
	                    throw new RuntimeException(e);
	                  }                     
                     if ( valid.isRemovable()  && valid.getIndex() == -1){
		                String session = UUID.randomUUID().toString();
		                try {
					       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%]Proxy.this, [%=hash.get("sourceProperty")%]);
							command.setStackProvider(localStackProvider);
		                    if (command.prepare()){
			                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
			                     localStackProvider.get().commit();
				                 if ( getAttached() != null   && getAttached() ){
				                    repository.getStackProvider().get().addCommands(changes);
				                 }
		                    }
	                        return true;
		                  }catch(Exception e){
		                    throw new RuntimeException(e);
						  } finally {
								removeLocalStackProvider(session);
						  }
                     }
                     return false;
            }                
            

               @Override
               public [%=hash.get("target").~fullName%] remove(int index) {
           [%
	          if  (lazy){
	        %]
	             super.remove( index  );
                 return get[%=hash.get("sourceMethodName")%]Eager().remove(index);
	        [%  
	          }else{
           %]             
		       String session = UUID.randomUUID().toString();
		        try {
			       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                    org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("sourceMethodName")%]( [%=hash.get("source").~fullName%]Proxy.this,get(index));
					command.setStackProvider(localStackProvider);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
	                     super.remove( index);
		                 if ( getAttached() != null   && getAttached() ){
		                    repository.getStackProvider().get().addCommands(changes);
		                 }
                    }
                    return null;
              }catch(Exception e){
                throw new RuntimeException(e);
		      } finally {
			     removeLocalStackProvider(session);
		      }
	        [%  
	          }
           %]             
                
            }
			@Override
			public RepoKeyPath getParentKeyPath() {
				return [%=hash.get("source").~fullName%]Proxy.this.getCpaPath();
			}

			@Override
			public String getProperty() {
				return "[%=self.~rel_uid%]";
			}
            
            };
        }
        return  [%=hash.get("sourceProperty")%][%=self.accessorType(lazy)%];
     }
     [%
     }else{
     %]
     [%
     }
}


@template
operation type::Assosiation one2oneTrgCopyField(recipe,ingredient,model_mapper){
   var hash = self.targetSideNamesCalculation();
   var  lazy = self.isLazy();
   if ( self.isLazy()){
   %]
    this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject;
    this.[%=hash.get("targetProperty")%][%=self.accessorType(false)%]SingleObject = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(false)%]SingleObject;
   [%
   }else{
   %]
    this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject;
   [%
   }     
}

@template
operation type::Assosiation one2oneTrg(recipe,ingredient,model_mapper){
     var hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.get("source").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
     @Override
     public void set[%=hash.get("targetMethodName")%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
              this.set[%=hash.get("targetMethodName")%]Eager([%=hash.get("targetProperty")%]); 
     }

     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%] (){
          if (inMemory ) {
               return this.get[%=hash.get("targetMethodName")%]Eager();
          } else{
               return this.get[%=hash.get("targetMethodName")%]Lazy();
          }
     }
     
     public  void clean[%=hash.get("targetMethodName")%] () throws  java.io.IOException{
        if  ( [%=hash.get("targetProperty")%]EagerSingleObject !=  null){
            [%=hash.get("targetProperty")%]EagerSingleObject.close();
            [%=hash.get("targetProperty")%]EagerSingleObject  = null;
        }
        if  ( [%=hash.get("targetProperty")%]LazySingleObject != null){
            [%=hash.get("targetProperty")%]LazySingleObject.close();
            [%=hash.get("targetProperty")%]LazySingleObject =  null;
        }
     }
     
   [%
   
     %][%=self.one2oneTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.one2oneTrgMethodBlock(recipe,ingredient,model_mapper,true)%][%
   }else{
   %]
     @Override
     public void set[%=hash.get("targetMethodName")%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
              this.set[%=hash.get("targetMethodName")%]Eager([%=hash.get("targetProperty")%]); 
     }

     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%] (){
             return this.get[%=hash.get("targetMethodName")%]Eager();
     }
     
     public  void clean[%=hash.get("targetMethodName")%]() throws  java.io.IOException {
        if  ( [%=hash.get("targetProperty")%]EagerSingleObject !=  null){
            [%=hash.get("targetProperty")%]EagerSingleObject.close();
            [%=hash.get("targetProperty")%]EagerSingleObject  = null;
        }
     }
     
   [%   
     %][%=self.one2oneTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
   }
}


@template
operation type::Assosiation one2oneTrgMethodBlock(recipe,ingredient,model_mapper,lazy){

     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     var relationType = "Opposite";
     
     %]
     private org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%][%=self.internalType()%]SingleObject<[%=hash.get("source").~fullName%]>  [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject;
     [%
        if (masterType.uid == self.target.uid ){
          relationType = "Direct";
	     if  (lazy){
	           %]
	           [%=self.one2oneTrgLazyGetMethod(hash,relationType,masterType)%]
	           [%
	     }else{
	     
     %]
     public static org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation rm[%=hash.get("targetMethodName")%]([%=hash.get("target").~fullName%] master , [%=hash.get("source").~fullName%]  detail  ){
          org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation();
          command.setMaster(([%=hash.get("target").~fullName%]Proxy)master);
          command.setDetail(([%=hash.get("source").~fullName%]Proxy)detail);
          command.setRelationType("One2One");
          command.setMasterProperty("[%=hash.get("targetMethodName")%]");
          command.setDetailProperty("[%=hash.get("sourceMethodName")%]");
          return command;
     }
     
     public static org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation add[%=hash.get("targetMethodName")%]([%=hash.get("target").~fullName%] master , [%=hash.get("source").~fullName%]  detail  ){
          org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation();
          command.setMaster(([%=hash.get("target").~fullName%]Proxy)master);
          command.setDetail(([%=hash.get("source").~fullName%]Proxy)detail);
          command.setRelationType("One2One");
          command.setMasterProperty("[%=hash.get("targetMethodName")%]");
          command.setDetailProperty("[%=hash.get("sourceMethodName")%]");
          return command;
     }
     [% 
	     
	        if ( self.isInternal()){
	           %] Should not be here [%
	        }else{
	           %]
	           [%=self.one2oneTrgEagerGetMethod(hash,relationType)%]
	           [%
	        }
	     }
     }else{
	     if  (lazy){
	           %]
	           [%=self.one2oneTrgLazyGetMethod(hash,relationType,masterType)%]
	           [%
	     }else{
	        if ( self.isInternal()){
	           %]
	           [%=self.one2oneTrgEagerInternalOppositeGetMethod(hash)%]
	           [%
	        }else{
	           %]
	           [%=self.one2oneTrgEagerGetMethod(hash,relationType)%]
	           [%
	        }
	     }
     }
     
     if (not lazy){
     %]
     private void set[%=hash.get("targetMethodName")%][%=self.accessorType(lazy)%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
     [%
        if (masterType.uid == self.target.uid ){
        %]
		   String session = UUID.randomUUID().toString();
	           [%
	            if (not hash.get("containment")){
	           %]
	           if ( [%=hash.get("targetProperty")%] != null && ( [%=hash.get("targetProperty")%].getAttached() == null || ![%=hash.get("targetProperty")%].getAttached())){
                    try{
	                   repository.insert([%=hash.get("targetProperty")%], [%=hash.get("source").~fullName%].class);
					} catch (RepositoryException e) {
						throw new RuntimeException(e);
					}
	           }
	           if (getAttached() == null || !getAttached()){
	              try{ 
	                  repository.insert([%=hash.get("target").~fullName%]Proxy.this, [%=hash.get("target").~fullName%].class);
					} catch (RepositoryException e) {
						throw new RuntimeException(e);
					}
	           }
              try{
	           [%
	            }else{
	            %]
	         Boolean saveAttached = false;
              try{
				    if ( [%=hash.get("targetProperty")%] != null){
				       saveAttached = ((ObjectControl)[%=hash.get("targetProperty")%]).getAttached();
                      ((ObjectControl)[%=hash.get("targetProperty")%]).setAttached(this.getAttached());
				    }
	            [%
	            }
	           %]        
			   ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
               if(([%=hash.get("source").~fullName%]Proxy)(this.get[%=hash.get("targetMethodName")%]Eager()) != null){
	                org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("targetMethodName")%]([%=hash.get("target").~fullName%]Proxy.this ,this.get[%=hash.get("targetMethodName")%]());
				    command.setStackProvider(localStackProvider);
	                command.prepare();
                }
        
                   if ([%=hash.get("targetProperty")%] != null){
                      org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command2 = add[%=hash.get("targetMethodName")%]([%=hash.get("target").~fullName%]Proxy.this ,[%=hash.get("targetProperty")%]);
				      command2.setStackProvider(localStackProvider);
                      command2.prepare();
                   }
	               java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	               if (changes.size() != 0){
	                     localStackProvider.get().commit();
		                 if ( this.getAttached() != null   && this.getAttached() ){
		                    repository.getStackProvider().get().addCommands(changes);
		                 }
	               }
                   
          }catch(Exception e){
		    if ( [%=hash.get("targetProperty")%] != null){
              ((ObjectControl)[%=hash.get("targetProperty")%]).setAttached(saveAttached);
		    }
            throw new RuntimeException(e);
			} finally {
				removeLocalStackProvider(session);
			}
        [%
        }else{
        %]
           [%=hash.get("targetProperty")%].set[%=hash.get("sourceMethodName")%](this);
        [%
        
        }
     
     %]
      }
     [%  
     }
}

@template
operation type::Assosiation one2oneTrgEagerGetMethod(hash,relationType){
      var util = new Native('org.tura.metamodel.commons.Util');
%]
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%]Eager(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
        if ([%=hash.get("targetProperty")%]EagerSingleObject == null){
                [%=hash.get("targetProperty")%]EagerSingleObject =  
				new org.tura.platform.repository.proxy.access.EagerSingleObject<[%=hash.get("source").~fullName%]>([%=hash.get("source").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.[%=relationType%]);        
        }
        return [%=hash.get("targetProperty")%]EagerSingleObject.get(this.getCpaPath(),"[%=self.~rel_uid%]");
     }
[%
}


@template
operation type::Assosiation one2oneTrgLazyGetMethod(hash,relationType,masterType){
      var util = new Native('org.tura.metamodel.commons.Util');
%]
     private [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%]Lazy(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
     
        if ([%=hash.get("targetProperty")%]LazySingleObject == null){
                [%=hash.get("targetProperty")%]LazySingleObject =  
				new org.tura.platform.repository.proxy.access.LazySingleObject<[%=hash.get("source").~fullName%]>([%=hash.get("source").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.[%=relationType%]){

                   private static final long serialVersionUID = [%=util.serialVersionUID()%]L;

					public  List<org.tura.platform.datacontrol.commons.OrderCriteria> getLazyObjectOrderCriteria(){
					      return new java.util.ArrayList<>();
					}
				
					public  List<org.tura.platform.datacontrol.commons.SearchCriteria> getLazyObjectSearchCriteria(){
					      java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search =  new java.util.ArrayList<>();
						  [%
							         for (lnk in self.links){
							         %]
		                   search.add( new org.tura.platform.datacontrol.commons.SearchCriteria("[%=util.mergeAndUnCapitalize(lnk.masterField.name)%]",com.octo.java.sql.exp.Operator.EQ.name(),getTransient[%=util.mergeAndCapitalize(lnk.detailField.name)%](),[%=lnk.masterField.typeRef.~fullName%].class.getName()));
							         [%
							         }
						 %]					      
					      return search;
					}
				};  				        
        }
        return [%=hash.get("targetProperty")%]LazySingleObject.get(this.getCpaPath(),"[%=self.~rel_uid%]");
     }
[%
}
@template
operation type::Assosiation one2oneTrgEagerInternalOppositeGetMethod(hash){
      var util = new Native('org.tura.metamodel.commons.Util');
%]
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%]Eager(){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
        if ([%=hash.get("targetProperty")%]EagerSingleObject == null){
                [%=hash.get("targetProperty")%]EagerSingleObject =  
				new org.tura.platform.repository.proxy.access.EagerInternalSingleObject<[%=hash.get("source").~fullName%]>([%=hash.get("source").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.Opposite);
        }
        return [%=hash.get("targetProperty")%]EagerSingleObject.getTop(getCpaPath().parent());
     }
[%
}

@template
operation type::Assosiation one2manyTrgCopyField(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var hash = self.targetSideNamesCalculation();
     var  lazy = self.isLazy();
     if (masterType.uid == self.target.uid ){
     %]   Should not have this !!!!  [%
     }else{
	   if ( self.isLazy()){
	   %]
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject;
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(false)%]SingleObject = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(false)%]SingleObject;
	   [%
	   }else{
	   %]
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject  = proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject;
	   [%
	   }     
   }
}


@template
operation type::Assosiation one2manyTrg(recipe,ingredient,model_mapper){
     var hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.get("source").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
     @Override
     public void set[%=hash.get("targetMethodName")%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
              this.set[%=hash.get("targetMethodName")%]Eager([%=hash.get("targetProperty")%]); 
     }

     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%] (){
          if (inMemory ) {
               return this.get[%=hash.get("targetMethodName")%]Eager();
          } else{
               return this.get[%=hash.get("targetMethodName")%]Lazy();
          }
     }
     
     public void clean[%=hash.get("targetMethodName")%]()  throws  java.io.IOException{
         if (  [%=hash.get("targetProperty")%]EagerSingleObject != null){
               [%=hash.get("targetProperty")%]EagerSingleObject.close();
               [%=hash.get("targetProperty")%]EagerSingleObject = null;
         }
         if (  [%=hash.get("targetProperty")%]LazySingleObject != null){
               [%=hash.get("targetProperty")%]LazySingleObject.close();
               [%=hash.get("targetProperty")%]LazySingleObject  = null;
         }
     }  
   [%
   
     %][%=self.one2manyTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.one2manyTrgMethodBlock(recipe,ingredient,model_mapper,true)%][%
   }else{
   %]
     @Override
     public void set[%=hash.get("targetMethodName")%] ([%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
              this.set[%=hash.get("targetMethodName")%]Eager([%=hash.get("targetProperty")%]); 
     }

     @Override
     public [%=hash.get("source").~fullName%] get[%=hash.get("targetMethodName")%] (){
             return this.get[%=hash.get("targetMethodName")%]Eager();
     }
     
     public void clean[%=hash.get("targetMethodName")%]() throws  java.io.IOException{
         if (  [%=hash.get("targetProperty")%]EagerSingleObject != null){
               [%=hash.get("targetProperty")%]EagerSingleObject.close();
               [%=hash.get("targetProperty")%]EagerSingleObject  = null;
         }
     }  
     
   [%   
     %][%=self.one2manyTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
   }

}


@template
operation type::Assosiation one2manyTrgMethodBlock(recipe,ingredient,model_mapper,lazy){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     
     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.target.uid ){
     %]   Should not have this !!!!  [%
     }else{
     %]
     private org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%][%=self.internalType()%]SingleObject<[%=hash.get("source").~fullName%]>  [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]SingleObject ;

    [%
	     if  (lazy){
	           %]
	           [%=self.one2oneTrgLazyGetMethod(hash,"Opposite",masterType)%]
	           [%
	     }else{
	        if ( self.isInternal()){
	           %]
	           [%=self.one2oneTrgEagerInternalOppositeGetMethod(hash)%]
	           [%
	        }else{
	           %]
	           [%=self.one2oneTrgEagerGetMethod(hash,"Opposite")%]
	           [%
	        }
	     }    
	 if ( not lazy){    
	    %]
	     private void set[%=hash.get("targetMethodName")%][%=self.accessorType(lazy)%]( [%=hash.get("source").~fullName%]  [%=hash.get("targetProperty")%]){
	      [%=hash.get("targetProperty")%].get[%=hash.get("sourceMethodName")%]().add(this);
	     }
	     [%
     }
    } 
}


@template
operation type::Assosiation many2manyTrgCopyField(recipe,ingredient,model_mapper){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var hash = self.targetSideNamesCalculation();
     var  lazy = self.isLazy();
     if (masterType.uid == self.target.uid ){
     %]
     [%
     }else{
       var lazy = self.isLazy();
	   if ( self.isLazy()){
	   %]
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]= proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%];
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(false)%]= proxy.[%=hash.get("targetProperty")%][%=self.accessorType(false)%];
	   [%
	   }else{
	   %]
	   this.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%]= proxy.[%=hash.get("targetProperty")%][%=self.accessorType(lazy)%];
	   [%
	   }
   }
}


@template
operation type::Assosiation many2manyTrg(recipe,ingredient,model_mapper){
     var hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     hash.get("source").mappingType2Java(recipe,ingredient);

   if ( self.isLazy()){
   %]
     public java.util.List<[%=hash.get("source").~fullName%]> get[%=hash.get("targetMethodName")%](){
          if (inMemory) {
              return get[%=hash.get("targetMethodName")%]Eager();
          }else{
              return get[%=hash.get("targetMethodName")%]Lazy();
          }        
     }
     
     public  void  clean[%=hash.get("targetMethodName")%]()throws  java.io.IOException{
          if ( [%=hash.get("targetProperty")%]Eager != null  ){
               [%=hash.get("targetProperty")%]Eager.close();
               [%=hash.get("targetProperty")%]Eager=null;
          }
          if ( [%=hash.get("targetProperty")%]Lazy != null  ){
               [%=hash.get("targetProperty")%]Lazy.close();
               [%=hash.get("targetProperty")%]Lazy=null;
          }
     }
   [%
     %][%=self.many2manyTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
     %][%=self.many2manyTrgMethodBlock(recipe,ingredient,model_mapper,true)%][%
   
   }else{
   %]
     public java.util.List<[%=hash.get("source").~fullName%]> get[%=hash.get("targetMethodName")%](){
              return get[%=hash.get("targetMethodName")%]Eager();
     }
     
     public  void  clean[%=hash.get("targetMethodName")%]()throws  java.io.IOException{
          if ( [%=hash.get("targetProperty")%]Eager != null  ){
               [%=hash.get("targetProperty")%]Eager.close();
               [%=hash.get("targetProperty")%]Eager=null;
          }
     }     
   [%
     %][%=self.many2manyTrgMethodBlock(recipe,ingredient,model_mapper,false)%][%
   }

}


@template
operation type::Assosiation many2manyTrgMethodBlock(recipe,ingredient,model_mapper,lazy){
     var hash = self.findTypeOfAssosiation(model_mapper);
     var masterType =   hash.get("masterType");
     var detailType = hash.get("detailType");
     var property =  hash.get("property");
     var suffix="";
     if (masterType.~class == detailType.~class ){
        suffix="Detail";
     }
     var containment = "";
     if (hash.get("containment")){
        containment = "Containment";
     }
     

     hash = self.targetSideNamesCalculation();
     var util = new Native('org.tura.metamodel.commons.Util');
     
     hash.get("source").mappingType2Java(recipe,ingredient);
     if (masterType.uid == self.target.uid ){
     %]
     [%
     }else{
       if (not lazy){
     %]
     private org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation add[%=hash.get("targetMethodName")%]( [%=detailType.~fullName%]  master, [%=masterType.~fullName%] detail){
           org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation();
           command.setMaster( ([%=detailType.~fullName%]Proxy) master);
           command.setDetail(  ([%=masterType.~fullName%]Proxy) detail);
           command.setRelationType("Many2Many");
           command.setMasterProperty("[%=hash.get("targetMethodName")%]");
           command.setDetailProperty("[%=hash.get("sourceMethodName")%]");
           return command;
     }
            
     private org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation rm[%=hash.get("targetMethodName")%]([%=detailType.~fullName%]  master, [%=masterType.~fullName%] detail){
           org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = new org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation();
           command.setMaster( ([%=detailType.~fullName%]Proxy) master);
           command.setDetail(  ([%=masterType.~fullName%]Proxy) detail);
           command.setRelationType("Many2Many");
           command.setMasterProperty("[%=hash.get("targetMethodName")%]");
           command.setDetailProperty("[%=hash.get("sourceMethodName")%]");
           return command;
     }
     [%
     }
     %]
     private org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%]List<[%=hash.get("source").~fullName%]> [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%];
     
     public  java.util.List<[%=hash.get("source").~fullName%]> get[%=hash.get("targetMethodName")%][%=self.accessorType(lazy)%](){
         if ( this.getObject()== null) {
	         throw new RuntimeException("No object found");
         }
        if (  [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%] == null){ 
          [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%] = 
         new org.tura.platform.repository.proxy.access.[%=self.accessorType(lazy)%]List<[%=hash.get("source").~fullName%]>( [%=hash.get("source").~fullName%].class,storageProvider,repository,org.tura.platform.repository.core.RelationType.Opposite) {
            private static final long serialVersionUID = [%=util.serialVersionUID()%]L;
            
           [%
	          if  (lazy){
	          %][%=self.many2ManyTrgLazyGetMethod(recipe,ingredient,model_mapper, hash.get("target"),hash.get("targetMethodName") )%][%
	          }
           %]       
                 
            @Override
            public void add(int i , [%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]){
		      String session = UUID.randomUUID().toString();
               try{
			           if ( [%=hash.get("targetProperty")%] != null && ( [%=hash.get("targetProperty")%].getAttached() == null || ![%=hash.get("targetProperty")%].getAttached())){
                           try{
			                  repository.insert([%=hash.get("targetProperty")%],  [%=hash.get("source").~fullName%] .class);
							} catch (RepositoryException e) {
								throw new RuntimeException(e);
							}
			           }
			           if (getAttached() == null || !getAttached()){
			               try{
			                  repository.insert( [%=hash.get("target").~fullName%]Proxy.this, [%=hash.get("target").~fullName%].class);
							} catch (RepositoryException e) {
								throw new RuntimeException(e);
							}
			           }
			         ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                       org.tura.platform.repository.operation.Add[%=containment%]ObjectOperation command = add[%=hash.get("targetMethodName")%]( [%=detailType.~fullName%]Proxy.this, [%=hash.get("targetProperty")%]);
			           command.setStackProvider(localStackProvider);
                        if (command.prepare()){
		                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
		                     localStackProvider.get().commit();
	                         super.add( i, [%=hash.get("targetProperty")%]);
			                 if ( getAttached() != null   && getAttached() ){
			                    repository.getStackProvider().get().addCommands(changes);
			                 }
                        }
                  }catch(Exception e){
		              throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
            }

            @Override
            public boolean remove( Object obj){
                   [%=hash.get("source").~fullName%] [%=hash.get("targetProperty")%]  = ( [%=hash.get("source").~fullName%])obj; 
                  org.tura.platform.repository.proxy.access.DelStruc valid = null;
		          try {
	                     valid = super.isRemovable([%=hash.get("targetProperty")%]);
	                     if ( valid.isRemovable()  && valid.getIndex() != -1){
	                            this.remove(valid.getIndex());
	                            return true;
	                     }
	                  }catch(Exception e){
	                    throw new RuntimeException(e);
	                  }                     
                     if ( valid.isRemovable()  && valid.getIndex() == -1){
		                String session = UUID.randomUUID().toString();
		                try {
					       ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                            org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("targetMethodName")%]([%=detailType.~fullName%]Proxy.this, [%=hash.get("targetProperty")%]);
							command.setStackProvider(localStackProvider);
		                    if (command.prepare()){
			                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
			                     localStackProvider.get().commit();
				                 if ( getAttached() != null   && getAttached() ){
				                    repository.getStackProvider().get().addCommands(changes);
				                 }
		                    }
	                        return true;
		                  }catch(Exception e){
		                    throw new RuntimeException(e);
						  } finally {
								removeLocalStackProvider(session);
						  }
                     }
                     return false;
            }                


               @Override
               public [%=hash.get("source").~fullName%] remove(int index) {
		        String session = UUID.randomUUID().toString();
                try{
			        ProxyCommadStackProvider localStackProvider = getLocalStackProvider(session);
                    org.tura.platform.repository.operation.Remove[%=containment%]ObjectOperation command = rm[%=hash.get("targetMethodName")%]([%=detailType.~fullName%]Proxy.this, get(index));
			        command.setStackProvider(localStackProvider);
                    if (command.prepare()){
	                     java.util.List<Object> changes = localStackProvider.get().getListOfCommand();
	                     localStackProvider.get().commit();
	                     super.remove( index);
		                 if ( getAttached() != null   && getAttached() ){
		                    repository.getStackProvider().get().addCommands(changes);
		                 }
                    }
                    return null;
                  }catch(Exception e){
                    throw new RuntimeException(e);
				} finally {
					removeLocalStackProvider(session);
				}
            }
            
			@Override
			public RepoKeyPath getParentKeyPath() {
				return [%=detailType.~fullName%]Proxy.this.getCpaPath();
			}

			@Override
			public String getProperty() {
				return "[%=self.~rel_uid%]";
			}
            
           };
        }
        return [%=hash.get("targetProperty")%][%=self.accessorType(lazy)%] ;
     }
     [%
     }
}


operation type::Assosiation  joinTable(src,target,model_mapper){
      var util = new Native('org.tura.metamodel.commons.Util');
	  
	  var table = "RL_"+src.toUpperCase()+"_"+target.toUpperCase();
	  
      if (self.source.findClassifier(  util.getHint(model_mapper,"Many2ManyTable" ))){
         table = self.source.~hintDetails;
      }
      
      return table;
}

%]