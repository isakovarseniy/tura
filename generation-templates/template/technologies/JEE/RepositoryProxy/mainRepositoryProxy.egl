[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
import "tura:/generation-templates/template/commons/categorizedUtil.eol";
import "tura:/generation-templates/template/commons/assosiation.eol";
import "tura:/generation-templates/template/technologies/JEE/RepositoryProxy/proxyClass.egl";

     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var types = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     var n= new Native("org.tura.metamodel.generation.NullFormatter"); 
     var templateStore = new Native('java.util.HashMap');
     var mhash = new Native('java.util.HashMap');

     var tp1 = util.runQuery(model_mapper,"Query model classes",model_mapper);
     if ( tp1 <> null){
        types.addAll(tp1);
     }
     var tp2 = util.runQuery(model_mapper,"Query Entity from domain package",model_mapper);
     if ( tp2 <> null){
        types.addAll(tp2);
     }     
 
      if (types <> null and types.size <> 0 ){
        var typeCollection = new Native("java.util.ArrayList");

	    for (type in types){
	       type.collectType(typeCollection,model_mapper,null,null,null);
	    }

      var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  

      for(type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
        
        type.mappingType2Java(recipe,ingredient);

        var interfaces = new Native('java.util.ArrayList');
         var pkg = type.eContainer();
        //var general = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.isImplements(model_mapper));
        var general = pkg.relationships->select(t|t.isTypeOf(type::Generalization) and  t.source.uid = type.uid and t.isImplements(model_mapper));
        for ( rel in general ){
	           var i = rel.target.unwrap();
	           i.mappingType2Java(recipe,ingredient);
	           interfaces.add(i);
        }

       if (type.findClassifier(util.getHint(model_mapper,"Domain Interface")) ){
           continue;
        }
        

	    hash.put("tp",type);
	    hash.put("recipe",recipe);
	    hash.put("ingredient",ingredient);
	    hash.put("component",component);
	    hash.put("model_mapper",model_mapper);
	    hash.put("path",path);
	    hash.put("interfaces",interfaces);
	    hash.put("mhash",mhash);
		    
	    util.populateTechnologies(hash,model_mapper);

	    %][%=proxyClass(hash)%][%
		out.formatWith(f);
	    util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class+"Proxy.java",out.toString());   
		out.formatWith(n);
		
      }

	    hash.remove("type");
	    hash.put("typeCollection",typeCollection);
	    
	    
	    util.populateTechnologies(hash,model_mapper);
		
	    var repository : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JEE/RepositoryProxy/proxyRepository.egl",hash,TemplateFactory);
	    repository.setFormatter(f);
	    var buffer = repository.process();
	    util.saveFile( path+component.basePackage.replaceAll("\\.","\\/"), "ProxyRepository.java",buffer);

	    
	    var repository : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JEE/RepositoryProxy/InstantiatorProxyRepository.egl",hash,TemplateFactory);
	    repository.setFormatter(f);
	    var buffer = repository.process();
	    util.saveFile( path+component.basePackage.replaceAll("\\.","\\/"), "ProxyRepositoryInstantiator.java",buffer);   
	    
	    hash.put("configuration",configuration);
	    hash.remove("tp");

	    
	    var cparepository : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JEE/RepositoryProxy/CPA/repository.egl",hash,TemplateFactory);
	    var buffer = cparepository.process();
	    
	       
    }
    
  %]  