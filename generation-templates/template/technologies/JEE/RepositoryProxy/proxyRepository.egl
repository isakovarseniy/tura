[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2020 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
 import "tura:/generation-templates/template/commons/typeElementUtil.eol";
 import "tura:/generation-templates/template/commons/categorizedUtil.eol";
 import "tura:/generation-templates/template/commons/assosiation.eol";
  
  var util = new Native('org.tura.metamodel.commons.Util');
  
%]
package [%=component.basePackage%];

public class ProxyRepository implements org.tura.platform.repository.core.Repository,org.tura.platform.repository.core.ProxyFactory , java.io.Serializable {
	private static final long serialVersionUID = [%=util.serialVersionUID()%]L;
	private org.tura.platform.repository.core.Repository transport;
	private org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider;
	private static java.util.List <String> array;
	private String profile;
	
	
	public ProxyRepository(org.tura.platform.repository.core.Repository transport,org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider){
	   this.transport = transport;
	   this.stackProvider = stackProvider;
	}

	public ProxyRepository(org.tura.platform.repository.core.Repository transport,org.tura.platform.repository.proxy.ProxyCommadStackProvider stackProvider, String profile){
	   this.transport = transport;
	   this.stackProvider = stackProvider;
	   this.profile = profile;
	}


  public void setStackProvider(ProxyCommadStackProvider stackProvider) {
		this.stackProvider = stackProvider;
	}

    public String getProfile() {
		return profile;
	}

	public void setProfile(String profile) {
		this.profile = profile;
	}



	@Override
	public Object create(String objectClass) throws org.tura.platform.repository.core.RepositoryException {
        return factory( transport.create(objectClass),objectClass);
	}

	@Override
	public void insert(Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
	 if (  array.contains(objectClass) ){
	       try{
	           org.tura.platform.repository.operation.AddTopObjectOperation cmd = new  org.tura.platform.repository.operation.AddTopObjectOperation();
               cmd.setStackProvider(stackProvider);
               cmd.setProxy((org.tura.platform.repository.core.ObjectControl) obj);
               cmd.prepare();
               
		       org.tura.platform.repository.core.ObjectControl oc = (org.tura.platform.repository.core.ObjectControl) obj;
		       if ( oc.getLinkOperation() != null) {
		        	org.tura.platform.repository.operation.AddLinkOperation lo = oc.getLinkOperation();
		        	lo.setStackProvider(stackProvider);
		        	lo.prepare();
		       }
               
        	}catch(Exception e){
                throw new org.tura.platform.repository.core.RepositoryException(e);
        	}
            return;
	 }
	 else{
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
        }
    }    

	@Override
	public void remove(Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
	 if (  array.contains(objectClass) ){
	       try{
	           org.tura.platform.repository.operation.RemoveTopObjectOperation cmd = new  org.tura.platform.repository.operation.RemoveTopObjectOperation();
               cmd.setStackProvider(stackProvider);
               cmd.setProxy((org.tura.platform.repository.core.ObjectControl) obj);
               cmd.prepare();
        	}catch(Exception e){
                throw new org.tura.platform.repository.core.RepositoryException(e);
        	}
            return;
	 }
	 else{
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
        }
		
	}



    @SuppressWarnings("unchecked")
	@Override
    public org.tura.platform.repository.core.SearchResult  find(java.util.List<org.tura.platform.datacontrol.commons.SearchCriteria> searchCriteria,
        java.util.List<org.tura.platform.datacontrol.commons.OrderCriteria> orderCriteria, Integer startIndex,
        Integer endIndex, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
    	
    	java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> search = new java.util.ArrayList<org.tura.platform.datacontrol.commons.SearchCriteria> ();
    	search.addAll(searchCriteria);
    	if ( profile != null ){
    	  org.tura.platform.datacontrol.commons.ObjectProfileCriteria sc = new  org.tura.platform.datacontrol.commons.ObjectProfileCriteria(profile);
    	  search.add(sc);
    	}
    	
    	org.tura.platform.repository.core.SearchResult  result =  transport.find(search, orderCriteria, startIndex,endIndex, objectClass);
    	
    	@SuppressWarnings("rawtypes")
		java.util.List  list = new java.util.ArrayList();
    	for (Object obj : result.getSearchResult()){
    		list.add(factory(obj,objectClass));
    	}
        return new org.tura.platform.repository.core.SearchResult (list,result.getNumberOfRows());
    }
    
	@Override
	public Object find(Object pk, String objectClass) throws org.tura.platform.repository.core.RepositoryException {
        return transport.find(pk,objectClass);
	}
    
    
	@Override
    @SuppressWarnings("rawtypes")
	public List applyChanges(java.util.List changes) throws org.tura.platform.repository.core.RepositoryException {
	   try{
		List response = transport.applyChanges(stackProvider.getListOfCommand());
		stackProvider.clear();
		return response;
		}catch(Exception e){
		  throw new org.tura.platform.repository.core.RepositoryException(e);
		}
		
	}
	
	
	public Object factory( Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException{
	
	switch (objectClass){
	
[%
	for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
	
%] 
case "[%=type.~fullName%]": return new [%=type.~fullName%]Proxy(([%=type.~fullName%])obj,stackProvider);
[%	
	}
%]	
	
	}
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
	
	}
	
	static{
	array = new java.util.ArrayList<String>();
	
[%	
     for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
     
         var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
         var topObject = true;
	     for (rel in assosiations){
	        var hash = rel.findTypeOfAssosiation(model_mapper);
	        var masterType =   hash.get("masterType");
	        var detailType = hash.get("detailType");
	        var property =  hash.get("property");
            var containment = hash.get("containment");
     
        if (detailType.uid == type.uid  and   rel.type.toString() <> "Many2Many"  and containment){
           topObject = false;
        }
     }
     if (topObject ){
         %]
              array.add("[%=type.~fullName%]");
         [%
     }
     %]
     [%
     }
     %]

	
	}
	
	

}
