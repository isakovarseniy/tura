[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
 import "tura:/generation-templates/template/commons/typeElementUtil.eol";
 import "tura:/generation-templates/template/commons/categorizedUtil.eol";
 import "tura:/generation-templates/template/commons/assosiation.eol";
  
  var util = new Native('org.tura.metamodel.commons.Util');
  
%]
package [%=component.basePackage%];

public class ProxyRepository extends org.tura.platform.repository.cpa.CpaRepositoryImpl {

   private static final long serialVersionUID = 1L;

   private static java.util.List<String> topObjects;
   private static java.util.List<String> instantiable;
   private static java.util.List<String> notInstantiable;

	public ProxyRepository() {

	}	
	
	public  java.util.List<String> getTopObjects() {
		return topObjects;
	}
	
	public  java.util.List<String> getInstantiable() {
		return instantiable;
	}
    
	public  java.util.List<String> getNotInstantiable() {
		return notInstantiable;
	}    
    
	public Object factory( Object obj, String objectClass) throws org.tura.platform.repository.core.RepositoryException{
	
	switch (objectClass){
	
[%
	for (type in typeCollection){
	
       if (type.findClassifier(util.getHint(model_mapper,"Domain Interface")) ){
           continue;
        }
	
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
	
%] 
case "[%=type.~fullName%]": return new [%=type.~fullName%]Proxy(([%=type.~fullName%])obj,this,getStorageProvider());
[%	
	}
%]	
	
	}
        throw new org.tura.platform.repository.core.RepositoryException("Class is not supported");
	
	}
	
	static{
	topObjects = new java.util.ArrayList<String>();
	instantiable = new java.util.ArrayList<String>();
	notInstantiable= new java.util.ArrayList<String>();
	
[%	
     for (type in typeCollection){
        if (not type.~primaryKey.isDefined()  ){
           continue;
        }
        
       if (type.findClassifier(util.getHint(model_mapper,"Domain Interface")) ){
		%]
		       notInstantiable.add("[%=type.~fullName%]");
		[%     
           continue;
        }
     
         var topObject = type.isTopObject();
%]
       instantiable.add("[%=type.~fullName%]");
[%     
     
     if (topObject ){
         %]
              topObjects.add("[%=type.~fullName%]");
         [%
     }
     %]
     [%
     }
     %]

	
	}
	
	

}
