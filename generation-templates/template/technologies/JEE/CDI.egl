[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
import "tura:/generation-templates/template/technologies/JSE/datacontrol/topObjectPager.egl";
import "tura:/generation-templates/template/technologies/JSE/datacontrol/connectedPager.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/triggerProducer.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/parameterProducer.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/commandstack.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/commandstackProvider.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/cpaStorageProducer.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/cpaStorageProvider.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/cpaStorageProvider.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/cdiClientRegistry.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/proxyRepositoryProducer.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/datacontrol.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/treedatacontrol.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/beanFactory.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/factoryInitProducer.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/elresolver.egl";
import "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/beans-xml.egl";

 @template
operation  service_producer_generation(hash) {

     cdi_service_producer_generation(hash);

  }

 @template
operation  datacontrolgeneration(hash) {

     var util = new Native('org.tura.metamodel.commons.Util');
     

    var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
    var x = new Native("org.eclipse.epsilon.egl.formatter.language.XmlFormatter"); 
    var n= new Native("org.tura.metamodel.generation.NullFormatter"); 
    
    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var  component = hash.get("component");
    var  model_mapper = hash.get("model_mapper");
    var javaPath = hash.get("javaPath");
    var resourcePath = hash.get("resourcePath");
    var form = hash.get("form");    
    var uipackage = hash.get("uipackage");
        
    var collectStacks = new Native('java.util.HashMap'); 
        

    
    var buffer;
    util.populateTechnologies(hash,model_mapper);

     var controls =  form.datacontrols.controls;
     hash.put("controlSuffix","");     
     
     for (control in controls){
     
         hash.put("control",control);
    
	    var list = control.findAllClassifiers(util.getHint(model_mapper,"CommandStack"));
	    var suffix= "";
	    if ( list <> null and list.size() <> 0 ){
	         suffix = list.get(0).details;
	    }
         hash.put("controlSuffix",suffix);
         
         collectStacks.put( suffix,suffix);
    
         %][%=datacontrol(hash)%][%
		 out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , util.mergeAndCapitalize(control.name) + "DC.java",out.toString());   
		 out.formatWith(n);

         %][%=triggerProducer(hash)%][%
		 out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , util.mergeAndCapitalize(control.name) + "TriggerProducer.java",out.toString());   
		 out.formatWith(n);

         %][%=parameterProducer(hash)%][%
		 out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , util.mergeAndCapitalize(control.name) + "ParameterProducer.java",out.toString());   
		 out.formatWith(n);


        %][%=commandstack(component,uipackage, form,suffix)%][%
		 out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClientCommandStack" +util.mergeAndCapitalize(suffix) +".java",out.toString());   
		 out.formatWith(n);
	    
	    
         %][%=commandstackProvider(component,uipackage, form,suffix)%][%
         out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClientCommandStack" +util.mergeAndCapitalize(suffix) +"Provider.java",out.toString());   
		 out.formatWith(n);

        %][%=cpaStrorageProducer(component,uipackage, form,suffix)%][%
         out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClientCpaStorage" +util.mergeAndCapitalize(suffix) +"Producer.java",out.toString());   
		 out.formatWith(n);


         %][%=cpaStrorageProvider(component,uipackage, form,suffix)%][%
         out.formatWith(f);
         util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClientCpaStorage" +util.mergeAndCapitalize(suffix) +"Provider.java",out.toString());   
		 out.formatWith(n);


         %][%=clientRegistry(component,uipackage, form,suffix)%][%
          out.formatWith(f);
          util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClient"+  util.mergeAndCapitalize(suffix) +"Registry.java",out.toString());   
		  out.formatWith(n);


         %][%=proxyRepositoryProducer(component,uipackage, form,suffix)%][%
         out.formatWith(f);
          util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "CdiClientProxy" +util.mergeAndCapitalize(suffix) +"Producer.java",out.toString());   
		  out.formatWith(n);


         if (control.~treeRoot <> null){

           %][%=treedatacontrol(hash)%][%
		    out.formatWith(f);
            util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "TreeRoot"+util.mergeAndCapitalize(control.name) + "DC.java",out.toString());
            out.formatWith(n);
               
       }

       if (control.~pagerType == "topPager"){
            hash.put("type",control.baseType.typeRef);
            hash.put("objPackage",component.basePackage+"."+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"."+util.mergeAndCapitalize(form.name).toLowerCase()+".pager");

            %][%=topObjectPager(hash)%][%
		    out.formatWith(f);
            util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/pager/"  , util.mergeAndCapitalize(control.baseType.typeRef.~class) + "Pager.java",out.toString());   
		    out.formatWith(n);
       
       }else{
     
            hash.put("type",control.baseType.typeRef);
            hash.put("containment",control.~containment);
	        hash.put("parent",control.~parenType.typeRef);
	        hash.put("rel",control.~rel);
	        hash.put("property",control.~property);
            hash.put("objPackage",component.basePackage+"."+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"."+util.mergeAndCapitalize(form.name).toLowerCase()+".pager");
            hash.put("primaryKey", control.~masterControl.~keys);

            var masterType =  control.~parenType.typeRef;
            var rel = control.~rel;
           if (masterType.uid.equals(rel.source.uid)  ){
	            var h= rel.sourceSideNamesCalculation();
	            
	            hash.put("sourceMethodName",h.get("sourceMethodName"));
	            hash.put("targetMethodName",h.get("targetMethodName"));
	            
	            hash.put("sourceProperty",h.get("sourceProperty"));
	            hash.put("targetProperty",h.get("targetProperty"));
	        
			}
	        if (masterType.uid.equals(rel.target.uid)  ){
	            var h= rel.targetSideNamesCalculation();

	            hash.put("sourceMethodName",h.get("targetMethodName"));
	            hash.put("targetMethodName",h.get("sourceMethodName"));
	            
	            hash.put("sourceProperty",h.get("targetProperty"));
	            hash.put("targetProperty",h.get("sourceProperty") );
	        
	        }
           %][%=connectedPager(hash)%][%
		    out.formatWith(f);
            util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/pager/"  , control.~parenType.typeRef.~class+"2"+util.mergeAndCapitalize(control.baseType.typeRef.~class) + "Pager.java",out.toString());   
		    out.formatWith(n);
       } 
    }

	   %][%=beanxml()%][% 
	   out.formatWith(x);
	   util.saveFile( resourcePath+"/META-INF/"  , "beans.xml",out.toString());   
	   out.formatWith(n);

    %][%=elresolver(hash)%][%
	out.formatWith(f);
    util.saveFile( javaPath+"/commons/datacontrol/"  , "ELResolverImpl.java",out.toString());   
	out.formatWith(n);


    hash.put("bfSuffix", "");
    %][%=beanFactory(hash)%][%
	out.formatWith(f);
    util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/datacontrol/"  , "BeanFactory.java",out.toString());   
	out.formatWith(n);
	
	
	 %][%=factoryInitProducer(hash)%][%
	 out.formatWith(f);
	 util.saveFile( javaPath+"/"+util.mergeAndCapitalize(uipackage.name).toLowerCase()+"/"+util.mergeAndCapitalize(form.name).toLowerCase()+"/producer/"  , "FactoryInitializeTriggerProducer.java",out.toString());  
	 out.formatWith(n);

  }
%]
