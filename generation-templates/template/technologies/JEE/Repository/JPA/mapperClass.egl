[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
 [%
@template
operation mappers(hash){ 

      var util = new Native('org.tura.metamodel.commons.Util');
	  var t2model = hash.get("t2model");
	  var  t2view = hash.get("t2view");
	  var type = hash.get("type");
	  var recipe = hash.get("recipe");
	  var ingredient = hash.get("ingredient");
	  var component = hash.get("component");
	  var model_mapper = hash.get("model_mapper");
	  var path = hash.get("path");
 	  var alltypes = hash.get("alltypes");
      
 %]
 
 package [%=t2view.get(type).get("package")%].mapper;
 
 
 public class [%=t2view.get(type).get("class")%]Mapper extends org.tura.platform.repository.core.MapperHelper implements org.tura.platform.repository.core.Mapper, org.tura.platform.repository.persistence.PersistanceMapper{
 
     private static final long serialVersionUID = 1L;
     private org.tura.platform.repository.core.ProxyFactory proxyFactory;
			  
			
	public org.tura.platform.repository.core.ProxyFactory getProxyFactory() {
				return proxyFactory;
	}
			
	public void setProxyFactory(org.tura.platform.repository.core.ProxyFactory proxyFactory) {
				this.proxyFactory = proxyFactory;
	}
 
 
       	public Object getPKey(org.tura.platform.repository.core.RepoObjectKey objKey)throws org.tura.platform.repository.core.RepositoryException {
	    	try{
		      	[%=PKRepoObjectKey(type,"pk","objKey.getKey()",t2model.get(type).get("fullName"),recipe,ingredient)%]   
		      	return pk;
	    	}catch(Exception e){
	    		throw new org.tura.platform.repository.core.RepositoryException(e);
	    	}
      	
        }
 
         public org.tura.platform.repository.core.RepoObjectKey getRepoObjectKey(Object object) throws Exception{
          [%=t2view.get(type).get("fullName")%]  obj = ( [%=t2view.get(type).get("fullName")%])object;
          org.tura.platform.repository.core.RepoObjectKey key = new  org.tura.platform.repository.core.RepoObjectKey();
          key.setType("[%=t2view.get(type).get("fullName")%]");
          [%for ( field in type.~primaryKey){
		            field.typeRef.mappingType2Java(recipe,ingredient);
          %]
            if (obj.get[%=util.mergeAndCapitalize(field.name)%]() == null){
                throw new Exception("Object primary key [%=field.name%]  is null");
            }else{
           [%
             field.typeRef.mappingType2Java(recipe,ingredient);
           %]
            org.tura.platform.repository.core.FieldValue value = new org.tura.platform.repository.core.FieldValue("[%=util.mergeAndCapitalize(field.name)%]","[%=field.typeRef.~fullName%]",obj.get[%=util.mergeAndCapitalize(field.name)%]().toString());
           key.addValue(value);
           }
           [%}%]

          return key;
      }
 
 
       public Object unwrap(Object persistenceObject)  {
          return org.hibernate.Hibernate.unproxy(persistenceObject);
       }
 
       public org.tura.platform.repository.core.RepoKeyPath getPath(Object object) throws Exception{
          [%=t2view.get(type).get("fullName")%]  obj = ( [%=t2view.get(type).get("fullName")%])object;
      [%
         //var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid and t.internal);
         var pkg = type.eContainer();
         var assosiations = pkg.relationships->select(t|t.isTypeOf(type::Assosiation) and  t.target.uid = type.uid and t.target.uid <> t.source.uid and t.internal);
         if (assosiations.size() <> 0){
              for (rel in assosiations){
                 var hash = rel.targetSideNamesCalculation();
                 %]
                  if (obj.get[%=hash.get("targetMethodName")%]() != null){
                     org.tura.platform.repository.core.Mapper maper[%=t2view.get(rel.sourceFn()).get("class")%] = new [%=t2view.get(rel.sourceFn()).get("package")%].mapper.[%=t2view.get(rel.sourceFn()).get("class")%]Mapper();
                     org.tura.platform.repository.core.RepoKeyPath path = maper[%=t2view.get(rel.sourceFn()).get("class")%].getPath(obj.get[%=hash.get("targetMethodName")%]());   
                     path.addRepoObjectKey("[%=hash.get("sourceMethodName")%]" ,getRepoObjectKey(obj));
                     return path;
                  }             
                 [%
             }
             %]
               throw new Exception ("Object is not connected to the parent object");
             [%
             
         }else{
         %]
           org.tura.platform.repository.core.RepoKeyPath path = new org.tura.platform.repository.core.RepoKeyPath ();
           path.addRepoObjectKey(null,getRepoObjectKey(obj));
           return path;
         [%
         }
      %]
      }
 
 
 
       private Object find(String field, java.util.List<org.tura.platform.repository.core.FieldValue> list) throws Exception {
		for (org.tura.platform.repository.core.FieldValue f : list) {
			if (f.getName().equals(field)) {
				Class<?> clazz = Class.forName(f.getType());
				try {
					java.lang.reflect.Constructor<?> c = clazz.getConstructor(String.class);
					return c.newInstance(f.getValue());
		        }catch( NoSuchMethodException e) {
		        	return org.tura.platform.datacontrol.commons.Parser.parse(f.getValue(),clazz);
		        }
			}
		}
		throw new org.tura.platform.repository.core.RepositoryException("Could not find a field " + field);
	}
        
	@Override
	public String getCpaId(Object persistenceObject) {
		return null;
	}
		
      	public Object getPrimaryKey(Object persistenceObject){
			persistenceObject =    unwrap(persistenceObject);

	    [%=t2model.get(type).get("fullName")%] jpa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
      	
      	[%=PK(type,"pk","jpa",t2model.get(type).get("fullName"),recipe,ingredient)%]   
      	return pk;
      	}
      	
      	public void nillPrimaryKey(Object persistenceObject){
      	    persistenceObject =    unwrap(persistenceObject);
      	
	        [%=t2model.get(type).get("fullName")%] jpa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
      	
        	[%=nilPK(type,"jpa",model_mapper)%]   
      	}
      	
      	
      	public Object getPrimaryKeyFromRepositoryObject(Object repositoryObject){

	    [%=t2view.get(type).get("fullName")%] obj = ( [%=t2view.get(type).get("fullName")%]) repositoryObject;
      	
      	[%=PK(type,"pk","obj",t2model.get(type).get("fullName"),recipe,ingredient)%]   
      	return pk;
      	}      	
      	
      	
	    public Object copyFromPersistence2Repository(Object persistenceObject, Object repositoryObject){
			persistenceObject =    unwrap(persistenceObject);
	    
	    [%=t2model.get(type).get("fullName")%] jpa = ( [%=t2model.get(type).get("fullName")%]) persistenceObject;
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    
	    [%=stringPK(type,"key","jpa",t2model.get(type).get("fullName"))%]
	    
	      obj.setAttached(true);
          obj.setSerializationid(java.util.UUID.randomUUID().toString()+"||"+[%=t2view.get(type).get("fullName")%].class.getName());

	     [%=serializer(type,"jpa","obj",model_mapper,recipe,ingredient,null)%]
	     [%=copyLink(type,alltypes,"jpa","obj",model_mapper,recipe,ingredient)%]
	          
	    return obj;
	    
	    }
	    
   
	   public void differentiator(Object persistenceObject, Object repositoryObject ,  java.util.Map<Object, Object> context) throws org.tura.platform.repository.core.RepositoryException{
		  persistenceObject =    unwrap(persistenceObject);
	      [%=t2model.get(type).get("fullName")%] jpa  = ([%=t2model.get(type).get("fullName")%])persistenceObject;
	      [%=t2view.get(type).get("fullName")%] obj = ([%=t2view.get(type).get("fullName")%] )repositoryObject;


	      [%=serializer(type,"jpa","obj",model_mapper,recipe,ingredient,null)%]
	      [%=copyLink(type,alltypes,"jpa","obj",model_mapper,recipe,ingredient)%]

	    }	    
	    
	    public void copyPKFromPersistence2Repository(Object persistenceObject, Object repositoryObject){
			persistenceObject =    unwrap(persistenceObject);
	    [%=t2model.get(type).get("fullName")%] jpa =( [%=t2model.get(type).get("fullName")%] )persistenceObject;
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    
	    if ( obj instanceof org.tura.platform.repository.core.ObjectControl ){
     	  ((org.tura.platform.repository.core.ObjectControl) obj).setForcePKupdate(true);
	    }
	    
	     [%=serializerPK(type,"jpa","obj",model_mapper,recipe,ingredient,null)%]
	    
	    }
	    
	    	    public Object copyFromRepository2Persistence( Object repositoryObject){
	    
	    [%=t2model.get(type).get("fullName")%] jpa = new  [%=t2model.get(type).get("fullName")%] ();
	    [%=t2view.get(type).get("fullName")%] obj  = ( [%=t2view.get(type).get("fullName")%] ) repositoryObject;
	    

	    [%=serializer(type,"obj","jpa",model_mapper,recipe,ingredient,null)%]

	    return jpa;
	    
	    }
 
	@Override
	public Object copyFromRepository2Persistence(Object repositoryObject, java.util.Map<Object, Object> context) throws org.tura.platform.repository.core.RepositoryException {
		return null;
	}

	@Override
	public Object copyFromPersistence2Repository(Object persistenceObject, Object repositoryObject,java.util.Map<Object, Object> context)
			throws org.tura.platform.repository.core.RepositoryException {
		return null;
	}
	    
    public void put( java.util.Map<Object,Object> context, Object pk, Object type ){

    }
    public Object get( java.util.Map<Object,Object> context, Object pk, Object type ){
         return null;
    }    
	    
	    
 
 }
 [%}%]