[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
 [%
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
import "tura:/generation-templates/template/commons/categorizedUtil.eol";
import "tura:/generation-templates/template/commons/assosiation.eol";
import "tura:/generation-templates/template/technologies/JEE/Repository/repositoryCommon.egl";
import "tura:/generation-templates/template/technologies/JEE/Repository/enumeratorConverter.egl";
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');
     var t2view = new Native("java.util.HashMap"); 
     var t2model = new Native("java.util.HashMap");
     var  types = new Native('java.util.ArrayList');
     
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     var n= new Native("org.tura.metamodel.generation.NullFormatter"); 
     
     var tp1 = util.runQuery(model_mapper,"Query model classes",model_mapper);
     var tp2 = util.runQuery(model_mapper,"Query Enum from domain package",model_mapper);
     if ( tp1 <> null){
        types.addAll(tp1);
     }
     if ( tp2 <> null){
        types.addAll(tp2);
     }     


      if (types <> null and types.size <> 0 ){
      
        var typeCollection = new Native("java.util.ArrayList"); 
        for (type in types){
            if (type.isKindOf(type::Enumerator )){
             typeCollection.add(type);
            }
        }

        var resourcePath = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/resources/";  

        for(type in typeCollection){
           type.mappingType2Java(recipe,ingredient,'MODEL');
           var h = new Native("java.util.HashMap"); 
           h.put("class",type.~class);
           h.put("package",type.~package);
           h.put("fullName",type.~fullName);
           t2model.put(type,h);
         
           type.mappingType2Java(recipe,ingredient,'VIEW');
           var h = new Native("java.util.HashMap"); 
           h.put("class",type.~class);
           h.put("package",type.~package);
           h.put("fullName",type.~fullName);
           t2view.put(type,h);
        }        
 
        var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";
        
        for(type in typeCollection){

            hash.put("t2model",t2model);
            hash.put("t2view",t2view);
    
            hash.put("type",type);
            hash.put("recipe",recipe);
            hash.put("ingredient",ingredient);
            hash.put("component",component);
            hash.put("model_mapper",model_mapper);
            hash.put("path",path);
                
            util.populateTechnologies(hash,model_mapper);

             %][%=enumeratorConverter(hash)%][%
			out.formatWith(f);
            util.saveFile( path+t2view.get(type).get("package").replaceAll("\\.","\\/")+"/converter", t2view.get(type).get("class")+"Converter.java",out.toString());   
			out.formatWith(n);
          
        }        


      }

      
%]