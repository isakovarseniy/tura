[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2020 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
 import "tura:/generation-templates/template/commons/typeElementUtil.eol";
 import "tura:/generation-templates/template/commons/categorizedUtil.eol";
 import "tura:/generation-templates/template/commons/assosiation.eol";
 import "tura:/generation-templates/template/technologies/JEE/Repository/repositoryCommon.egl";

 ${percent}${end}
 [%
      var util = new Native('org.tura.metamodel.commons.Util');
      
 %]
 
 package [%=savepackage%];
 
 import org.tura.platform.repository.core.Registry;
 import org.tura.platform.repository.spa.SpaObjectRegistry;
 
 public class InitSPARepository{
 
     private Registry registry;
     private SpaObjectRegistry spaRegistry;
     
     public InitSPARepository(Registry registry,SpaObjectRegistry spaRegistry){
         this.registry = registry;
         this.spaRegistry= spaRegistry;
     }
 
    public void initProvider(){
    	registry.addInstantiator(new SPARepositoryInstantiator(registry,spaRegistry));  
    
       [%
         for(type in typeCollection){
		       if ( 
		             type.findClassifier(util.getHint(model_mapper,"SPA Object"))
		             or 
		             type.findClassifier(util.getHint(model_mapper,"Domain Object")) 
		             or
                     type.findClassifier(util.getHint(model_mapper,"Adapter"))       
		       ){
       %] 
        registry.addProvider("[%=t2model.get(type).get("fullName")%]","[%=component.artifactId%]");
       [%
          }
       }
       %] 
    }
 
     public void initClassMapping() throws Exception{
    
       [%
         var triggers = new Native('java.util.ArrayList');
       
         for(type in typeCollection){
		       if ( 
		             type.findClassifier(util.getHint(model_mapper,"SPA Object"))
		             or 
		             type.findClassifier(util.getHint(model_mapper,"Domain Object")) 
		             or
                     type.findClassifier(util.getHint(model_mapper,"Adapter"))       
		       ){
       %] 
        registry.addClassMapping( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]");
        registry.addMapper( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]", new [%=t2view.get(type).get("package")%].mapper.[%=t2view.get(type).get("class")%]Mapper() );
        spaRegistry.getRegistry("[%=component.artifactId%]").addSpaClass("[%=t2model.get(type).get("fullName")%]");
        spaRegistry.getRegistry("[%=component.artifactId%]").addMapper( "[%=t2view.get(type).get("fullName")%]" ,"[%=t2model.get(type).get("fullName")%]", new [%=t2view.get(type).get("package")%].mapper.[%=t2view.get(type).get("class")%]Mapper() );
        
       [%
          var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
	      for (rel in assosiations){
	         if ( rel.internal  ){
	               continue;
	         }
	         if ( rel.target.findClassifier(util.getHint(model_mapper,"Entity Object"))  ){
	               continue;
	         }
	         
	         rel.source.mappingType2Java(recipe,ingredient,'VIEW');
	         rel.target.mappingType2Java(recipe,ingredient,'VIEW');
	         
	         var t1 =rel.source.~fullName+rel.target.~fullName;
	         var t2 = rel.target.~fullName+rel.source.~fullName;
	         
	         var directTrigger = "org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger(registry)";
	         var oppositTrigger = "org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger(registry)";

	         
	         if(rel.target.isInternal() ){
                directTrigger = "org.tura.platform.repository.spa.SkipQueryTrigger(registry)";
             }
             
	         if(rel.source.isInternal() ){
                oppositTrigger = "org.tura.platform.repository.spa.SkipQueryTrigger(registry)";
             }
             
	         
	         if ( not triggers.contains(t1)){
               %]registry.addTrigger([%=rel.source.~fullName%].class.getName(),  [%=rel.target.~fullName%].class.getName() , new [%=directTrigger%]);[%
               triggers.add(t1);
	         }
	         if ( not triggers.contains(t2)){
               %]registry.addTrigger([%=rel.target.~fullName%].class.getName(),  [%=rel.source.~fullName%].class.getName() , new [%=oppositTrigger%]);[%
               triggers.add(t2);
	         }
          }
	     var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and t.target.uid <> t.source.uid);
	      for (rel in assosiations){
	         if ( rel.internal  ){
	               continue;
	         }
	         if ( rel.source.findClassifier(util.getHint(model_mapper,"Entity Object"))  ){
	               continue;
	         }
	         
	         rel.source.mappingType2Java(recipe,ingredient,'VIEW');
	         rel.target.mappingType2Java(recipe,ingredient,'VIEW');
	         
	         var t1 =rel.source.~fullName+rel.target.~fullName;
	         var t2 = rel.target.~fullName+rel.source.~fullName;
	         
	         var directTrigger = "org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger(registry)";
	         var oppositTrigger = "org.tura.platform.repository.spa.ExternalConnectionPreQueryTrigger(registry)";
	         
	         if(rel.target.isInternal() ){
                directTrigger = "org.tura.platform.repository.spa.SkipQueryTrigger(registry)";
             }
             
	         if(rel.source.isInternal() ){
                oppositTrigger = "org.tura.platform.repository.spa.SkipQueryTrigger(registry)";
             }
	
	         
	         
	         if ( not triggers.contains(t1)){
               %]registry.addTrigger([%=rel.source.~fullName%].class.getName(),  [%=rel.target.~fullName%].class.getName() , new [%=directTrigger%]);[%
               triggers.add(t1);
	         }
	         if ( not triggers.contains(t2)){
               %]registry.addTrigger([%=rel.target.~fullName%].class.getName(),  [%=rel.source.~fullName%].class.getName() , new [%=oppositTrigger%]);[%
               triggers.add(t2);
	         }
          }
        }
       }
       %] 
    
    }

     public void initCommandProducer(){
        registry.addCommandProducer("[%=component.artifactId%]", org.tura.platform.repository.spa.operation.SpaCommandProducer.class);
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(org.tura.platform.repository.spa.operation.SpaExternalConnectDetailToMasterOperation.class);
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(org.tura.platform.repository.spa.operation.SpaExternalConnectMasterToDetailOperation.class);
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(org.tura.platform.repository.spa.operation.SpaExternalDisconnectDetailFromMasterOperation.class);
		spaRegistry.getRegistry("[%=component.artifactId%]").addExternalCommand(org.tura.platform.repository.spa.operation.SpaExternalDisconnectMasterFromDetailOperation.class);
        spaRegistry.getRegistry("[%=component.artifactId%]").addInstantiator(new org.tura.platform.repository.jpa.operation.SpaOperationsInstantiator(registry,spaRegistry));
        
     }
 
  
 
 
 }
 