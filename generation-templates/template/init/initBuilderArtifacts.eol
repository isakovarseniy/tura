/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

operation domain::DomainArtifact initBuilderArtifacts(){
            var artifactGroup =  self.createArtifactGroup("Artifact builders");
            
            artifactGroup.initBuildjar();
            artifactGroup.initBuildrunner();
            artifactGroup.initBuildMVCApplication();
            artifactGroup.initClientBuild();
            artifactGroup.initClientLibraryBuild();
}


operation artifact::ArtifactGroup initClientLibraryBuild(  ){
          var artifact = self.createArtifact("Client library build");
          artifact.template = "tura:/generation-templates/template/pit/mvc/mainClientLibraryBuilder.egl";
          
          var tech = artifact.addTechnology("Builder type");
          tech.addOption("uuiClient.React.PrimeReact");
          
}

operation artifact::ArtifactGroup initClientBuild(  ){
          var artifact = self.createArtifact("Client build");
          artifact.template = "tura:/generation-templates/template/pit/mvc/mainClientApplicationBuilder.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          artifact.addConfigVariable("uuiClient.React","proxy_server");
          
          var tech = artifact.addTechnology("Builder type");
          tech.addOption("uuiClient.React.PrimeReact");
          
          
          var modeQuery = artifact.createQuery(
                  "Query type",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|((r.oclIsKindOf(tura::type::Type) and r.oclAsType(tura::type::Type).name='${Type}') or (r.oclIsKindOf(tura::type::Enumerator) and r.oclAsType(tura::type::Enumerator).name='${Type}')))"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Type");
          
          
}

operation artifact::ArtifactGroup initBuildMVCApplication(  ){
          var artifact = self.createArtifact("Build MVC application");
          artifact.template = "tura:/generation-templates/template/pit/mvc/mainMVCApplicationBuilder.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          
          
          var tech = artifact.addTechnology("Builder implementation");
          tech.addOption("JSE.Builder.Maven");
          tech.addOption("JSE.Builder.Ant");
          tech.addOption("JSE.Builder.Npm");

          var tech = artifact.addTechnology("Java");
          tech.addOption("JSE.1;;6");
          tech.addOption("JSE.1;;7");
          tech.addOption("JSE.1;;8");

          var tech = artifact.addTechnology("MVC application implementation");
          tech.addOption("uuiClient.React.PrimeReact");

          var modeQuery = artifact.createQuery(
                  "Query package",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");

          
          var modeQuery = artifact.createQuery(
                  "Query type",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|((r.oclIsKindOf(tura::type::Type) and r.oclAsType(tura::type::Type).name='${Type}') or (r.oclIsKindOf(tura::type::Enumerator) and r.oclAsType(tura::type::Enumerator).name='${Type}')))"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Type");


}


operation artifact::ArtifactGroup initBuildrunner(  ){
          var artifact = self.createArtifact("Build runner");
          artifact.template = "tura:/generation-templates/template/pit/Builder/mainBuildRunner.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          artifact.addConfigVariable("OS","External path 1");
          artifact.addConfigVariable("JSE.Builder","Builder location");
      
          artifact.addHint("JSE.Builder","ArtifactName");
          artifact.addHint("JSE.Builder.Maven","Profile");
      
          
           var tech = artifact.addTechnology("Builder implementation");
           tech.addOption("JSE.Builder.Maven");
           tech.addOption("JSE.Builder.Ant");
           tech.addOption("JSE.Builder.Npm");

           var tech = artifact.addTechnology("Builder type");
           tech.addOption("JEE.JPA");
           tech.addOption("JEE.Domain_model");
           tech.addOption("Testing.Selenium");
           tech.addOption("JSE.xml.xjc");
           tech.addOption("JEE.Repository.JPA");
           tech.addOption("JEE.RepositoryProxy");
           tech.addOption("Testing.CDI.Datacontrol");
           tech.addOption("JEE.CDI.REST.Repository");


           var tech = artifact.addTechnology("Java");
           tech.addOption("JSE.1;;6");
           tech.addOption("JSE.1;;7");
           tech.addOption("JSE.1;;8");
          
          
}

operation artifact::ArtifactGroup initBuildjar(  ){
          var artifact = self.createArtifact("Build jar");
          artifact.template = "tura:/generation-templates/template/pit/Builder/mainModelBuilder.egl";
          
          artifact.addConfigVariable("OS","Generation path");

           var tech = artifact.addTechnology("Builder implementation");
           tech.addOption("JSE.Builder.Maven");
           tech.addOption("JSE.Builder.Ant");
           tech.addOption("JSE.Builder.Npm");

           var tech = artifact.addTechnology("Builder type");
           tech.addOption("JEE.JPA");
           tech.addOption("JEE.Domain_model");
           tech.addOption("Testing.Selenium");
           tech.addOption("JSE.xml.xjc");
           tech.addOption("JEE.Repository.JPA");
           tech.addOption("JEE.RepositoryProxy");
           tech.addOption("Testing.CDI.Datacontrol");
           tech.addOption("JEE.CDI.REST.Repository");


           var tech = artifact.addTechnology("Java");
           tech.addOption("JSE.1;;6");
           tech.addOption("JSE.1;;7");
           tech.addOption("JSE.1;;8");
           

          var modeQuery = artifact.createQuery(
                  "Query package",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");

          
          var modeQuery = artifact.createQuery(
                  "Query type",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|((r.oclIsKindOf(tura::type::Type) and r.oclAsType(tura::type::Type).name='${Type}') or (r.oclIsKindOf(tura::type::Enumerator) and r.oclAsType(tura::type::Enumerator).name='${Type}')))"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Type");
           
          
}
