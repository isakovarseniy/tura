/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

 operation domain::DomainArtifacts createDomainArtifact(name:String){
         var keyId = generateKey(name);
         var domainArtifact = self.domainArtifact->select(t|t.keyId = keyId).first();
         
         if (domainArtifact == null ){
            var uuid := Native('java.util.UUID');
            domainArtifact = new domain::DomainArtifact;
            domainArtifact.uid =  uuid.randomUUID().toString();
            domainArtifact.name = name;
            self.domainArtifact.add(domainArtifact);
         }
         domainArtifact.keyId = keyId;
         
         return domainArtifact;
        
 }
 
  operation domain::DomainArtifacts createConfigVariable(   refString: String, name:String  ){
      var leaf = self.createTechnology (refString);
      var  configVariable = leaf.configVariables->select(t|t.name = name).first();
      if (configVariable == null){
          var uuid := Native('java.util.UUID');
          configVariable = new artifact::ConfigVariable;
          configVariable.uid =  uuid.randomUUID().toString();
          configVariable.name = name;
          leaf.configVariables.add(configVariable);
      }
  }
  
  operation domain::DomainArtifacts createHint(   refString: String, name:String  ){
      var leaf = self.createTechnology (refString);
      var  hint = leaf.hints->select(t|t.name = name).first();
      if (hint == null){
          var uuid := Native('java.util.UUID');
          hint = new artifact::GenerationHint;
          hint.uid =  uuid.randomUUID().toString();
          hint.name = name;
          leaf.hints.add(hint);
      }
  }
  
 
   operation domain::DomainArtifacts createTechnology(  name:String  ){

         var util = new Native('org.tura.metamodel.commons.Util');
         var h = util.splitTech(name);
         var i = 0;
		 var parent = self;

         while (i < h.size()) {
            var tech = util.findTech(self,h,i);
            if ( tech == null){
                 var uuid := Native('java.util.UUID');
                 tech = new artifact::TechLeaf;
                 tech.uid =  uuid.randomUUID().toString();
                 tech.name = h[i];
                 parent.techLeafs.add(tech);
            }
            parent = tech;
            i++;
         }
         return parent;
   } 
 
  operation domain::DomainArtifact createArtifactGroup(name:String){
         var keyId = generateKey(name);
         var  artifactGroup = self. artifactPackages->select(t|t.keyId = keyId).first();
         
         if ( artifactGroup == null ){
            var uuid := Native('java.util.UUID');
            artifactGroup = new artifact::ArtifactGroup;
            artifactGroup.uid =  uuid.randomUUID().toString();
            artifactGroup.name = name;
            self.artifactPackages.add(artifactGroup);
         }
         artifactGroup.keyId = keyId;
         return artifactGroup;
        
 }
 
   operation artifact::ArtifactGroup createArtifact(name:String){
         var keyId = generateKey(name);
         var  artifact = self. artifacts->select(t|t.keyId = keyId).first();
         
         if ( artifact == null ){
            var uuid := Native('java.util.UUID');
            artifact = new artifact::Artifact;
            artifact.uid =  uuid.randomUUID().toString();
            artifact.name = name;
            self.artifacts.add(artifact);
         }
         artifact.keyId = keyId;
         return artifact;
 }
 
 operation artifact::Artifact createQuery(name:String,  query:String ){
         var keyId = generateKey(name);
         var  modelQuery = self. modelQuery->select(t|t.keyId = keyId).first();
         if ( modelQuery == null ){
            var uuid := Native('java.util.UUID');
            modelQuery = new artifact::ModelQuery;
            modelQuery.uid =  uuid.randomUUID().toString();
            modelQuery.name = name;
            self.modelQuery.add(modelQuery);
         }
         modelQuery.query = query;
         modelQuery.keyId = keyId;
         
         return modelQuery;
 }
 

  operation artifact::Artifact addTechnology(  name:String  ){
         var keyId = generateKey(name);
         var  tech = self. technologies->select(t|t.keyId = keyId).first();
           if ( tech == null ){
            var uuid := Native('java.util.UUID');
            tech = new artifact::Technology;
            tech.uid =  uuid.randomUUID().toString();
            tech.name = name;
            self.technologies.add(tech);
         }
         tech.keyId = keyId; 
         return tech;
 }
 
 
   operation artifact::Technology addOption(   refString: String ){
   
// var qq = "domainArtifacts.createTechnology(\""+refString+"\");";
// qq.println();
   
         var util = new Native('org.tura.metamodel.commons.Util');
         var leaf = util.findTech(self,refString);

         if ( leaf == null){
             throw "Technology "+ refString +" not found";
         }
         
         var option  = self.options->select(t| t.value.uid = leaf.uid ).first();
         
         if (option == null and  leaf <> null ){
            var uuid := Native('java.util.UUID');
            option = new artifact::Option;
            option.value = leaf;
            self.options.add(option);
         }
         return option;
         
   }
 
 
 operation artifact::Artifact addConfigVariable( refString: String, name:String  ){
 
// var qq = "domainArtifacts.createConfigVariable(\""+refString+"\",\""+name+"\");";
// qq.println();
 
         var util = new Native('org.tura.metamodel.commons.Util');
         var leaf = util.findTech(self,refString);
         
         if ( leaf == null){
             throw "Technology "+ refString +" not found";
         }
         
         var  configVariable = leaf.configVariables->select(t|t.name = name).first();
         if ( configVariable == null){
             throw "Config Variable "+ name +" not found";
         }
         
         var confRef = self.configVariables->select(t| t.varRef.uid = configVariable.uid ).first();
          
         if ( confRef == null  and  configVariable <> null ){
            var uuid := Native('java.util.UUID');
            confRef = new artifact::ConfigVariableWithNickName;
            confRef.uid =  uuid.randomUUID().toString();
            confRef.varRef = configVariable;
            confRef.name = name;
            self.configVariables.add(confRef);
         }
         return configVariable;
 }

 operation artifact::Artifact addHint( refString: String, name:String  ){
         return self.addHint(refString, name, name);
 }

 operation artifact::Artifact addHint( refString: String, name:String , alteredName:String ){
 
// var qq = "domainArtifacts.createHint(\""+refString+"\",\""+name+"\");";
// qq.println();

 
         var util = new Native('org.tura.metamodel.commons.Util');
         var leaf = util.findTech(self,refString);
         if ( leaf == null){
             throw "Technology "+ refString +" not found";
         }
         
         var  hint = leaf.hints->select(t|t.name = name).first();
         if ( hint == null){
             throw "Hint "+ name +" not found";
         }
         
         var hintRef = self.hints->select(t| t.hint.uid = hint.uid ).first();
          
         if ( hintRef == null  and  hint <> null ){
            var uuid := Native('java.util.UUID');
            hintRef = new artifact::GenerationHintWithNickName;
            hintRef.uid =  uuid.randomUUID().toString();
            hintRef.hint = hint;
            self.hints.add(hintRef);
         }
         hintRef.name = alteredName;
         return hint;
 }
 
 
  operation artifact::ModelQuery addParameter(name:String){
         var keyId = generateKey(name);
         var  queryParameter = self. parameters->select(t|t.keyId = keyId).first();
         if ( queryParameter == null ){
            var uuid := Native('java.util.UUID');
            queryParameter = new artifact::QueryParameter;
            queryParameter.uid =  uuid.randomUUID().toString();
            queryParameter.name = name;
            self.parameters.add(queryParameter);
         }
         queryParameter.name = name;
         queryParameter.keyId = keyId;
         
         return queryParameter;
  
  }
 
 
 
 operation generateKey(name){
     return  name.toUpperCase().replaceAll(" ", "_");
 }
