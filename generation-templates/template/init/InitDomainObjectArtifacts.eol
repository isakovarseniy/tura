/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

operation domain::DomainArtifact InitDomainObjectArtifacts(){
   
          var artifactGroup = self.createArtifactGroup("Domain model objects");
          
          artifactGroup.initDomainModelGeneration();
          artifactGroup.initEnumeration();
          artifactGroup.initAdapterGeneration();

}



operation artifact::ArtifactGroup initAdapterGeneration(  ){
           var artifact = self.createArtifact("Adapter generation");
           artifact.template = "tura:/generation-templates/template/technologies/JEE/Repository/Adapter/mainAdapters.egl";

           artifact.addConfigVariable("OS","Generation path");
           artifact.addHint("JEE.Repository","Adapter");


           var modeQuery = artifact.createQuery(
                  "Query SPA Objects",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Type ) and r.oclAsType(artifact::Categorized).classifiers->select(q|q.oclAsType(artifact::Classifier ).hint.uid='@{Adapter}')->size()>0)"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");


}


operation artifact::ArtifactGroup initEnumeration(  ){
           var artifact = self.createArtifact("Enumerator");
           artifact.template = "tura:/generation-templates/template/technologies/JSE/Object/mainEnumerator.egl";
           
           artifact.addConfigVariable("OS","Generation path");
           
           
           var modeQuery = artifact.createQuery(
                  "Query model enum",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Enumerator ) )"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           
}


operation artifact::ArtifactGroup initDomainModelGeneration(  ){
           var artifact = self.createArtifact("Domain model generation");
           
           artifact.template = "tura:/generation-templates/template/pit/DomainModel/mainDomainModel.egl";
           artifact.addConfigVariable("OS","Generation path");
           artifact.addHint("JEE.Domain_model","Domain Object");
           artifact.addHint("JEE.Domain_model","Domain Interface");
           artifact.addHint("JSE","Implements", "obj.Implements");
           artifact.addHint("JEE.Repository","OneWayAssociation");
           
           
           var modeQuery = artifact.createQuery(
                  "Query model classes",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Type ) and r.oclAsType(artifact::Categorized).classifiers->select(q|q.oclAsType(artifact::Classifier ).hint.uid='@{Domain Object}')->size()>0)"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           
           
           var modeQuery = artifact.createQuery(
                  "Query model interfaces",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Type ) and r.oclAsType(artifact::Categorized).classifiers->select(q|q.oclAsType(artifact::Classifier ).hint.uid='@{Domain Interface}')->size()>0)"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           
           
}
