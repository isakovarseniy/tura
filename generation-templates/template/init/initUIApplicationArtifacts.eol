/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

operation domain::DomainArtifact initUIApplicationArtifacts(){
            var artifactGroup = self.createArtifactGroup("UI application");
            artifactGroup.initDataControl();
            artifactGroup.initView();
            artifactGroup.initMessageProvider();
            artifactGroup.initClient();
            artifactGroup.initWebXml();
            artifactGroup.initAllPagers();
            artifactGroup.initClientLibrary();
            artifactGroup.initClientPackaging();
            artifactGroup.initAdhocTemplate();
            artifactGroup.initViewportInterface();
            artifactGroup.initDataControlInterface();
}



operation artifact::ArtifactGroup initViewportInterface(  ){
          var artifact = self.createArtifact("Viewport interface");
          artifact.template = "tura:/generation-templates/template/technologies/uuiClient/mainViewPortHolderInterface.egl";
}


operation artifact::ArtifactGroup initDataControlInterface(  ){
          var artifact = self.createArtifact("DataControl Interface");
          artifact.template = "tura:/generation-templates/template/technologies/JEE/CDI/datacontrol/mainDataControlInterface.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          
          var modeQuery = artifact.createQuery(
                  "Query form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           
           var modeQuery = artifact.createQuery(
                  "Query one form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms->select(r|r.oclAsType(form::Form).name='${Form}')"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Form");
          
          
}


operation artifact::ArtifactGroup initClientPackaging(  ){
          var artifact = self.createArtifact("Client packaging");
          artifact.template = "tura:/generation-templates/template/pit/mvc/view/mainClientPackaging.egl";
          
          var tech = artifact.addTechnology("View implementation");
          tech.addOption("uuiClient.React.PrimeReact");
          
}


operation artifact::ArtifactGroup initClientLibrary(  ){
          var artifact = self.createArtifact("Client library");
          artifact.template = "tura:/generation-templates/template/pit/mvc/view/mainClientLibrary.egl";
          
          
          
          var tech = artifact.addTechnology("View implementation");
          tech.addOption("uuiClient.React.PrimeReact");
          
}



operation artifact::ArtifactGroup initAdhocTemplate(  ){
          var artifact = self.createArtifact("Adhoc template");
          artifact.template = "tura:/generation-templates/template/technologies/adhoc.egl";
}

operation artifact::ArtifactGroup initAllPagers(  ){
          var artifact = self.createArtifact("All Pagers");
          artifact.template = "tura:/generation-templates/template/technologies/JSE/datacontrol/mainAllPagers.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          artifact.addHint("JEE.JPA","Entity Object");
          
          var modeQuery = artifact.createQuery(
                  "Query model classes",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Type ) and r.oclAsType(artifact::Categorized).classifiers->select(q|q.oclAsType(artifact::Classifier ).hint.uid='@{Entity Object}')->size()>0)"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
          
}

operation artifact::ArtifactGroup initWebXml(  ){
          var artifact = self.createArtifact("web.xml");
          artifact.template = "tura:/generation-templates/template/technologies/JEE/mainWeb-xml.egl";
          
          artifact.addConfigVariable("OS","Generation path");
          artifact.addConfigVariable("JEE","Session timeout");


           var tech = artifact.addTechnology("View implementation");
           tech.addOption("uuiClient.React.PrimeReact");
           tech.addOption("uuiClient.React.PrimeReact.viewClient");
           
           tech = artifact.addTechnology("Deployment environment");
           tech.addOption("JEE.Application_server.RedHat-EAP;;v7;;0;;0");
           
           tech = artifact.addTechnology("Environment");
           tech.addOption("JEE.CDI.scopes.JEE_ViewScope");
           tech.addOption("JEE.CDI.scopes.JSE_ApplicationScope");
           tech.addOption("JEE.CDI.scopes.JEE_SessionScope");
           tech.addOption("JEE.CDI.scopes.UUIClientScoped");
           

          var modeQuery = artifact.createQuery(
                  "Query application",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application)"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");


          var modeQuery = artifact.createQuery(
                  "Query form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
      
}




operation artifact::ArtifactGroup initClient(  ){
          var artifact = self.createArtifact("Client");
          artifact.template = "tura:/generation-templates/template/pit/mvc/view/mainClient.egl";
           
          artifact.addConfigVariable("OS","Generation path");
          artifact.addHinnts();
           
          var modeQuery = artifact.createQuery(
                  "Query form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           
           var modeQuery = artifact.createQuery(
                  "Query one form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms->select(r|r.oclAsType(form::Form).name='${Form}')"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Form");
           
           var modeQuery = artifact.createQuery(
                  "Query server component",
                  "recipe::JavaComponent.allInstances()->select(r|r.oclAsType(recipe::JavaComponent).uid='${Component uuid}')"
           );
           modeQuery.addParameter("Component uuid");


           var modeQuery = artifact.createQuery(
                  "Query tura lib",
                  "recipe::JavaScriptComponent.allInstances()->select(r|r.oclAsType(recipe::JavaScriptComponent).uid='${Component uuid}')"
           );
           modeQuery.addParameter("Component uuid");
           

           var modeQuery = artifact.createQuery(
                  "Querty triggers",
                  "domain::DomainTypesRepository.allInstances()->select(r|r.oclAsType(domain::DomainTypesRepository).name='${Repository}').repositoryPackages->select(r|r.oclAsType(tura::type::TypeGroup).name='${Package}' ).types->select(r|r.oclIsKindOf(tura::type::Type )  and r.oclAsType(tura::type::Type).name='${Type}')"
           );
           modeQuery.addParameter("Repository");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Type");
           
}

operation artifact::ArtifactGroup initMessageProvider(  ){
           var artifact = self.createArtifact("Message provider");
           artifact.template = "tura:/generation-templates/template/pit/mvc/view/mainMessageLibrary.egl";
           
           artifact.addConfigVariable("OS","Generation path");
           artifact.addHint("uuiClient.React","message.encoding");
           
           var tech = artifact.addTechnology("View implementation");
           tech.addOption("uuiClient.React.PrimeReact");
           
           var tech = artifact.addTechnology("Environment");
           tech.addOption("JEE.CDI.scopes.JEE_ViewScope");
           tech.addOption("JEE.CDI.scopes.JSE_ApplicationScope");
           tech.addOption("JEE.CDI.scopes.JEE_SessionScope");
           tech.addOption("JEE.CDI.scopes.UUIClientScoped");

          var modeQuery = artifact.createQuery(
                  "Query message library",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationMessages.messageLibraries"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");


}


operation artifact::ArtifactGroup initView(  ){
           var artifact = self.createArtifact("View");
           artifact.template = "tura:/generation-templates/template/pit/mvc/view/mainView.egl";
           
           artifact.addConfigVariable("OS","Generation path");
           artifact.addHinnts();
           
           var tech = artifact.addTechnology("View implementation");
           tech.addOption("uuiClient.React.PrimeReact");
           
           var tech = artifact.addTechnology("Environment");
           tech.addOption("JEE.CDI.scopes.JEE_ViewScope");
           tech.addOption("JEE.CDI.scopes.JSE_ApplicationScope");
           tech.addOption("JEE.CDI.scopes.JEE_SessionScope");
           tech.addOption("JEE.CDI.scopes.UUIClientScoped");
           
           
          var modeQuery = artifact.createQuery(
                  "Query form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           
           var modeQuery = artifact.createQuery(
                  "Query one form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms->select(r|r.oclAsType(form::Form).name='${Form}')"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Form");
           
}


operation artifact::ArtifactGroup initDataControl(  ){
           var artifact = self.createArtifact("Data control");
           artifact.template = "tura:/generation-templates/template/pit/mvc/model/mainModel.egl";

           artifact.addConfigVariable("OS","Generation path");
           artifact.addHint("JEE.CDI","CommandStack");

           var tech = artifact.addTechnology("Model management framework");
           tech.addOption("JEE.CDI");
           
           var tech = artifact.addTechnology("Environment");
           tech.addOption("JEE.CDI.scopes.JEE_ViewScope");
           tech.addOption("JEE.CDI.scopes.JSE_ApplicationScope");
           tech.addOption("JEE.CDI.scopes.JEE_SessionScope");
           tech.addOption("JEE.CDI.scopes.UUIClientScoped");

           var modeQuery = artifact.createQuery(
                  "Query form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           
           
           var modeQuery = artifact.createQuery(
                  "Query repository proxy component",
                  "recipe::JavaComponent.allInstances()->select(r|r.oclAsType(recipe::JavaComponent).uid='${Component uuid}')"
           );
           modeQuery.addParameter("Component uuid");


           var modeQuery = artifact.createQuery(
                  "Query one form",
                  "domain::DomainApplication.allInstances()->select(r|r.oclAsType(domain::DomainApplication).name='${Domain Application}').oclAsType(domain::DomainApplication).applicationPackages->select(r|r.oclAsType(tura::application::ApplicationGroup).name='${Group}').oclAsType(tura::application::ApplicationGroup).applications->select(r|r.oclAsType(tura::application::Application).name='${Application}').oclAsType(tura::application::Application).applicationUILayer.applicationUIPackages->select(r|r.oclAsType(tura::application::ApplicationUIPackage).name='${Package}').oclAsType(tura::application::ApplicationUIPackage).forms->select(r|r.oclAsType(form::Form).name='${Form}')"
           );
           modeQuery.addParameter("Domain Application");
           modeQuery.addParameter("Group");
           modeQuery.addParameter("Application");
           modeQuery.addParameter("Package");
           modeQuery.addParameter("Form");
           
}


operation artifact::Artifact addHinnts(  ){

           self.addHint("uuiClient.React","react.preClick");
           self.addHint("uuiClient.React","react.onClick");
           self.addHint("uuiClient.React","react.actionParameter");
           self.addHint("uuiClient.React","react.onFileUpload");
           self.addHint("uuiClient.React","react.preBlur");
           self.addHint("uuiClient.React","react.onBlur");
           self.addHint("uuiClient.React","trigger.launch.wrapper");
           self.addHint("uuiClient.React","react.grid.onSelect");
           self.addHint("uuiClient.React","react.grid.onUnSelect");
           self.addHint("uuiClient.React","react.grid.onToggle");
           self.addHint("uuiClient.React","row number selector");
           self.addHint("uuiClient.React","react.onMenuShow");
           self.addHint("uuiClient.React","react.dynamicLayout");
           self.addHint("uuiClient.React.PrimeReact","dataScroller.listLayout");
           self.addHint("uuiClient.React.PrimeReact","dataScroller.gridLayout");
           self.addHint("uuiClient.React.PrimeReact","tabMenu");
           self.addHint("uuiClient.React.PrimeReact","tabMenu.currentItem");
           self.addHint("uuiClient.React.PrimeReact","react.timeline.opposite");
           self.addHint("uuiClient.React.PrimeReact","react.timeline.marker");


           self.addHint("uuiClient.React.DataTemplate","CommandLink");

           self.addHint("Model.Form.View.UIElement","rendered");
           self.addHint("Model.Form.View.UIElement","enabled");
           self.addHint("Model.Form.View.UIElement","oncomplete");
           self.addHint("Model.Form.View.UIElement","onclick");
           self.addHint("Model.Form.View.UIElement","styleClass");
           self.addHint("Model.Form.View.UIElement","transitionURL");
           self.addHint("Model.Form.View.UIElement","onFieldUpdate");
           self.addHint("Model.Form.View.UIElement","transitionAction");
           self.addHint("Model.Form.View.UIElement","grid.columnStyleClass");
           self.addHint("Model.Form.View.UIElement","InputTextAria");
           self.addHint("Model.Form.View.UIElement","Messages");
           self.addHint("Model.Form.View.UIElement","onChange");
           self.addHint("Model.Form.View.UIElement","table.edit.column");
           self.addHint("Model.Form.View.UIElement","layerholder.columns");
           self.addHint("Model.Form.View.UIElement","layerholder.ignore");
           self.addHint("Model.Form.View.UIElement","column.dataExport");
           self.addHint("Model.Form.View.UIElement","column.dataExport.function");
           self.addHint("Model.Form.View.UIElement","datascroller.initial.layout");
           self.addHint("Model.Form.View.UIElement","responsive.grid");
           self.addHint("Model.Form.View.UIElement","accordionPanel");
           self.addHint("Model.Form.View.UIElement","menu.global");
           self.addHint("Model.Form.View.UIElement","InputMask");

}