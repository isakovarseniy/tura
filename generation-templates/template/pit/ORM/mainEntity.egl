[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2022 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
<#assign percent = "%" >
<#assign start = "[" >
<#assign end = "]" >
${start}${percent} 
import "tura:/generation-templates/template/technologies/${Entity_implementation}.egl";
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
import "tura:/generation-templates/template/commons/assosiation.eol";
 import "tura:/generation-templates/template/commons/categorizedUtil.eol";

 ${percent}${end}

[%
  
     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');

     var type;
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 

     var types = util.runQuery(model_mapper,"Query Entity Objects",model_mapper);
     
     if (types <> null and types.size <> 0 ){
         alltypes.addAll(types); 
     }

     types = util.runQuery(model_mapper,"Query SPA Objects",model_mapper);
     
     if (types <> null and types.size <> 0 ){
         alltypes.addAll(types); 
     }



    if (alltypes.size() <> 0 ){
       for (type in alltypes){
          type.mappingType2Java(recipe,ingredient);

          var extension = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.classifiers->size() = 0 ).first();
          
          if (extension <> null){
	          var ex =  extension.target;
	          if (ex.isKindOf(type::TypeReference )){
	             ex = extension.target.typeRef;
	          }
	          ex.mappingType2Java(recipe,ingredient);
	          type.~extension = ex;
           }
           
          var interfaces = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.classifiers <> null  );
          
          if (interfaces <> null){
              for (interface in interfaces){
                if (interface.findClassifier( util.getHint(model_mapper,"obj.Implements"))){
			          var ex =  interface.target;
			          if (interface.isKindOf(type::TypeReference )){
			             ex = interface.target.typeRef;
			          }
			          ex.mappingType2Java(recipe,ingredient);
			          if (not type.~interface.isDefined()){
                           type.~interface = new Native('java.util.ArrayList');
			          }
			          type.~interface.add ( ex);
                }
              }
          
           }           
           
           var skipAttributes=new Native('java.util.ArrayList');

           var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
           for (rel in assosiations){
             rel.check(); 
  	          var tp =  rel.target;
	          if (tp.isKindOf(type::TypeReference )){
	             tp = tp.typeRef;
	          }
	          tp.mappingType2Java(recipe,ingredient);
           }

           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);

           for (rel in assosiations){
             rel.check(); 
  	          var tp =  rel.source;
	          if (tp.isKindOf(type::TypeReference )){
	             tp = tp.typeRef;
	          }
	          tp.mappingType2Java(recipe,ingredient);
           }
           
           var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid and (t.type.toString() = "One2One" or t.type.toString() = "One2Many"));
           for (rel in assosiations){
                for (lnk in rel.links){
                   skipAttributes.add(lnk.detailField);
                }
           }           
           type.~skipAttributes=skipAttributes;

          var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
          hash.put("type",type);
          hash.put("recipe",recipe);
          hash.put("ingredient",ingredient);
          hash.put("component",component);
          hash.put("model_mapper",model_mapper);
          hash.put("path",path);    
          hash.put("alltypes",alltypes);    
     
          entitygeneration(hash);
       }
       
       alltypesgenerator(hash);
    }
%]
