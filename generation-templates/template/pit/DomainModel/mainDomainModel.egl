[%
/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2023 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   https://github.com/isakovarseniy/tura
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
*/
%]
[%
import "tura:/generation-templates/template/commons/typeElementUtil.eol";
import "tura:/generation-templates/template/commons/categorizedUtil.eol";
import "tura:/generation-templates/template/commons/assosiation.eol";
import "tura:/generation-templates/template/technologies/JSE/Object/interface.egl";
import "tura:/generation-templates/template/technologies/JSE/Object/method.egl";


     var util = new Native('org.tura.metamodel.commons.Util');
     var alltypes = new Native('java.util.ArrayList');
     var hash = new Native('java.util.HashMap');

     var type;
     var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
     var n= new Native("org.tura.metamodel.generation.NullFormatter"); 


     var types = util.runQuery(model_mapper,"Query model classes",model_mapper);

     if (types <> null and types.size <> 0 )

       for (type in types){
          type.mappingType2Java(recipe,ingredient);
 
          var pkg = type.eContainer();
          // var extension = type::Generalization.allInstances()->select(t|t.source.uid = type.uid  and not t.isImplements(model_mapper) ).first();
          var extension = pkg.relationships->select(t|t.isTypeOf(type::Generalization) and t.source.uid = type.uid  and not t.isImplements(model_mapper) ).first();
          if (extension <> null){
	          var ex =  extension.target.unwrap();
	          ex.mappingType2Java(recipe,ingredient);
	          type.~extension = ex;
           }
           // var interfaces = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.isImplements(model_mapper) );
           var interfaces = pkg.relationships->select(t|t.isTypeOf(type::Generalization) and t.source.uid = type.uid and t.isImplements(model_mapper) );
          
          if (interfaces <> null){
              for (interface in interfaces){
			          var ex =  interface.target.unwrap();
			          ex.mappingType2Java(recipe,ingredient);
			          if (not type.~interface.isDefined()){
                           type.~interface = new Native('java.util.ArrayList');
			          }
			          type.~interface.add ( ex);
              }
          
           }
           
           // var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
           var assosiations = pkg.relationships->select(t|t.isTypeOf(type::Assosiation) and  t.source.uid = type.uid);
           for (rel in assosiations){
  	          var tp =  rel.target;
	          if (tp.isKindOf(type::TypeReference )){
	             tp = tp.typeRef;
	          }
	          tp.mappingType2Java(recipe,ingredient);
           }

           // var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
           var assosiations = pkg.relationships->select(t|t.isTypeOf(type::Assosiation) and t.target.uid = type.uid);
 
           for (rel in assosiations){
  	          var tp =  rel.source.unwrap();
	          tp.mappingType2Java(recipe,ingredient);
           }
           
          var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
          hash.put("type",type);
          hash.put("recipe",recipe);
          hash.put("ingredient",ingredient);
          hash.put("component",component);
          hash.put("model_mapper",model_mapper);
          hash.put("path",path);    

          domain_class_generation(hash);
          
    }

     var types = util.runQuery(model_mapper,"Query model interfaces",model_mapper);

     if (types <> null and types.size <> 0 )

       for (type in types){
          var pkg = type.eContainer();
          type.mappingType2Java(recipe,ingredient);

          // var interfaces = type::Generalization.allInstances()->select(t|t.source.uid = type.uid and t.isImplements(model_mapper)  );
          var interfaces = pkg.relationships->select(t|t.isTypeOf(type::Generalization) and  t.source.uid = type.uid and t.isImplements(model_mapper)  );
          
          if (interfaces <> null){
              for (interface in interfaces){
			          var ex =  interface.target.unwrap();
			          ex.mappingType2Java(recipe,ingredient);
			          if (not type.~interface.isDefined()){
                           type.~interface = new Native('java.util.ArrayList');
			          }
			          type.~interface.add ( ex);
              }
          
           }
           
           // var assosiations = type::Assosiation.allInstances()->select(t|t.source.uid = type.uid);
           var assosiations = pkg.relationships->select(t|t.isTypeOf(type::Assosiation) and t.source.uid = type.uid);
           for (rel in assosiations){
  	          var tp =  rel.target.unwrap();
	          tp.mappingType2Java(recipe,ingredient);
           }

           // var assosiations = type::Assosiation.allInstances()->select(t|t.target.uid = type.uid);
           var assosiations = pkg.relationships->select(t|t.isTypeOf(type::Assosiation) and t.target.uid = type.uid);

           for (rel in assosiations){
  	          var tp =  rel.source.unwrap();
	          tp.mappingType2Java(recipe,ingredient);
           }
           
          var path = util.getComponentRoot( component.getComponentRoot,configuration)+"/"+component.getArtifactId()+"/src/main/java/";  
          hash.put("type",type);
          hash.put("recipe",recipe);
          hash.put("ingredient",ingredient);
          hash.put("component",component);
          hash.put("model_mapper",model_mapper);
          hash.put("path",path);    
     
          domain_interface_generation(hash);

    }

    
operation  domain_class_generation(hash) {

   var util = new Native('org.tura.metamodel.commons.Util');
   var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
        
    var type =  hash.get("type");
    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var path = hash.get("path");
    
    util.populateTechnologies(hash,model_mapper);

    var entityBean : Template = util.loadTemplate("tura:/generation-templates/template/technologies/JSE/Object/class.egl",hash,TemplateFactory);
    entityBean.setFormatter(f);
    var buffer = entityBean.process();
    util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class + ".java",buffer);   


}

operation  domain_interface_generation(hash) {

   var util = new Native('org.tura.metamodel.commons.Util');
   var f = new Native("org.tura.metamodel.generation.JavaFormatter"); 
        
    var type =  hash.get("type");
    var recipe = hash.get("recipe");
    var ingredient =  hash.get("ingredient");
    var component = hash.get("component");
    var model_mapper = hash.get("model_mapper");
    var path = hash.get("path");
    
    util.populateTechnologies(hash,model_mapper);

	%][%=interface(hash)%][%  
	out.formatWith(f);
	util.saveFile( path+type.~package.replaceAll("\\.","\\/"), type.~class + ".java",out.toString());   
	out.formatWith(n);

}

%]