/*
 *   Tura - Application generation solution
 *
 *   Copyright (C) 2008-2021 2182342 Ontario Inc ( arseniy.isakov@turasolutions.com ).
 *
 *
 *   This project includes software developed by Arseniy Isakov
 *   http://sourceforge.net/p/tura/wiki/Home/
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v2.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v20.html
 */

operation commonInit(dc,command,trigger,oprName){
   var uuid := Native('java.util.UUID');
  trigger.methodRef=command.operations->select(q|q.name=oprName).first();
  
}



operation typeConstant( parameter , method) {

   var uuid := Native('java.util.UUID');

   var ctxParam = new form::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new form::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=true;
   ctxParam.value.value= method;

   return ctxParam;

}

operation typeParam(type,parameter){

   var uuid := Native('java.util.UUID');

   var ctxParam = new form::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new form::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Types repository."+type.eContainer().eContainer().name+"."+type.eContainer().name+"."+type.eContainer().name+"::"+type.name;



   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DomainTypesImpl";
   expr.objRef=type.eContainer().eContainer().eContainer();
   expr.order=0;
   ctxParam.value.expression.add(expr);


   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DomainTypesRepositoryImpl";
   expr.objRef=type.eContainer().eContainer();
   expr.order=1;
   ctxParam.value.expression.add(expr);


   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypeGroupImpl";
   expr.objRef=type.eContainer();
   expr.order=2;
   ctxParam.value.expression.add(expr);

   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TypeImpl";
   expr.objRef=type;
   expr.order=3;
   ctxParam.value.expression.add(expr);


   return ctxParam;

}


operation primitiveTypeParam(type,parameter){

   var uuid := Native('java.util.UUID');

   var ctxParam = new form::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new form::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Types repository.Primitive package"+"."+type.name;


   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DomainTypesImpl";
   expr.order=0;
   ctxParam.value.expression.add(expr);


   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "PrimitivesGroupImpl";
   expr.objRef=type.eContainer();
   expr.order=1;
   ctxParam.value.expression.add(expr);


   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "PrimitiveImpl";
   expr.objRef=type;
   expr.order=2;
   ctxParam.value.expression.add(expr);

   return ctxParam;

}



operation treeDataControl(treedc,dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new form::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new form::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Tree data controls.Tree"+treedc.name+"."+dc.name+"."+attribute;
   
   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeRootDataControlHolder";
   expr.order=0;
   ctxParam.value.expression.add(expr);

   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "TreeDataControl";
   expr.order=1;
   ctxParam.value.expression.add(expr);
   
   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=2;
   ctxParam.value.expression.add(expr);


   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=3;
   ctxParam.value.expression.add(expr);

   return ctxParam;

}


operation simpleDataControl(dc,attribute,type,parameter){
   var uuid := Native('java.util.UUID');

   var ctxParam = new form::ContextParameter; 
   ctxParam.uid =  uuid.randomUUID().toString();
   ctxParam.refObj = parameter;
   ctxParam.value =  new form::ContextValue;
   ctxParam.value.uid = uuid.randomUUID().toString();
   ctxParam.value.constant=false;
   ctxParam.value.value="Data controls."+dc.name+"."+attribute;
   
   
   var expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlHolder";
   expr.order=0;
   ctxParam.value.expression.add(expr);


   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = "DataControlImpl";
   expr.objRef=dc;
   expr.order=1;
   ctxParam.value.expression.add(expr);


   expr = new form::ExpressionPart;
   expr.uid =  uuid.randomUUID().toString();
   expr.expressionType = type;
   expr.order=2;
   ctxParam.value.expression.add(expr);
   
   return ctxParam;

}

