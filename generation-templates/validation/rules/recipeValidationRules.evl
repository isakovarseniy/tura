 context recipe::Ingredient {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

  constraint HasLayer {

      guard : self.satisfies("HasName")
      check :  self.controllerLayer.isDefined() or (not self.controllerLayer.isDefined() and (self. vewLayer.size() <> 0 and self.modelLayer.size() <> 0))

      message : 'Wrong Layer defenition for Ingredient' + self.name + ' not allowed'

  }


   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.eContainer().ingredients.select(r|r.isKindOf(recipe::Ingredient) and r.name=self.name).size() = 1
      message : 'Infrastructure name  ' + self.name + ' is not unique'
   
   } 
}



 context recipe::Component {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }
}


 context recipe::Infrastructure {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }
  
 constraint RecipeConnection {

      guard : self.satisfies("HasName")
      check :  self.recipe.isDefined()
      message : 'Infrastructure  ' + self.name + ' disconected from recipe'

  }
   

   constraint UniqueName{

      guard : self.satisfies("RecipeConnection")
      check : self.recipe.infrastructures.select(r|r.isKindOf(Infrastructure) and r.name=self.name).size() = 1
      message : 'Infrastructure name  ' + self.name + ' is not unique'
   
   } 
   
  constraint ConfigVariablesIsDefine {

      check  {
	   var configVar := new Native('org.tura.metamodel.wizard.recipe.configuration.ConfigVarDialog');
	   var properties = configVar.propertiesList(self.recipeConfig);
	      return true;
	   
	   if (properties.size() == 0  )
	      return true;
	   else
	      return false;    
      }

      message : 'Configuration variable  is not defined'

  }   
 
   constraint ConfigHashVariablesIsDefine {

      check  {
	   var configVar := new Native('org.tura.metamodel.wizard.recipe.configuration.ConfigHashVarDialog');
	   var properties = configVar.propertiesList(self.recipeConfig);
	      return true;
	   
	   if (properties.size() == 0  )
	      return true;
	   else
	      return false;    
      }

      message : 'Configuration hash variable  is not defined'

  }   
 
   
}

context recipe::Configuration{

 constraint ConfigurationConnection {

      check :   self.eContainer().configExtension->select(r|r.source.uid=self.uid).size()<= 1
      message : 'Configuration cannot be sources for more then 1 configuration tree'

  }

}


 context recipe::ModelMapper {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.eContainer().mappers.select(r|r.isKindOf(ModelMapper) and r.name=self.name).size() = 1
      message : 'ModelMapper name  ' + self.name + ' is not unique'
   
   } 


  constraint HasRefArtifact{
      check : self.artifactRef.isDefined()
      message : 'ModelMapper name  ' + self.name + ' in ' + ' Artifacr  is not define '
   } 



}


 context recipe::Query {
 
  constraint checkQueryParameters{
      check{
 	   var helper := new Native('org.tura.metamodel.commons.QueryHelper');
	   var result = helper.findMappingVariable(self, self);
	   if (result[0].size()=0 and result[1].size()=0)
	       return true;
	   return false;    
      }
      
      message : 'MappingVariables   for ' + self.name +  '  is not define  properly'

  }
  
  constraint checkQueryParametersName{
      check{
       for (variable in self.variables){
         if (not variable.queryParamRef.isDefined() or variable.queryParamRef.name = "" or variable.queryParamRef.name = null )
             return false;
       }
       return true;
      }  
       message : 'No value for parameter not allowed'
  }  
  
  constraint checkQueryParametersValues{
      guard : self.satisfies("checkQueryParametersName")
      check{
       for (variable in self.variables){
         if (variable.value = null or variable.value = "" )
             return false;
       }
       return true;
      }  
       message : 'No value  not allowed'
  }
}


context recipe::Property {

  constraint HasName {

      check :  self.confVarRef.isDefined()

      message : 'No reference for Property ' + self.eClass().name + ' not allowed'

  }

  constraint HasValue {

       guard : self.satisfies("HasName")
       check :  self.value.isDefined()

       message : 'No value ' + self.confVarRef.name + ' not allowed'

  }
}
 






