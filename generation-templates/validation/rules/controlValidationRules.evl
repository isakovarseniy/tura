context form::ArtificialField{

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }
   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.eContainer().artificialFields.select(r|r.isKindOf(form::ArtificialField) and r.name=self.name).size() = 1
      message : 'Artificial name  ' + self.name + ' is not unique'
   
   } 

}

context form::Relation{
     constraint HasDependency{
       check: self.eContainer().dependencies.select(r|r.master = self.master and r.detail = self.detail).size() = 0
       message : 'Relation and Dependency cannot resides between same data controls'
     }
}

context form::FormVariable{

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }
   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.eContainer().variables.select(r|r.isKindOf(FormVariable) and r.name=self.name).size() = 1
      message : 'FormVariable name  ' + self.name + ' is not unique'
   
   } 

   constraint CheckParameterType{

      guard : self.satisfies("UniqueName") and self.paramRef.isDefined() and self.paramRef.typeRef.isDefined() and self.typeRef.isDefined()
      check : self.paramRef.typeRef.uid = self. typeRef.uid
      message : 'FormVariable ' + self.name + ' has different type then '+self.paramRef.name
   
   } 

}


 context form::DataControl {

  constraint HasName {

      check :  self.name.isDefined()

      message : 'Unnamed ' + self.eClass().name + ' not allowed'

  }

   constraint UniqueName{

      guard : self.satisfies("HasName")
      check : self.eContainer().controls.select(r|r.isKindOf(DataControl) and r.name=self.name).size() = 1
      message : 'Data control name  ' + self.name + ' is not unique'
   
   } 

  constraint HasCreateMethod {

      check :  self.create.isDefined()

      message : 'Create Method for ' + self.name + ' is not defined'

  }


 constraint HasSearchMethod {

      check :  self.search.isDefined()

      message : 'Search Method for ' + self.name + ' is not defined'

  }


 constraint BaseType {

      check :  self.baseType <> null  and self.baseType.typeRef <> null

      message : 'Basetype for ' + self.name + ' is not defined'

  }

}
